# Copyright (c) 2021 Incisive Technology Ltd
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
from typing import Any, Optional
from threading import Thread
from hikaru.generate import from_dict


class Response(object):
    """
    Response bundles up the possible responses that can be generated by K8s calls

    All Hikaru methods and functions return Response objects, which Hikaru fills out
    upon receiving a response from the underlying K8s method calls. K8s may return
    one of two kinds of values: for blocking calls, K8s returns the response code,
    data object, and headers. For async calls, K8s returns the thread that is
    processing the call. Hikaru's Response objects cover both of these possibilities.

    All attributes are public and can be interpreted as follows:

    If the call is blocking:
    - code: integer response code from K8s
    - obj: the data returned for the call. May be plain data, or may be an
      instance of a HikaruDocumentBase subclass, depending on the call.
    - headers: a dict-like object of the response headers
    - thread: None

    If the call is non-blocking:
    - code, obj, headers: all None
    - thread: instance of threading.Thread that is processing the call
    """
    def __init__(self, k8s_response, codes_with_objects):
        """
        Creates a new response:
        :param k8s_response: a 3-tuple consisting of:
            - return value dict
            - return code
            - headers
        :param codes_with_objects: an iterable of ints that are codes for which
            the self.obj field is a Hikaru object in dict form
        """
        self.code: Optional[int] = None
        self.obj: Optional[Any] = None
        self.headers: Optional[dict] = None
        self.thread: Optional[Thread] = None
        if type(k8s_response) is tuple:
            self.obj = k8s_response[0]
            self.code = k8s_response[1]
            self.headers = k8s_response[2]
            if self.code in codes_with_objects:
                # the object is some kind of K8s object
                self.obj = from_dict(self.obj.to_dict())
        else:
            # assume a thread
            self.thread = k8s_response
