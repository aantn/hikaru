#
# Copyright (c) 2021 Incisive Technology Ltd
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
"""
DO NOT EDIT THIS FILE!

This module is automatically generated using the hikaru.build program that turns
a Kubernetes swagger spec into the code for the hikaru.model package.
"""


from hikaru.meta import HikaruBase, HikaruDocumentBase
from hikaru.generate import get_clean_dict
from typing import List, Dict, Optional, Any
from dataclasses import dataclass, field, InitVar

from kubernetes.client import ApiClient


@dataclass
class RawExtension(HikaruBase):
    r"""
    RawExtension is used to hold extensions in external versions. To use this, make a
    field which has RawExtension as its type in your external, versioned struct, and
    Object in your internal struct. You also need to register your various plugin types.
    // Internal package: type MyAPIObject struct { runtime.TypeMeta `json:",inline"`
    MyPlugin runtime.Object `json:"myPlugin"` } type PluginA struct { AOption string
    `json:"aOption"` } // External package: type MyAPIObject struct { runtime.TypeMeta
    `json:",inline"` MyPlugin runtime.RawExtension `json:"myPlugin"` } type PluginA struct
    { AOption string `json:"aOption"` } // On the wire, the JSON will look something like
    this: { "kind":"MyAPIObject", "apiVersion":"v1", "myPlugin": { "kind":"PluginA",
    "aOption":"foo", }, } So what happens? Decode first uses json or yaml to unmarshal the
    serialized data into your external MyAPIObject. That causes the raw JSON to be stored,
    but not unpacked. The next step is to copy (using pkg/conversion) into the internal
    struct. The runtime package's DefaultScheme has conversion functions installed which
    will unpack the JSON stored in RawExtension, turning it into the correct object type,
    and storing it in the Object. (TODO: In the case where the object is of an unknown
    type, a runtime.Unknown object will be created and stored.)

    Full name: runtime.RawExtension

    Attributes:
    Raw: Raw is the underlying serialization of this object.
    """

    Raw: str


@dataclass
class Info(HikaruBase):
    r"""
    Info contains versioning information. how we'll want to distribute that information.

    Full name: version.Info

    Attributes:
    buildDate:
    compiler:
    gitCommit:
    gitTreeState:
    gitVersion:
    goVersion:
    major:
    minor:
    platform:
    """

    buildDate: str
    compiler: str
    gitCommit: str
    gitTreeState: str
    gitVersion: str
    goVersion: str
    major: str
    minor: str
    platform: str


globs = dict(globals())
__all__ = [c.__name__ for c in globs.values()
           if type(c) == type]
del globs
