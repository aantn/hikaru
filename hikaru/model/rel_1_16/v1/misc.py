#
# Copyright (c) 2021 Incisive Technology Ltd
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
"""
DO NOT EDIT THIS FILE!

This module is automatically generated using the Hikaru build program that turns
a Kubernetes swagger spec into the code for the hikaru.model package.
"""

from typing import *
from hikaru import HikaruOpsBase
from hikaru.utils import Response
from kubernetes.client import CoreV1Api, ApiClient


class NamespacesOps(HikaruOpsBase):
    @staticmethod
    def connectGetNamespacedPodAttach(
        name: str,
        namespace: str,
        container: Optional[str] = None,
        stderr: Optional[bool] = None,
        stdin: Optional[bool] = None,
        stdout: Optional[bool] = None,
        tty: Optional[bool] = None,
        client: ApiClient = None,
    ) -> Response:
        r"""
        connect GET requests to attach of Pod

        operationID: connectGetNamespacedPodAttach
        path: /api/v1/namespaces/{namespace}/pods/{name}/attach

        :param name: part of the URL path
        :param namespace: part of the URL path
        :param container: The container in which to execute the command.
            Defaults to only container if there is only one container in
            the pod.
        :param stderr: Stderr if true indicates that stderr is to be
            redirected for the attach call. Defaults to true.
        :param stdin: Stdin if true, redirects the standard input stream of
            the pod for this call. Defaults to false.
        :param stdout: Stdout if true indicates that stdout is to be
            redirected for the attach call. Defaults to true.
        :param tty: TTY if true indicates that a tty will be allocated for
            the attach call. This is passed through the container runtime
            so the tty is allocated on the worker node by the container
            runtime. Defaults to false.
        :param client: optional; instance of kubernetes.client.api_client.ApiClient

        :return: hikaru.utils.Response instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   str    OK
          401   None    Unauthorized
        """
        client_to_use = client
        inst = CoreV1Api(api_client=client_to_use)
        the_method = getattr(inst, "connect_get_namespaced_pod_attach_with_http_info")
        all_args = dict()
        all_args["name"] = name
        all_args["namespace"] = namespace
        all_args["container"] = container
        all_args["stderr"] = stderr
        all_args["stdin"] = stdin
        all_args["stdout"] = stdout
        all_args["tty"] = tty
        result = the_method(**all_args)
        codes_returning_objects = ()
        return Response(result, codes_returning_objects)

    @staticmethod
    def connectPostNamespacedPodAttach(
        name: str, namespace: str, client: ApiClient = None
    ) -> Response:
        r"""
        connect POST requests to attach of Pod

        operationID: connectPostNamespacedPodAttach
        path: /api/v1/namespaces/{namespace}/pods/{name}/attach

        :param name: part of the URL path
        :param namespace: part of the URL path
        :param client: optional; instance of kubernetes.client.api_client.ApiClient

        :return: hikaru.utils.Response instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   str    OK
          401   None    Unauthorized
        """
        client_to_use = client
        inst = CoreV1Api(api_client=client_to_use)
        the_method = getattr(inst, "connect_post_namespaced_pod_attach_with_http_info")
        all_args = dict()
        all_args["name"] = name
        all_args["namespace"] = namespace
        result = the_method(**all_args)
        codes_returning_objects = ()
        return Response(result, codes_returning_objects)

    @staticmethod
    def connectGetNamespacedPodExec(
        name: str,
        namespace: str,
        command: Optional[str] = None,
        container: Optional[str] = None,
        stderr: Optional[bool] = None,
        stdin: Optional[bool] = None,
        stdout: Optional[bool] = None,
        tty: Optional[bool] = None,
        client: ApiClient = None,
    ) -> Response:
        r"""
        connect GET requests to exec of Pod

        operationID: connectGetNamespacedPodExec
        path: /api/v1/namespaces/{namespace}/pods/{name}/exec

        :param name: part of the URL path
        :param namespace: part of the URL path
        :param command: Command is the remote command to execute. argv array.
            Not executed within a shell.
        :param container: Container in which to execute the command. Defaults
            to only container if there is only one container in the pod.
        :param stderr: Redirect the standard error stream of the pod for this
            call. Defaults to true.
        :param stdin: Redirect the standard input stream of the pod for this
            call. Defaults to false.
        :param stdout: Redirect the standard output stream of the pod for
            this call. Defaults to true.
        :param tty: TTY if true indicates that a tty will be allocated for
            the exec call. Defaults to false.
        :param client: optional; instance of kubernetes.client.api_client.ApiClient

        :return: hikaru.utils.Response instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   str    OK
          401   None    Unauthorized
        """
        client_to_use = client
        inst = CoreV1Api(api_client=client_to_use)
        the_method = getattr(inst, "connect_get_namespaced_pod_exec_with_http_info")
        all_args = dict()
        all_args["name"] = name
        all_args["namespace"] = namespace
        all_args["command"] = command
        all_args["container"] = container
        all_args["stderr"] = stderr
        all_args["stdin"] = stdin
        all_args["stdout"] = stdout
        all_args["tty"] = tty
        result = the_method(**all_args)
        codes_returning_objects = ()
        return Response(result, codes_returning_objects)

    @staticmethod
    def connectPostNamespacedPodExec(
        name: str, namespace: str, client: ApiClient = None
    ) -> Response:
        r"""
        connect POST requests to exec of Pod

        operationID: connectPostNamespacedPodExec
        path: /api/v1/namespaces/{namespace}/pods/{name}/exec

        :param name: part of the URL path
        :param namespace: part of the URL path
        :param client: optional; instance of kubernetes.client.api_client.ApiClient

        :return: hikaru.utils.Response instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   str    OK
          401   None    Unauthorized
        """
        client_to_use = client
        inst = CoreV1Api(api_client=client_to_use)
        the_method = getattr(inst, "connect_post_namespaced_pod_exec_with_http_info")
        all_args = dict()
        all_args["name"] = name
        all_args["namespace"] = namespace
        result = the_method(**all_args)
        codes_returning_objects = ()
        return Response(result, codes_returning_objects)

    @staticmethod
    def readNamespacedPodLog(
        name: str,
        namespace: str,
        container: Optional[str] = None,
        follow: Optional[bool] = None,
        limit_bytes: Optional[int] = None,
        pretty: Optional[str] = None,
        previous: Optional[bool] = None,
        since_seconds: Optional[int] = None,
        tail_lines: Optional[int] = None,
        timestamps: Optional[bool] = None,
        client: ApiClient = None,
    ) -> Response:
        r"""
        read log of the specified Pod

        operationID: readNamespacedPodLog
        path: /api/v1/namespaces/{namespace}/pods/{name}/log

        :param name: part of the URL path
        :param namespace: part of the URL path
        :param container: The container for which to stream logs. Defaults to
            only container if there is one container in the pod.
        :param follow: Follow the log stream of the pod. Defaults to false.
        :param limit_bytes: If set, the number of bytes to read from the
            server before terminating the log output. This may not display
            a complete final line of logging, and may return slightly more
            or slightly less than the specified limit.
        :param pretty: If 'true', then the output is pretty printed.
        :param previous: Return previous terminated container logs. Defaults
            to false.
        :param since_seconds: A relative time in seconds before the current
            time from which to show logs. If this value precedes the time
            a pod was started, only logs since the pod start will be
            returned. If this value is in the future, no logs will be
            returned. Only one of sinceSeconds or sinceTime may be
            specified.
        :param tail_lines: If set, the number of lines from the end of the
            logs to show. If not specified, logs are shown from the
            creation of the container or sinceSeconds or sinceTime
        :param timestamps: If true, add an RFC3339 or RFC3339Nano timestamp
            at the beginning of every line of log output. Defaults to
            false.
        :param client: optional; instance of kubernetes.client.api_client.ApiClient

        :return: hikaru.utils.Response instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   str    OK
          401   None    Unauthorized
        """
        client_to_use = client
        inst = CoreV1Api(api_client=client_to_use)
        the_method = getattr(inst, "read_namespaced_pod_log_with_http_info")
        all_args = dict()
        all_args["name"] = name
        all_args["namespace"] = namespace
        all_args["container"] = container
        all_args["follow"] = follow
        all_args["limit_bytes"] = limit_bytes
        all_args["pretty"] = pretty
        all_args["previous"] = previous
        all_args["since_seconds"] = since_seconds
        all_args["tail_lines"] = tail_lines
        all_args["timestamps"] = timestamps
        result = the_method(**all_args)
        codes_returning_objects = ()
        return Response(result, codes_returning_objects)

    @staticmethod
    def connectGetNamespacedPodPortforward(
        name: str, namespace: str, ports: Optional[int] = None, client: ApiClient = None
    ) -> Response:
        r"""
        connect GET requests to portforward of Pod

        operationID: connectGetNamespacedPodPortforward
        path: /api/v1/namespaces/{namespace}/pods/{name}/portforward

        :param name: part of the URL path
        :param namespace: part of the URL path
        :param ports: List of ports to forward Required when using WebSockets
        :param client: optional; instance of kubernetes.client.api_client.ApiClient

        :return: hikaru.utils.Response instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   str    OK
          401   None    Unauthorized
        """
        client_to_use = client
        inst = CoreV1Api(api_client=client_to_use)
        the_method = getattr(
            inst, "connect_get_namespaced_pod_portforward_with_http_info"
        )
        all_args = dict()
        all_args["name"] = name
        all_args["namespace"] = namespace
        all_args["ports"] = ports
        result = the_method(**all_args)
        codes_returning_objects = ()
        return Response(result, codes_returning_objects)

    @staticmethod
    def connectPostNamespacedPodPortforward(
        name: str, namespace: str, client: ApiClient = None
    ) -> Response:
        r"""
        connect POST requests to portforward of Pod

        operationID: connectPostNamespacedPodPortforward
        path: /api/v1/namespaces/{namespace}/pods/{name}/portforward

        :param name: part of the URL path
        :param namespace: part of the URL path
        :param client: optional; instance of kubernetes.client.api_client.ApiClient

        :return: hikaru.utils.Response instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   str    OK
          401   None    Unauthorized
        """
        client_to_use = client
        inst = CoreV1Api(api_client=client_to_use)
        the_method = getattr(
            inst, "connect_post_namespaced_pod_portforward_with_http_info"
        )
        all_args = dict()
        all_args["name"] = name
        all_args["namespace"] = namespace
        result = the_method(**all_args)
        codes_returning_objects = ()
        return Response(result, codes_returning_objects)

    @staticmethod
    def connectDeleteNamespacedPodProxy(
        name: str, namespace: str, client: ApiClient = None
    ) -> Response:
        r"""
        connect DELETE requests to proxy of Pod

        operationID: connectDeleteNamespacedPodProxy
        path: /api/v1/namespaces/{namespace}/pods/{name}/proxy

        :param name: part of the URL path
        :param namespace: part of the URL path
        :param client: optional; instance of kubernetes.client.api_client.ApiClient

        :return: hikaru.utils.Response instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   str    OK
          401   None    Unauthorized
        """
        client_to_use = client
        inst = CoreV1Api(api_client=client_to_use)
        the_method = getattr(inst, "connect_delete_namespaced_pod_proxy_with_http_info")
        all_args = dict()
        all_args["name"] = name
        all_args["namespace"] = namespace
        result = the_method(**all_args)
        codes_returning_objects = ()
        return Response(result, codes_returning_objects)

    @staticmethod
    def connectGetNamespacedPodProxy(
        name: str, namespace: str, client: ApiClient = None
    ) -> Response:
        r"""
        connect GET requests to proxy of Pod

        operationID: connectGetNamespacedPodProxy
        path: /api/v1/namespaces/{namespace}/pods/{name}/proxy

        :param name: part of the URL path
        :param namespace: part of the URL path
        :param client: optional; instance of kubernetes.client.api_client.ApiClient

        :return: hikaru.utils.Response instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   str    OK
          401   None    Unauthorized
        """
        client_to_use = client
        inst = CoreV1Api(api_client=client_to_use)
        the_method = getattr(inst, "connect_get_namespaced_pod_proxy_with_http_info")
        all_args = dict()
        all_args["name"] = name
        all_args["namespace"] = namespace
        result = the_method(**all_args)
        codes_returning_objects = ()
        return Response(result, codes_returning_objects)

    @staticmethod
    def connectHeadNamespacedPodProxy(
        name: str, namespace: str, client: ApiClient = None
    ) -> Response:
        r"""
        connect HEAD requests to proxy of Pod

        operationID: connectHeadNamespacedPodProxy
        path: /api/v1/namespaces/{namespace}/pods/{name}/proxy

        :param name: part of the URL path
        :param namespace: part of the URL path
        :param client: optional; instance of kubernetes.client.api_client.ApiClient

        :return: hikaru.utils.Response instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   str    OK
          401   None    Unauthorized
        """
        client_to_use = client
        inst = CoreV1Api(api_client=client_to_use)
        the_method = getattr(inst, "connect_head_namespaced_pod_proxy_with_http_info")
        all_args = dict()
        all_args["name"] = name
        all_args["namespace"] = namespace
        result = the_method(**all_args)
        codes_returning_objects = ()
        return Response(result, codes_returning_objects)

    @staticmethod
    def connectOptionsNamespacedPodProxy(
        name: str, namespace: str, path: Optional[str] = None, client: ApiClient = None
    ) -> Response:
        r"""
        connect OPTIONS requests to proxy of Pod

        operationID: connectOptionsNamespacedPodProxy
        path: /api/v1/namespaces/{namespace}/pods/{name}/proxy

        :param name: part of the URL path
        :param namespace: part of the URL path
        :param path: Path is the URL path to use for the current proxy
            request to pod.
        :param client: optional; instance of kubernetes.client.api_client.ApiClient

        :return: hikaru.utils.Response instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   str    OK
          401   None    Unauthorized
        """
        client_to_use = client
        inst = CoreV1Api(api_client=client_to_use)
        the_method = getattr(
            inst, "connect_options_namespaced_pod_proxy_with_http_info"
        )
        all_args = dict()
        all_args["name"] = name
        all_args["namespace"] = namespace
        all_args["path"] = path
        result = the_method(**all_args)
        codes_returning_objects = ()
        return Response(result, codes_returning_objects)

    @staticmethod
    def connectPatchNamespacedPodProxy(
        name: str, namespace: str, client: ApiClient = None
    ) -> Response:
        r"""
        connect PATCH requests to proxy of Pod

        operationID: connectPatchNamespacedPodProxy
        path: /api/v1/namespaces/{namespace}/pods/{name}/proxy

        :param name: part of the URL path
        :param namespace: part of the URL path
        :param client: optional; instance of kubernetes.client.api_client.ApiClient

        :return: hikaru.utils.Response instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   str    OK
          401   None    Unauthorized
        """
        client_to_use = client
        inst = CoreV1Api(api_client=client_to_use)
        the_method = getattr(inst, "connect_patch_namespaced_pod_proxy_with_http_info")
        all_args = dict()
        all_args["name"] = name
        all_args["namespace"] = namespace
        result = the_method(**all_args)
        codes_returning_objects = ()
        return Response(result, codes_returning_objects)

    @staticmethod
    def connectPostNamespacedPodProxy(
        name: str, namespace: str, client: ApiClient = None
    ) -> Response:
        r"""
        connect POST requests to proxy of Pod

        operationID: connectPostNamespacedPodProxy
        path: /api/v1/namespaces/{namespace}/pods/{name}/proxy

        :param name: part of the URL path
        :param namespace: part of the URL path
        :param client: optional; instance of kubernetes.client.api_client.ApiClient

        :return: hikaru.utils.Response instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   str    OK
          401   None    Unauthorized
        """
        client_to_use = client
        inst = CoreV1Api(api_client=client_to_use)
        the_method = getattr(inst, "connect_post_namespaced_pod_proxy_with_http_info")
        all_args = dict()
        all_args["name"] = name
        all_args["namespace"] = namespace
        result = the_method(**all_args)
        codes_returning_objects = ()
        return Response(result, codes_returning_objects)

    @staticmethod
    def connectPutNamespacedPodProxy(
        name: str, namespace: str, client: ApiClient = None
    ) -> Response:
        r"""
        connect PUT requests to proxy of Pod

        operationID: connectPutNamespacedPodProxy
        path: /api/v1/namespaces/{namespace}/pods/{name}/proxy

        :param name: part of the URL path
        :param namespace: part of the URL path
        :param client: optional; instance of kubernetes.client.api_client.ApiClient

        :return: hikaru.utils.Response instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   str    OK
          401   None    Unauthorized
        """
        client_to_use = client
        inst = CoreV1Api(api_client=client_to_use)
        the_method = getattr(inst, "connect_put_namespaced_pod_proxy_with_http_info")
        all_args = dict()
        all_args["name"] = name
        all_args["namespace"] = namespace
        result = the_method(**all_args)
        codes_returning_objects = ()
        return Response(result, codes_returning_objects)

    @staticmethod
    def connectDeleteNamespacedPodProxyWithPath(
        name: str, namespace: str, path: str, client: ApiClient = None
    ) -> Response:
        r"""
        connect DELETE requests to proxy of Pod

        operationID: connectDeleteNamespacedPodProxyWithPath
        path: /api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}

        :param name: part of the URL path
        :param namespace: part of the URL path
        :param path: part of the URL path
        :param client: optional; instance of kubernetes.client.api_client.ApiClient

        :return: hikaru.utils.Response instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   str    OK
          401   None    Unauthorized
        """
        client_to_use = client
        inst = CoreV1Api(api_client=client_to_use)
        the_method = getattr(
            inst, "connect_delete_namespaced_pod_proxy_with_path_with_http_info"
        )
        all_args = dict()
        all_args["name"] = name
        all_args["namespace"] = namespace
        all_args["path"] = path
        result = the_method(**all_args)
        codes_returning_objects = ()
        return Response(result, codes_returning_objects)

    @staticmethod
    def connectGetNamespacedPodProxyWithPath(
        name: str, namespace: str, path: str, client: ApiClient = None
    ) -> Response:
        r"""
        connect GET requests to proxy of Pod

        operationID: connectGetNamespacedPodProxyWithPath
        path: /api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}

        :param name: part of the URL path
        :param namespace: part of the URL path
        :param path: part of the URL path
        :param client: optional; instance of kubernetes.client.api_client.ApiClient

        :return: hikaru.utils.Response instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   str    OK
          401   None    Unauthorized
        """
        client_to_use = client
        inst = CoreV1Api(api_client=client_to_use)
        the_method = getattr(
            inst, "connect_get_namespaced_pod_proxy_with_path_with_http_info"
        )
        all_args = dict()
        all_args["name"] = name
        all_args["namespace"] = namespace
        all_args["path"] = path
        result = the_method(**all_args)
        codes_returning_objects = ()
        return Response(result, codes_returning_objects)

    @staticmethod
    def connectHeadNamespacedPodProxyWithPath(
        name: str, namespace: str, path: str, client: ApiClient = None
    ) -> Response:
        r"""
        connect HEAD requests to proxy of Pod

        operationID: connectHeadNamespacedPodProxyWithPath
        path: /api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}

        :param name: part of the URL path
        :param namespace: part of the URL path
        :param path: part of the URL path
        :param client: optional; instance of kubernetes.client.api_client.ApiClient

        :return: hikaru.utils.Response instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   str    OK
          401   None    Unauthorized
        """
        client_to_use = client
        inst = CoreV1Api(api_client=client_to_use)
        the_method = getattr(
            inst, "connect_head_namespaced_pod_proxy_with_path_with_http_info"
        )
        all_args = dict()
        all_args["name"] = name
        all_args["namespace"] = namespace
        all_args["path"] = path
        result = the_method(**all_args)
        codes_returning_objects = ()
        return Response(result, codes_returning_objects)

    @staticmethod
    def connectOptionsNamespacedPodProxyWithPath(
        name: str, namespace: str, path: str, client: ApiClient = None
    ) -> Response:
        r"""
        connect OPTIONS requests to proxy of Pod

        operationID: connectOptionsNamespacedPodProxyWithPath
        path: /api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}

        :param name: part of the URL path
        :param namespace: part of the URL path
        :param path: part of the URL path
        :param client: optional; instance of kubernetes.client.api_client.ApiClient

        :return: hikaru.utils.Response instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   str    OK
          401   None    Unauthorized
        """
        client_to_use = client
        inst = CoreV1Api(api_client=client_to_use)
        the_method = getattr(
            inst, "connect_options_namespaced_pod_proxy_with_path_with_http_info"
        )
        all_args = dict()
        all_args["name"] = name
        all_args["namespace"] = namespace
        all_args["path"] = path
        result = the_method(**all_args)
        codes_returning_objects = ()
        return Response(result, codes_returning_objects)

    @staticmethod
    def connectPatchNamespacedPodProxyWithPath(
        name: str, namespace: str, path: str, client: ApiClient = None
    ) -> Response:
        r"""
        connect PATCH requests to proxy of Pod

        operationID: connectPatchNamespacedPodProxyWithPath
        path: /api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}

        :param name: part of the URL path
        :param namespace: part of the URL path
        :param path: part of the URL path
        :param client: optional; instance of kubernetes.client.api_client.ApiClient

        :return: hikaru.utils.Response instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   str    OK
          401   None    Unauthorized
        """
        client_to_use = client
        inst = CoreV1Api(api_client=client_to_use)
        the_method = getattr(
            inst, "connect_patch_namespaced_pod_proxy_with_path_with_http_info"
        )
        all_args = dict()
        all_args["name"] = name
        all_args["namespace"] = namespace
        all_args["path"] = path
        result = the_method(**all_args)
        codes_returning_objects = ()
        return Response(result, codes_returning_objects)

    @staticmethod
    def connectPostNamespacedPodProxyWithPath(
        name: str, namespace: str, path: str, client: ApiClient = None
    ) -> Response:
        r"""
        connect POST requests to proxy of Pod

        operationID: connectPostNamespacedPodProxyWithPath
        path: /api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}

        :param name: part of the URL path
        :param namespace: part of the URL path
        :param path: part of the URL path
        :param client: optional; instance of kubernetes.client.api_client.ApiClient

        :return: hikaru.utils.Response instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   str    OK
          401   None    Unauthorized
        """
        client_to_use = client
        inst = CoreV1Api(api_client=client_to_use)
        the_method = getattr(
            inst, "connect_post_namespaced_pod_proxy_with_path_with_http_info"
        )
        all_args = dict()
        all_args["name"] = name
        all_args["namespace"] = namespace
        all_args["path"] = path
        result = the_method(**all_args)
        codes_returning_objects = ()
        return Response(result, codes_returning_objects)

    @staticmethod
    def connectPutNamespacedPodProxyWithPath(
        name: str, namespace: str, path: str, client: ApiClient = None
    ) -> Response:
        r"""
        connect PUT requests to proxy of Pod

        operationID: connectPutNamespacedPodProxyWithPath
        path: /api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}

        :param name: part of the URL path
        :param namespace: part of the URL path
        :param path: part of the URL path
        :param client: optional; instance of kubernetes.client.api_client.ApiClient

        :return: hikaru.utils.Response instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   str    OK
          401   None    Unauthorized
        """
        client_to_use = client
        inst = CoreV1Api(api_client=client_to_use)
        the_method = getattr(
            inst, "connect_put_namespaced_pod_proxy_with_path_with_http_info"
        )
        all_args = dict()
        all_args["name"] = name
        all_args["namespace"] = namespace
        all_args["path"] = path
        result = the_method(**all_args)
        codes_returning_objects = ()
        return Response(result, codes_returning_objects)

    @staticmethod
    def connectDeleteNamespacedServiceProxy(
        name: str, namespace: str, client: ApiClient = None
    ) -> Response:
        r"""
        connect DELETE requests to proxy of Service

        operationID: connectDeleteNamespacedServiceProxy
        path: /api/v1/namespaces/{namespace}/services/{name}/proxy

        :param name: part of the URL path
        :param namespace: part of the URL path
        :param client: optional; instance of kubernetes.client.api_client.ApiClient

        :return: hikaru.utils.Response instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   str    OK
          401   None    Unauthorized
        """
        client_to_use = client
        inst = CoreV1Api(api_client=client_to_use)
        the_method = getattr(
            inst, "connect_delete_namespaced_service_proxy_with_http_info"
        )
        all_args = dict()
        all_args["name"] = name
        all_args["namespace"] = namespace
        result = the_method(**all_args)
        codes_returning_objects = ()
        return Response(result, codes_returning_objects)

    @staticmethod
    def connectGetNamespacedServiceProxy(
        name: str, namespace: str, client: ApiClient = None
    ) -> Response:
        r"""
        connect GET requests to proxy of Service

        operationID: connectGetNamespacedServiceProxy
        path: /api/v1/namespaces/{namespace}/services/{name}/proxy

        :param name: part of the URL path
        :param namespace: part of the URL path
        :param client: optional; instance of kubernetes.client.api_client.ApiClient

        :return: hikaru.utils.Response instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   str    OK
          401   None    Unauthorized
        """
        client_to_use = client
        inst = CoreV1Api(api_client=client_to_use)
        the_method = getattr(
            inst, "connect_get_namespaced_service_proxy_with_http_info"
        )
        all_args = dict()
        all_args["name"] = name
        all_args["namespace"] = namespace
        result = the_method(**all_args)
        codes_returning_objects = ()
        return Response(result, codes_returning_objects)

    @staticmethod
    def connectHeadNamespacedServiceProxy(
        name: str, namespace: str, client: ApiClient = None
    ) -> Response:
        r"""
        connect HEAD requests to proxy of Service

        operationID: connectHeadNamespacedServiceProxy
        path: /api/v1/namespaces/{namespace}/services/{name}/proxy

        :param name: part of the URL path
        :param namespace: part of the URL path
        :param client: optional; instance of kubernetes.client.api_client.ApiClient

        :return: hikaru.utils.Response instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   str    OK
          401   None    Unauthorized
        """
        client_to_use = client
        inst = CoreV1Api(api_client=client_to_use)
        the_method = getattr(
            inst, "connect_head_namespaced_service_proxy_with_http_info"
        )
        all_args = dict()
        all_args["name"] = name
        all_args["namespace"] = namespace
        result = the_method(**all_args)
        codes_returning_objects = ()
        return Response(result, codes_returning_objects)

    @staticmethod
    def connectOptionsNamespacedServiceProxy(
        name: str, namespace: str, path: Optional[str] = None, client: ApiClient = None
    ) -> Response:
        r"""
        connect OPTIONS requests to proxy of Service

        operationID: connectOptionsNamespacedServiceProxy
        path: /api/v1/namespaces/{namespace}/services/{name}/proxy

        :param name: part of the URL path
        :param namespace: part of the URL path
        :param path: Path is the part of URLs that include service endpoints,
            suffixes, and parameters to use for the current proxy request
            to service. For example, the whole request URL is
            http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy.
            Path is _search?q=user:kimchy.
        :param client: optional; instance of kubernetes.client.api_client.ApiClient

        :return: hikaru.utils.Response instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   str    OK
          401   None    Unauthorized
        """
        client_to_use = client
        inst = CoreV1Api(api_client=client_to_use)
        the_method = getattr(
            inst, "connect_options_namespaced_service_proxy_with_http_info"
        )
        all_args = dict()
        all_args["name"] = name
        all_args["namespace"] = namespace
        all_args["path"] = path
        result = the_method(**all_args)
        codes_returning_objects = ()
        return Response(result, codes_returning_objects)

    @staticmethod
    def connectPatchNamespacedServiceProxy(
        name: str, namespace: str, client: ApiClient = None
    ) -> Response:
        r"""
        connect PATCH requests to proxy of Service

        operationID: connectPatchNamespacedServiceProxy
        path: /api/v1/namespaces/{namespace}/services/{name}/proxy

        :param name: part of the URL path
        :param namespace: part of the URL path
        :param client: optional; instance of kubernetes.client.api_client.ApiClient

        :return: hikaru.utils.Response instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   str    OK
          401   None    Unauthorized
        """
        client_to_use = client
        inst = CoreV1Api(api_client=client_to_use)
        the_method = getattr(
            inst, "connect_patch_namespaced_service_proxy_with_http_info"
        )
        all_args = dict()
        all_args["name"] = name
        all_args["namespace"] = namespace
        result = the_method(**all_args)
        codes_returning_objects = ()
        return Response(result, codes_returning_objects)

    @staticmethod
    def connectPostNamespacedServiceProxy(
        name: str, namespace: str, client: ApiClient = None
    ) -> Response:
        r"""
        connect POST requests to proxy of Service

        operationID: connectPostNamespacedServiceProxy
        path: /api/v1/namespaces/{namespace}/services/{name}/proxy

        :param name: part of the URL path
        :param namespace: part of the URL path
        :param client: optional; instance of kubernetes.client.api_client.ApiClient

        :return: hikaru.utils.Response instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   str    OK
          401   None    Unauthorized
        """
        client_to_use = client
        inst = CoreV1Api(api_client=client_to_use)
        the_method = getattr(
            inst, "connect_post_namespaced_service_proxy_with_http_info"
        )
        all_args = dict()
        all_args["name"] = name
        all_args["namespace"] = namespace
        result = the_method(**all_args)
        codes_returning_objects = ()
        return Response(result, codes_returning_objects)

    @staticmethod
    def connectPutNamespacedServiceProxy(
        name: str, namespace: str, client: ApiClient = None
    ) -> Response:
        r"""
        connect PUT requests to proxy of Service

        operationID: connectPutNamespacedServiceProxy
        path: /api/v1/namespaces/{namespace}/services/{name}/proxy

        :param name: part of the URL path
        :param namespace: part of the URL path
        :param client: optional; instance of kubernetes.client.api_client.ApiClient

        :return: hikaru.utils.Response instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   str    OK
          401   None    Unauthorized
        """
        client_to_use = client
        inst = CoreV1Api(api_client=client_to_use)
        the_method = getattr(
            inst, "connect_put_namespaced_service_proxy_with_http_info"
        )
        all_args = dict()
        all_args["name"] = name
        all_args["namespace"] = namespace
        result = the_method(**all_args)
        codes_returning_objects = ()
        return Response(result, codes_returning_objects)

    @staticmethod
    def connectDeleteNamespacedServiceProxyWithPath(
        name: str, namespace: str, path: str, client: ApiClient = None
    ) -> Response:
        r"""
        connect DELETE requests to proxy of Service

        operationID: connectDeleteNamespacedServiceProxyWithPath
        path: /api/v1/namespaces/{namespace}/services/{name}/proxy/{path}

        :param name: part of the URL path
        :param namespace: part of the URL path
        :param path: part of the URL path
        :param client: optional; instance of kubernetes.client.api_client.ApiClient

        :return: hikaru.utils.Response instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   str    OK
          401   None    Unauthorized
        """
        client_to_use = client
        inst = CoreV1Api(api_client=client_to_use)
        the_method = getattr(
            inst, "connect_delete_namespaced_service_proxy_with_path_with_http_info"
        )
        all_args = dict()
        all_args["name"] = name
        all_args["namespace"] = namespace
        all_args["path"] = path
        result = the_method(**all_args)
        codes_returning_objects = ()
        return Response(result, codes_returning_objects)

    @staticmethod
    def connectGetNamespacedServiceProxyWithPath(
        name: str, namespace: str, path: str, client: ApiClient = None
    ) -> Response:
        r"""
        connect GET requests to proxy of Service

        operationID: connectGetNamespacedServiceProxyWithPath
        path: /api/v1/namespaces/{namespace}/services/{name}/proxy/{path}

        :param name: part of the URL path
        :param namespace: part of the URL path
        :param path: part of the URL path
        :param client: optional; instance of kubernetes.client.api_client.ApiClient

        :return: hikaru.utils.Response instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   str    OK
          401   None    Unauthorized
        """
        client_to_use = client
        inst = CoreV1Api(api_client=client_to_use)
        the_method = getattr(
            inst, "connect_get_namespaced_service_proxy_with_path_with_http_info"
        )
        all_args = dict()
        all_args["name"] = name
        all_args["namespace"] = namespace
        all_args["path"] = path
        result = the_method(**all_args)
        codes_returning_objects = ()
        return Response(result, codes_returning_objects)

    @staticmethod
    def connectHeadNamespacedServiceProxyWithPath(
        name: str, namespace: str, path: str, client: ApiClient = None
    ) -> Response:
        r"""
        connect HEAD requests to proxy of Service

        operationID: connectHeadNamespacedServiceProxyWithPath
        path: /api/v1/namespaces/{namespace}/services/{name}/proxy/{path}

        :param name: part of the URL path
        :param namespace: part of the URL path
        :param path: part of the URL path
        :param client: optional; instance of kubernetes.client.api_client.ApiClient

        :return: hikaru.utils.Response instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   str    OK
          401   None    Unauthorized
        """
        client_to_use = client
        inst = CoreV1Api(api_client=client_to_use)
        the_method = getattr(
            inst, "connect_head_namespaced_service_proxy_with_path_with_http_info"
        )
        all_args = dict()
        all_args["name"] = name
        all_args["namespace"] = namespace
        all_args["path"] = path
        result = the_method(**all_args)
        codes_returning_objects = ()
        return Response(result, codes_returning_objects)

    @staticmethod
    def connectOptionsNamespacedServiceProxyWithPath(
        name: str, namespace: str, path: str, client: ApiClient = None
    ) -> Response:
        r"""
        connect OPTIONS requests to proxy of Service

        operationID: connectOptionsNamespacedServiceProxyWithPath
        path: /api/v1/namespaces/{namespace}/services/{name}/proxy/{path}

        :param name: part of the URL path
        :param namespace: part of the URL path
        :param path: part of the URL path
        :param client: optional; instance of kubernetes.client.api_client.ApiClient

        :return: hikaru.utils.Response instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   str    OK
          401   None    Unauthorized
        """
        client_to_use = client
        inst = CoreV1Api(api_client=client_to_use)
        the_method = getattr(
            inst, "connect_options_namespaced_service_proxy_with_path_with_http_info"
        )
        all_args = dict()
        all_args["name"] = name
        all_args["namespace"] = namespace
        all_args["path"] = path
        result = the_method(**all_args)
        codes_returning_objects = ()
        return Response(result, codes_returning_objects)

    @staticmethod
    def connectPatchNamespacedServiceProxyWithPath(
        name: str, namespace: str, path: str, client: ApiClient = None
    ) -> Response:
        r"""
        connect PATCH requests to proxy of Service

        operationID: connectPatchNamespacedServiceProxyWithPath
        path: /api/v1/namespaces/{namespace}/services/{name}/proxy/{path}

        :param name: part of the URL path
        :param namespace: part of the URL path
        :param path: part of the URL path
        :param client: optional; instance of kubernetes.client.api_client.ApiClient

        :return: hikaru.utils.Response instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   str    OK
          401   None    Unauthorized
        """
        client_to_use = client
        inst = CoreV1Api(api_client=client_to_use)
        the_method = getattr(
            inst, "connect_patch_namespaced_service_proxy_with_path_with_http_info"
        )
        all_args = dict()
        all_args["name"] = name
        all_args["namespace"] = namespace
        all_args["path"] = path
        result = the_method(**all_args)
        codes_returning_objects = ()
        return Response(result, codes_returning_objects)

    @staticmethod
    def connectPostNamespacedServiceProxyWithPath(
        name: str, namespace: str, path: str, client: ApiClient = None
    ) -> Response:
        r"""
        connect POST requests to proxy of Service

        operationID: connectPostNamespacedServiceProxyWithPath
        path: /api/v1/namespaces/{namespace}/services/{name}/proxy/{path}

        :param name: part of the URL path
        :param namespace: part of the URL path
        :param path: part of the URL path
        :param client: optional; instance of kubernetes.client.api_client.ApiClient

        :return: hikaru.utils.Response instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   str    OK
          401   None    Unauthorized
        """
        client_to_use = client
        inst = CoreV1Api(api_client=client_to_use)
        the_method = getattr(
            inst, "connect_post_namespaced_service_proxy_with_path_with_http_info"
        )
        all_args = dict()
        all_args["name"] = name
        all_args["namespace"] = namespace
        all_args["path"] = path
        result = the_method(**all_args)
        codes_returning_objects = ()
        return Response(result, codes_returning_objects)

    @staticmethod
    def connectPutNamespacedServiceProxyWithPath(
        name: str, namespace: str, path: str, client: ApiClient = None
    ) -> Response:
        r"""
        connect PUT requests to proxy of Service

        operationID: connectPutNamespacedServiceProxyWithPath
        path: /api/v1/namespaces/{namespace}/services/{name}/proxy/{path}

        :param name: part of the URL path
        :param namespace: part of the URL path
        :param path: part of the URL path
        :param client: optional; instance of kubernetes.client.api_client.ApiClient

        :return: hikaru.utils.Response instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   str    OK
          401   None    Unauthorized
        """
        client_to_use = client
        inst = CoreV1Api(api_client=client_to_use)
        the_method = getattr(
            inst, "connect_put_namespaced_service_proxy_with_path_with_http_info"
        )
        all_args = dict()
        all_args["name"] = name
        all_args["namespace"] = namespace
        all_args["path"] = path
        result = the_method(**all_args)
        codes_returning_objects = ()
        return Response(result, codes_returning_objects)

class NodesOps(HikaruOpsBase):
    @staticmethod
    def connectDeleteNodeProxy(name: str, client: ApiClient = None) -> Response:
        r"""
        connect DELETE requests to proxy of Node

        operationID: connectDeleteNodeProxy
        path: /api/v1/nodes/{name}/proxy

        :param name: part of the URL path
        :param client: optional; instance of kubernetes.client.api_client.ApiClient

        :return: hikaru.utils.Response instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   str    OK
          401   None    Unauthorized
        """
        client_to_use = client
        inst = CoreV1Api(api_client=client_to_use)
        the_method = getattr(inst, "connect_delete_node_proxy_with_http_info")
        all_args = dict()
        all_args["name"] = name
        result = the_method(**all_args)
        codes_returning_objects = ()
        return Response(result, codes_returning_objects)

    @staticmethod
    def connectGetNodeProxy(name: str, client: ApiClient = None) -> Response:
        r"""
        connect GET requests to proxy of Node

        operationID: connectGetNodeProxy
        path: /api/v1/nodes/{name}/proxy

        :param name: part of the URL path
        :param client: optional; instance of kubernetes.client.api_client.ApiClient

        :return: hikaru.utils.Response instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   str    OK
          401   None    Unauthorized
        """
        client_to_use = client
        inst = CoreV1Api(api_client=client_to_use)
        the_method = getattr(inst, "connect_get_node_proxy_with_http_info")
        all_args = dict()
        all_args["name"] = name
        result = the_method(**all_args)
        codes_returning_objects = ()
        return Response(result, codes_returning_objects)

    @staticmethod
    def connectHeadNodeProxy(name: str, client: ApiClient = None) -> Response:
        r"""
        connect HEAD requests to proxy of Node

        operationID: connectHeadNodeProxy
        path: /api/v1/nodes/{name}/proxy

        :param name: part of the URL path
        :param client: optional; instance of kubernetes.client.api_client.ApiClient

        :return: hikaru.utils.Response instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   str    OK
          401   None    Unauthorized
        """
        client_to_use = client
        inst = CoreV1Api(api_client=client_to_use)
        the_method = getattr(inst, "connect_head_node_proxy_with_http_info")
        all_args = dict()
        all_args["name"] = name
        result = the_method(**all_args)
        codes_returning_objects = ()
        return Response(result, codes_returning_objects)

    @staticmethod
    def connectOptionsNodeProxy(
        name: str, path: Optional[str] = None, client: ApiClient = None
    ) -> Response:
        r"""
        connect OPTIONS requests to proxy of Node

        operationID: connectOptionsNodeProxy
        path: /api/v1/nodes/{name}/proxy

        :param name: part of the URL path
        :param path: Path is the URL path to use for the current proxy
            request to node.
        :param client: optional; instance of kubernetes.client.api_client.ApiClient

        :return: hikaru.utils.Response instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   str    OK
          401   None    Unauthorized
        """
        client_to_use = client
        inst = CoreV1Api(api_client=client_to_use)
        the_method = getattr(inst, "connect_options_node_proxy_with_http_info")
        all_args = dict()
        all_args["name"] = name
        all_args["path"] = path
        result = the_method(**all_args)
        codes_returning_objects = ()
        return Response(result, codes_returning_objects)

    @staticmethod
    def connectPatchNodeProxy(name: str, client: ApiClient = None) -> Response:
        r"""
        connect PATCH requests to proxy of Node

        operationID: connectPatchNodeProxy
        path: /api/v1/nodes/{name}/proxy

        :param name: part of the URL path
        :param client: optional; instance of kubernetes.client.api_client.ApiClient

        :return: hikaru.utils.Response instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   str    OK
          401   None    Unauthorized
        """
        client_to_use = client
        inst = CoreV1Api(api_client=client_to_use)
        the_method = getattr(inst, "connect_patch_node_proxy_with_http_info")
        all_args = dict()
        all_args["name"] = name
        result = the_method(**all_args)
        codes_returning_objects = ()
        return Response(result, codes_returning_objects)

    @staticmethod
    def connectPostNodeProxy(name: str, client: ApiClient = None) -> Response:
        r"""
        connect POST requests to proxy of Node

        operationID: connectPostNodeProxy
        path: /api/v1/nodes/{name}/proxy

        :param name: part of the URL path
        :param client: optional; instance of kubernetes.client.api_client.ApiClient

        :return: hikaru.utils.Response instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   str    OK
          401   None    Unauthorized
        """
        client_to_use = client
        inst = CoreV1Api(api_client=client_to_use)
        the_method = getattr(inst, "connect_post_node_proxy_with_http_info")
        all_args = dict()
        all_args["name"] = name
        result = the_method(**all_args)
        codes_returning_objects = ()
        return Response(result, codes_returning_objects)

    @staticmethod
    def connectPutNodeProxy(name: str, client: ApiClient = None) -> Response:
        r"""
        connect PUT requests to proxy of Node

        operationID: connectPutNodeProxy
        path: /api/v1/nodes/{name}/proxy

        :param name: part of the URL path
        :param client: optional; instance of kubernetes.client.api_client.ApiClient

        :return: hikaru.utils.Response instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   str    OK
          401   None    Unauthorized
        """
        client_to_use = client
        inst = CoreV1Api(api_client=client_to_use)
        the_method = getattr(inst, "connect_put_node_proxy_with_http_info")
        all_args = dict()
        all_args["name"] = name
        result = the_method(**all_args)
        codes_returning_objects = ()
        return Response(result, codes_returning_objects)

    @staticmethod
    def connectDeleteNodeProxyWithPath(
        name: str, path: str, client: ApiClient = None
    ) -> Response:
        r"""
        connect DELETE requests to proxy of Node

        operationID: connectDeleteNodeProxyWithPath
        path: /api/v1/nodes/{name}/proxy/{path}

        :param name: part of the URL path
        :param path: part of the URL path
        :param client: optional; instance of kubernetes.client.api_client.ApiClient

        :return: hikaru.utils.Response instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   str    OK
          401   None    Unauthorized
        """
        client_to_use = client
        inst = CoreV1Api(api_client=client_to_use)
        the_method = getattr(inst, "connect_delete_node_proxy_with_path_with_http_info")
        all_args = dict()
        all_args["name"] = name
        all_args["path"] = path
        result = the_method(**all_args)
        codes_returning_objects = ()
        return Response(result, codes_returning_objects)

    @staticmethod
    def connectGetNodeProxyWithPath(
        name: str, path: str, client: ApiClient = None
    ) -> Response:
        r"""
        connect GET requests to proxy of Node

        operationID: connectGetNodeProxyWithPath
        path: /api/v1/nodes/{name}/proxy/{path}

        :param name: part of the URL path
        :param path: part of the URL path
        :param client: optional; instance of kubernetes.client.api_client.ApiClient

        :return: hikaru.utils.Response instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   str    OK
          401   None    Unauthorized
        """
        client_to_use = client
        inst = CoreV1Api(api_client=client_to_use)
        the_method = getattr(inst, "connect_get_node_proxy_with_path_with_http_info")
        all_args = dict()
        all_args["name"] = name
        all_args["path"] = path
        result = the_method(**all_args)
        codes_returning_objects = ()
        return Response(result, codes_returning_objects)

    @staticmethod
    def connectHeadNodeProxyWithPath(
        name: str, path: str, client: ApiClient = None
    ) -> Response:
        r"""
        connect HEAD requests to proxy of Node

        operationID: connectHeadNodeProxyWithPath
        path: /api/v1/nodes/{name}/proxy/{path}

        :param name: part of the URL path
        :param path: part of the URL path
        :param client: optional; instance of kubernetes.client.api_client.ApiClient

        :return: hikaru.utils.Response instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   str    OK
          401   None    Unauthorized
        """
        client_to_use = client
        inst = CoreV1Api(api_client=client_to_use)
        the_method = getattr(inst, "connect_head_node_proxy_with_path_with_http_info")
        all_args = dict()
        all_args["name"] = name
        all_args["path"] = path
        result = the_method(**all_args)
        codes_returning_objects = ()
        return Response(result, codes_returning_objects)

    @staticmethod
    def connectOptionsNodeProxyWithPath(
        name: str, path: str, client: ApiClient = None
    ) -> Response:
        r"""
        connect OPTIONS requests to proxy of Node

        operationID: connectOptionsNodeProxyWithPath
        path: /api/v1/nodes/{name}/proxy/{path}

        :param name: part of the URL path
        :param path: part of the URL path
        :param client: optional; instance of kubernetes.client.api_client.ApiClient

        :return: hikaru.utils.Response instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   str    OK
          401   None    Unauthorized
        """
        client_to_use = client
        inst = CoreV1Api(api_client=client_to_use)
        the_method = getattr(
            inst, "connect_options_node_proxy_with_path_with_http_info"
        )
        all_args = dict()
        all_args["name"] = name
        all_args["path"] = path
        result = the_method(**all_args)
        codes_returning_objects = ()
        return Response(result, codes_returning_objects)

    @staticmethod
    def connectPatchNodeProxyWithPath(
        name: str, path: str, client: ApiClient = None
    ) -> Response:
        r"""
        connect PATCH requests to proxy of Node

        operationID: connectPatchNodeProxyWithPath
        path: /api/v1/nodes/{name}/proxy/{path}

        :param name: part of the URL path
        :param path: part of the URL path
        :param client: optional; instance of kubernetes.client.api_client.ApiClient

        :return: hikaru.utils.Response instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   str    OK
          401   None    Unauthorized
        """
        client_to_use = client
        inst = CoreV1Api(api_client=client_to_use)
        the_method = getattr(inst, "connect_patch_node_proxy_with_path_with_http_info")
        all_args = dict()
        all_args["name"] = name
        all_args["path"] = path
        result = the_method(**all_args)
        codes_returning_objects = ()
        return Response(result, codes_returning_objects)

    @staticmethod
    def connectPostNodeProxyWithPath(
        name: str, path: str, client: ApiClient = None
    ) -> Response:
        r"""
        connect POST requests to proxy of Node

        operationID: connectPostNodeProxyWithPath
        path: /api/v1/nodes/{name}/proxy/{path}

        :param name: part of the URL path
        :param path: part of the URL path
        :param client: optional; instance of kubernetes.client.api_client.ApiClient

        :return: hikaru.utils.Response instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   str    OK
          401   None    Unauthorized
        """
        client_to_use = client
        inst = CoreV1Api(api_client=client_to_use)
        the_method = getattr(inst, "connect_post_node_proxy_with_path_with_http_info")
        all_args = dict()
        all_args["name"] = name
        all_args["path"] = path
        result = the_method(**all_args)
        codes_returning_objects = ()
        return Response(result, codes_returning_objects)

    @staticmethod
    def connectPutNodeProxyWithPath(
        name: str, path: str, client: ApiClient = None
    ) -> Response:
        r"""
        connect PUT requests to proxy of Node

        operationID: connectPutNodeProxyWithPath
        path: /api/v1/nodes/{name}/proxy/{path}

        :param name: part of the URL path
        :param path: part of the URL path
        :param client: optional; instance of kubernetes.client.api_client.ApiClient

        :return: hikaru.utils.Response instance with the following codes and
            obj value types:
          Code  ObjType    Description
          -----------------------------
          200   str    OK
          401   None    Unauthorized
        """
        client_to_use = client
        inst = CoreV1Api(api_client=client_to_use)
        the_method = getattr(inst, "connect_put_node_proxy_with_path_with_http_info")
        all_args = dict()
        all_args["name"] = name
        all_args["path"] = path
        result = the_method(**all_args)
        codes_returning_objects = ()
        return Response(result, codes_returning_objects)






