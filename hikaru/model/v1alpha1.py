
"""
DO NOT EDIT THIS FILE!

This module is automatically generated using the hikaru.build program that turns
a Kubernetes Swagger spec into the code for the hikaru.model module.
"""


from hikaru.meta import HikaruBase, HikaruDocumentBase
from typing import Optional, List, Dict
from dataclasses import dataclass, field
from .unversioned import *
from .v1 import *


@dataclass
class StorageVersionSpec(HikaruBase):
    """
    StorageVersionSpec is an empty spec.

    Full name: io.k8s.api.apiserverinternal.v1alpha1.StorageVersionSpec

    Attributes:
    """
    version = 'v1alpha1'


@dataclass
class StorageVersionCondition(HikaruBase):
    """
    Describes the state of the storageVersion at a certain point.

    Full name: io.k8s.api.apiserverinternal.v1alpha1.StorageVersionCondition

    Attributes:
    reason: The reason for the condition's last transition.
    status: Status of the condition, one of True, False, Unknown.
    type: Type of the condition.
    lastTransitionTime: Last time the condition transitioned from one status to another.
    message: A human readable message indicating details about the transition.
    observedGeneration: If set, this represents the .metadata.generation that the
        condition was set based upon.
    """

    version = 'v1alpha1'
    reason: str
    status: str
    type: str
    lastTransitionTime: Optional[Time] = None
    message: Optional[str] = None
    observedGeneration: Optional[int] = None


@dataclass
class ServerStorageVersion(HikaruBase):
    """
    An API server instance reports the version it can decode and the version it encodes
    objects to when persisting objects in the backend.

    Full name: io.k8s.api.apiserverinternal.v1alpha1.ServerStorageVersion

    Attributes:
    apiServerID: The ID of the reporting API server.
    encodingVersion: The API server encodes the object to this version when persisting it
        in the backend (e.g., etcd).
    decodableVersions: The API server can decode objects encoded in these versions. The
        encodingVersion must be included in the decodableVersions.
    """

    version = 'v1alpha1'
    apiServerID: Optional[str] = None
    encodingVersion: Optional[str] = None
    decodableVersions: Optional[List[str]] = field(default_factory=list)


@dataclass
class StorageVersionStatus(HikaruBase):
    """
    API server instances report the versions they can decode and the version they encode
    objects to when persisting objects in the backend.

    Full name: io.k8s.api.apiserverinternal.v1alpha1.StorageVersionStatus

    Attributes:
    commonEncodingVersion: If all API server instances agree on the same encoding storage
        version, then this field is set to that version. Otherwise this field is left
        empty. API servers should finish updating its storageVersionStatus entry before
        serving write operations, so that this field will be in sync with the reality.
    conditions: The latest available observations of the storageVersion's state.
    storageVersions: The reported versions per API server instance.
    """

    version = 'v1alpha1'
    commonEncodingVersion: Optional[str] = None
    conditions: Optional[List[StorageVersionCondition]] = field(default_factory=list)
    storageVersions: Optional[List[ServerStorageVersion]] = field(default_factory=list)


@dataclass
class StorageVersion(HikaruDocumentBase):
    """
    Storage version of a specific resource.

    Full name: io.k8s.api.apiserverinternal.v1alpha1.StorageVersion

    Attributes:
    spec: Spec is an empty spec. It is here to comply with Kubernetes API style.
    status: API server instances report the version they can decode and the version they
        encode objects to when persisting objects in the backend.
    apiVersion: APIVersion defines the versioned schema of this representation of an
        object. Servers should convert recognized schemas to the latest internal value,
        and may reject unrecognized values. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind: Kind is a string value representing the REST resource this object represents.
        Servers may infer this from the endpoint the client submits requests to. Cannot be
        updated. In CamelCase. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata: The name is <group>.<resource>.
    """

    version = 'v1alpha1'
    spec: StorageVersionSpec
    status: StorageVersionStatus
    apiVersion: Optional[str] = None
    kind: Optional[str] = None
    metadata: Optional[ObjectMeta] = None


@dataclass
class StorageVersionList(HikaruDocumentBase):
    """
    A list of StorageVersions.

    Full name: io.k8s.api.apiserverinternal.v1alpha1.StorageVersionList

    Attributes:
    items:
    apiVersion: APIVersion defines the versioned schema of this representation of an
        object. Servers should convert recognized schemas to the latest internal value,
        and may reject unrecognized values. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind: Kind is a string value representing the REST resource this object represents.
        Servers may infer this from the endpoint the client submits requests to. Cannot be
        updated. In CamelCase. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata:
    """

    version = 'v1alpha1'
    items: List[StorageVersion]
    apiVersion: Optional[str] = None
    kind: Optional[str] = None
    metadata: Optional[ListMeta] = None


@dataclass
class PriorityLevelConfigurationReference(HikaruBase):
    """
    PriorityLevelConfigurationReference contains information that points to the
    "request-priority" being used.

    Full name: io.k8s.api.flowcontrol.v1alpha1.PriorityLevelConfigurationReference

    Attributes:
    name: `name` is the name of the priority level configuration being referenced
        Required.
    """

    version = 'v1alpha1'
    name: str


@dataclass
class FlowDistinguisherMethod(HikaruBase):
    """
    FlowDistinguisherMethod specifies the method of a flow distinguisher.

    Full name: io.k8s.api.flowcontrol.v1alpha1.FlowDistinguisherMethod

    Attributes:
    type: `type` is the type of flow distinguisher method The supported types are "ByUser"
        and "ByNamespace". Required.
    """

    version = 'v1alpha1'
    type: str


@dataclass
class Subject(HikaruBase):
    """
    Subject contains a reference to the object or user identities a role binding applies
    to. This can either hold a direct API object reference, or a value for non-objects
    such as user and group names.

    Full name: io.k8s.api.flowcontrol.v1alpha1.Subject

    Attributes:
    kind: Kind of object being referenced. Values defined by this API group are "User",
        "Group", and "ServiceAccount". If the Authorizer does not recognized the kind
        value, the Authorizer should report an error.
    name: Name of the object being referenced.
    apiVersion: APIVersion holds the API group and version of the referenced subject.
        Defaults to "v1" for ServiceAccount subjects. Defaults to
        "rbac.authorization.k8s.io/v1alpha1" for User and Group subjects.
    namespace: Namespace of the referenced object. If the object kind is non-namespace,
        such as "User" or "Group", and this value is not empty the Authorizer should
        report an error.
    """

    version = 'v1alpha1'
    kind: str
    name: str
    apiVersion: Optional[str] = None
    namespace: Optional[str] = None


@dataclass
class NonResourcePolicyRule(HikaruBase):
    """
    NonResourcePolicyRule is a predicate that matches non-resource requests according to
    their verb and the target non-resource URL. A NonResourcePolicyRule matches a request
    if and only if both (a) at least one member of verbs matches the request and (b) at
    least one member of nonResourceURLs matches the request.

    Full name: io.k8s.api.flowcontrol.v1alpha1.NonResourcePolicyRule

    Attributes:
    nonResourceURLs: `nonResourceURLs` is a set of url prefixes that a user should have
        access to and may not be empty. For example: - "/healthz" is legal - "/hea*" is
        illegal - "/hea" is legal but matches nothing - "/hea/*" also matches nothing -
        "/healthz/*" matches all per-component health checks. "*" matches all non-resource
        urls. if it is present, it must be the only entry. Required.
    verbs: `verbs` is a list of matching verbs and may not be empty. "*" matches all
        verbs. If it is present, it must be the only entry. Required.
    """

    version = 'v1alpha1'
    nonResourceURLs: List[str]
    verbs: List[str]


@dataclass
class ResourcePolicyRule(HikaruBase):
    """
    ResourcePolicyRule is a predicate that matches some resource requests, testing the
    request's verb and the target resource. A ResourcePolicyRule matches a resource
    request if and only if: (a) at least one member of verbs matches the request, (b) at
    least one member of apiGroups matches the request, (c) at least one member of
    resources matches the request, and (d) least one member of namespaces matches the
    request.

    Full name: io.k8s.api.flowcontrol.v1alpha1.ResourcePolicyRule

    Attributes:
    apiGroups: `apiGroups` is a list of matching API groups and may not be empty. "*"
        matches all API groups and, if present, must be the only entry. Required.
    resources: `resources` is a list of matching resources (i.e., lowercase and plural)
        with, if desired, subresource. For example, [ "services", "nodes/status" ]. This
        list may not be empty. "*" matches all resources and, if present, must be the only
        entry. Required.
    verbs: `verbs` is a list of matching verbs and may not be empty. "*" matches all verbs
        and, if present, must be the only entry. Required.
    clusterScope: `clusterScope` indicates whether to match requests that do not specify a
        namespace (which happens either because the resource is not namespaced or the
        request targets all namespaces). If this field is omitted or false then the
        `namespaces` field must contain a non-empty list.
    namespaces: `namespaces` is a list of target namespaces that restricts matches. A
        request that specifies a target namespace matches only if either (a) this list
        contains that target namespace or (b) this list contains "*". Note that "*"
        matches any specified namespace but does not match a request that _does not
        specify_ a namespace (see the `clusterScope` field for that). This list may be
        empty, but only if `clusterScope` is true.
    """

    version = 'v1alpha1'
    apiGroups: List[str]
    resources: List[str]
    verbs: List[str]
    clusterScope: Optional[bool] = None
    namespaces: Optional[List[str]] = field(default_factory=list)


@dataclass
class PolicyRulesWithSubjects(HikaruBase):
    """
    PolicyRulesWithSubjects prescribes a test that applies to a request to an apiserver.
    The test considers the subject making the request, the verb being requested, and the
    resource to be acted upon. This PolicyRulesWithSubjects matches a request if and only
    if both (a) at least one member of subjects matches the request and (b) at least one
    member of resourceRules or nonResourceRules matches the request.

    Full name: io.k8s.api.flowcontrol.v1alpha1.PolicyRulesWithSubjects

    Attributes:
    subjects: subjects is the list of normal user, serviceaccount, or group that this rule
        cares about. There must be at least one member in this slice. A slice that
        includes both the system:authenticated and system:unauthenticated user groups
        matches every request. Required.
    nonResourceRules: `nonResourceRules` is a list of NonResourcePolicyRules that identify
        matching requests according to their verb and the target non-resource URL.
    resourceRules: `resourceRules` is a slice of ResourcePolicyRules that identify
        matching requests according to their verb and the target resource. At least one of
        `resourceRules` and `nonResourceRules` has to be non-empty.
    """

    version = 'v1alpha1'
    subjects: List[Subject]
    nonResourceRules: Optional[List[NonResourcePolicyRule]] = field(default_factory=list)
    resourceRules: Optional[List[ResourcePolicyRule]] = field(default_factory=list)


@dataclass
class FlowSchemaSpec(HikaruBase):
    """
    FlowSchemaSpec describes how the FlowSchema's specification looks like.

    Full name: io.k8s.api.flowcontrol.v1alpha1.FlowSchemaSpec

    Attributes:
    priorityLevelConfiguration: `priorityLevelConfiguration` should reference a
        PriorityLevelConfiguration in the cluster. If the reference cannot be resolved,
        the FlowSchema will be ignored and marked as invalid in its status. Required.
    distinguisherMethod: `distinguisherMethod` defines how to compute the flow
        distinguisher for requests that match this schema. `nil` specifies that the
        distinguisher is disabled and thus will always be the empty string.
    matchingPrecedence: `matchingPrecedence` is used to choose among the FlowSchemas that
        match a given request. The chosen FlowSchema is among those with the numerically
        lowest (which we take to be logically highest) MatchingPrecedence. Each
        MatchingPrecedence value must be ranged in [1,10000]. Note that if the precedence
        is not specified, it will be set to 1000 as default.
    rules: `rules` describes which requests will match this flow schema. This FlowSchema
        matches a request if and only if at least one member of rules matches the request.
        if it is an empty slice, there will be no requests matching the FlowSchema.
    """

    version = 'v1alpha1'
    priorityLevelConfiguration: PriorityLevelConfigurationReference
    distinguisherMethod: Optional[FlowDistinguisherMethod] = None
    matchingPrecedence: Optional[int] = None
    rules: Optional[List[PolicyRulesWithSubjects]] = field(default_factory=list)


@dataclass
class FlowSchemaCondition(HikaruBase):
    """
    FlowSchemaCondition describes conditions for a FlowSchema.

    Full name: io.k8s.api.flowcontrol.v1alpha1.FlowSchemaCondition

    Attributes:
    lastTransitionTime: `lastTransitionTime` is the last time the condition transitioned
        from one status to another.
    message: `message` is a human-readable message indicating details about last
        transition.
    reason: `reason` is a unique, one-word, CamelCase reason for the condition's last
        transition.
    status: `status` is the status of the condition. Can be True, False, Unknown.
        Required.
    type: `type` is the type of the condition. Required.
    """

    version = 'v1alpha1'
    lastTransitionTime: Optional[Time] = None
    message: Optional[str] = None
    reason: Optional[str] = None
    status: Optional[str] = None
    type: Optional[str] = None


@dataclass
class FlowSchemaStatus(HikaruBase):
    """
    FlowSchemaStatus represents the current state of a FlowSchema.

    Full name: io.k8s.api.flowcontrol.v1alpha1.FlowSchemaStatus

    Attributes:
    conditions: `conditions` is a list of the current states of FlowSchema.
    """

    version = 'v1alpha1'
    conditions: Optional[List[FlowSchemaCondition]] = field(default_factory=list)


@dataclass
class FlowSchema(HikaruDocumentBase):
    """
    FlowSchema defines the schema of a group of flows. Note that a flow is made up of a
    set of inbound API requests with similar attributes and is identified by a pair of
    strings: the name of the FlowSchema and a "flow distinguisher".

    Full name: io.k8s.api.flowcontrol.v1alpha1.FlowSchema

    Attributes:
    apiVersion: APIVersion defines the versioned schema of this representation of an
        object. Servers should convert recognized schemas to the latest internal value,
        and may reject unrecognized values. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind: Kind is a string value representing the REST resource this object represents.
        Servers may infer this from the endpoint the client submits requests to. Cannot be
        updated. In CamelCase. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata: `metadata` is the standard object's metadata. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    spec: `spec` is the specification of the desired behavior of a FlowSchema. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
    status: `status` is the current status of a FlowSchema. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
    """

    version = 'v1alpha1'
    apiVersion: Optional[str] = None
    kind: Optional[str] = None
    metadata: Optional[ObjectMeta] = None
    spec: Optional[FlowSchemaSpec] = None
    status: Optional[FlowSchemaStatus] = None


@dataclass
class FlowSchemaList(HikaruDocumentBase):
    """
    FlowSchemaList is a list of FlowSchema objects.

    Full name: io.k8s.api.flowcontrol.v1alpha1.FlowSchemaList

    Attributes:
    items: `items` is a list of FlowSchemas.
    apiVersion: APIVersion defines the versioned schema of this representation of an
        object. Servers should convert recognized schemas to the latest internal value,
        and may reject unrecognized values. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind: Kind is a string value representing the REST resource this object represents.
        Servers may infer this from the endpoint the client submits requests to. Cannot be
        updated. In CamelCase. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata: `metadata` is the standard list metadata. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    """

    version = 'v1alpha1'
    items: List[FlowSchema]
    apiVersion: Optional[str] = None
    kind: Optional[str] = None
    metadata: Optional[ListMeta] = None


@dataclass
class GroupSubject(HikaruBase):
    """
    GroupSubject holds detailed information for group-kind subject.

    Full name: io.k8s.api.flowcontrol.v1alpha1.GroupSubject

    Attributes:
    name: name is the user group that matches, or "*" to match all user groups. See
        https://github.com/kubernetes/apiserver/blob/master/pkg/authentication/user/user.go
        for some well-known group names. Required.
    """

    version = 'v1alpha1'
    name: str


@dataclass
class QueuingConfiguration(HikaruBase):
    """
    QueuingConfiguration holds the configuration parameters for queuing

    Full name: io.k8s.api.flowcontrol.v1alpha1.QueuingConfiguration

    Attributes:
    handSize: `handSize` is a small positive number that configures the shuffle sharding
        of requests into queues. When enqueuing a request at this priority level the
        request's flow identifier (a string pair) is hashed and the hash value is used to
        shuffle the list of queues and deal a hand of the size specified here. The request
        is put into one of the shortest queues in that hand. `handSize` must be no larger
        than `queues`, and should be significantly smaller (so that a few heavy flows do
        not saturate most of the queues). See the user-facing documentation for more
        extensive guidance on setting this field. This field has a default value of 8.
    queueLengthLimit: `queueLengthLimit` is the maximum number of requests allowed to be
        waiting in a given queue of this priority level at a time; excess requests are
        rejected. This value must be positive. If not specified, it will be defaulted to
        50.
    queues: `queues` is the number of queues for this priority level. The queues exist
        independently at each apiserver. The value must be positive. Setting it to 1
        effectively precludes shufflesharding and thus makes the distinguisher method of
        associated flow schemas irrelevant. This field has a default value of 64.
    """

    version = 'v1alpha1'
    handSize: Optional[int] = None
    queueLengthLimit: Optional[int] = None
    queues: Optional[int] = None


@dataclass
class LimitResponse(HikaruBase):
    """
    LimitResponse defines how to handle requests that can not be executed right now.

    Full name: io.k8s.api.flowcontrol.v1alpha1.LimitResponse

    Attributes:
    type: `type` is "Queue" or "Reject". "Queue" means that requests that can not be
        executed upon arrival are held in a queue until they can be executed or a queuing
        limit is reached. "Reject" means that requests that can not be executed upon
        arrival are rejected. Required.
    queuing: `queuing` holds the configuration parameters for queuing. This field may be
        non-empty only if `type` is `"Queue"`.
    """

    version = 'v1alpha1'
    type: str
    queuing: Optional[QueuingConfiguration] = None


@dataclass
class LimitedPriorityLevelConfiguration(HikaruBase):
    """
    LimitedPriorityLevelConfiguration specifies how to handle requests that are subject to
    limits. It addresses two issues: * How are requests for this priority level limited? *
    What should be done with requests that exceed the limit?

    Full name: io.k8s.api.flowcontrol.v1alpha1.LimitedPriorityLevelConfiguration

    Attributes:
    assuredConcurrencyShares: `assuredConcurrencyShares` (ACS) configures the execution
        limit, which is a limit on the number of requests of this priority level that may
        be exeucting at a given time. ACS must be a positive number. The server's
        concurrency limit (SCL) is divided among the concurrency-controlled priority
        levels in proportion to their assured concurrency shares. This produces the
        assured concurrency value (ACV) --- the number of requests that may be executing
        at a time --- for each such priority level: ACV(l) = ceil( SCL * ACS(l) / (
        sum[priority levels k] ACS(k) ) ) bigger numbers of ACS mean more reserved
        concurrent requests (at the expense of every other PL). This field has a default
        value of 30.
    limitResponse: `limitResponse` indicates what to do with requests that can not be
        executed right now
    """

    version = 'v1alpha1'
    assuredConcurrencyShares: Optional[int] = None
    limitResponse: Optional[LimitResponse] = None


@dataclass
class PriorityLevelConfigurationSpec(HikaruBase):
    """
    PriorityLevelConfigurationSpec specifies the configuration of a priority level.

    Full name: io.k8s.api.flowcontrol.v1alpha1.PriorityLevelConfigurationSpec

    Attributes:
    type: `type` indicates whether this priority level is subject to limitation on request
        execution. A value of `"Exempt"` means that requests of this priority level are
        not subject to a limit (and thus are never queued) and do not detract from the
        capacity made available to other priority levels. A value of `"Limited"` means
        that (a) requests of this priority level _are_ subject to limits and (b) some of
        the server's limited capacity is made available exclusively to this priority
        level. Required.
    limited: `limited` specifies how requests are handled for a Limited priority level.
        This field must be non-empty if and only if `type` is `"Limited"`.
    """

    version = 'v1alpha1'
    type: str
    limited: Optional[LimitedPriorityLevelConfiguration] = None


@dataclass
class PriorityLevelConfigurationCondition(HikaruBase):
    """
    PriorityLevelConfigurationCondition defines the condition of priority level.

    Full name: io.k8s.api.flowcontrol.v1alpha1.PriorityLevelConfigurationCondition

    Attributes:
    lastTransitionTime: `lastTransitionTime` is the last time the condition transitioned
        from one status to another.
    message: `message` is a human-readable message indicating details about last
        transition.
    reason: `reason` is a unique, one-word, CamelCase reason for the condition's last
        transition.
    status: `status` is the status of the condition. Can be True, False, Unknown.
        Required.
    type: `type` is the type of the condition. Required.
    """

    version = 'v1alpha1'
    lastTransitionTime: Optional[Time] = None
    message: Optional[str] = None
    reason: Optional[str] = None
    status: Optional[str] = None
    type: Optional[str] = None


@dataclass
class PriorityLevelConfigurationStatus(HikaruBase):
    """
    PriorityLevelConfigurationStatus represents the current state of a "request-priority".

    Full name: io.k8s.api.flowcontrol.v1alpha1.PriorityLevelConfigurationStatus

    Attributes:
    conditions: `conditions` is the current state of "request-priority".
    """

    version = 'v1alpha1'
    conditions: Optional[List[PriorityLevelConfigurationCondition]] = field(default_factory=list)


@dataclass
class PriorityLevelConfiguration(HikaruDocumentBase):
    """
    PriorityLevelConfiguration represents the configuration of a priority level.

    Full name: io.k8s.api.flowcontrol.v1alpha1.PriorityLevelConfiguration

    Attributes:
    apiVersion: APIVersion defines the versioned schema of this representation of an
        object. Servers should convert recognized schemas to the latest internal value,
        and may reject unrecognized values. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind: Kind is a string value representing the REST resource this object represents.
        Servers may infer this from the endpoint the client submits requests to. Cannot be
        updated. In CamelCase. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata: `metadata` is the standard object's metadata. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    spec: `spec` is the specification of the desired behavior of a "request-priority".
        More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
    status: `status` is the current status of a "request-priority". More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
    """

    version = 'v1alpha1'
    apiVersion: Optional[str] = None
    kind: Optional[str] = None
    metadata: Optional[ObjectMeta] = None
    spec: Optional[PriorityLevelConfigurationSpec] = None
    status: Optional[PriorityLevelConfigurationStatus] = None


@dataclass
class PriorityLevelConfigurationList(HikaruDocumentBase):
    """
    PriorityLevelConfigurationList is a list of PriorityLevelConfiguration objects.

    Full name: io.k8s.api.flowcontrol.v1alpha1.PriorityLevelConfigurationList

    Attributes:
    items: `items` is a list of request-priorities.
    apiVersion: APIVersion defines the versioned schema of this representation of an
        object. Servers should convert recognized schemas to the latest internal value,
        and may reject unrecognized values. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind: Kind is a string value representing the REST resource this object represents.
        Servers may infer this from the endpoint the client submits requests to. Cannot be
        updated. In CamelCase. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata: `metadata` is the standard object's metadata. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    """

    version = 'v1alpha1'
    items: List[PriorityLevelConfiguration]
    apiVersion: Optional[str] = None
    kind: Optional[str] = None
    metadata: Optional[ListMeta] = None


@dataclass
class ServiceAccountSubject(HikaruBase):
    """
    ServiceAccountSubject holds detailed information for service-account-kind subject.

    Full name: io.k8s.api.flowcontrol.v1alpha1.ServiceAccountSubject

    Attributes:
    name: `name` is the name of matching ServiceAccount objects, or "*" to match
        regardless of name. Required.
    namespace: `namespace` is the namespace of matching ServiceAccount objects. Required.
    """

    version = 'v1alpha1'
    name: str
    namespace: str


@dataclass
class UserSubject(HikaruBase):
    """
    UserSubject holds detailed information for user-kind subject.

    Full name: io.k8s.api.flowcontrol.v1alpha1.UserSubject

    Attributes:
    name: `name` is the username that matches, or "*" to match all usernames. Required.
    """

    version = 'v1alpha1'
    name: str


@dataclass
class Overhead(HikaruBase):
    """
    Overhead structure represents the resource overhead associated with running a pod.

    Full name: io.k8s.api.node.v1alpha1.Overhead

    Attributes:
    podFixed: PodFixed represents the fixed resource overhead associated with running a
        pod.
    """

    version = 'v1alpha1'
    podFixed: Optional[Dict[str, str]] = field(default_factory=dict)


@dataclass
class Scheduling(HikaruBase):
    """
    Scheduling specifies the scheduling constraints for nodes supporting a RuntimeClass.

    Full name: io.k8s.api.node.v1alpha1.Scheduling

    Attributes:
    nodeSelector: nodeSelector lists labels that must be present on nodes that support
        this RuntimeClass. Pods using this RuntimeClass can only be scheduled to a node
        matched by this selector. The RuntimeClass nodeSelector is merged with a pod's
        existing nodeSelector. Any conflicts will cause the pod to be rejected in
        admission.
    tolerations: tolerations are appended (excluding duplicates) to pods running with this
        RuntimeClass during admission, effectively unioning the set of nodes tolerated by
        the pod and the RuntimeClass.
    """

    version = 'v1alpha1'
    nodeSelector: Optional[Dict[str, str]] = field(default_factory=dict)
    tolerations: Optional[List[Toleration]] = field(default_factory=list)


@dataclass
class RuntimeClassSpec(HikaruBase):
    """
    RuntimeClassSpec is a specification of a RuntimeClass. It contains parameters that are
    required to describe the RuntimeClass to the Container Runtime Interface (CRI)
    implementation, as well as any other components that need to understand how the pod
    will be run. The RuntimeClassSpec is immutable.

    Full name: io.k8s.api.node.v1alpha1.RuntimeClassSpec

    Attributes:
    runtimeHandler: RuntimeHandler specifies the underlying runtime and configuration that
        the CRI implementation will use to handle pods of this class. The possible values
        are specific to the node & CRI configuration. It is assumed that all handlers are
        available on every node, and handlers of the same name are equivalent on every
        node. For example, a handler called "runc" might specify that the runc OCI runtime
        (using native Linux containers) will be used to run the containers in a pod. The
        RuntimeHandler must be lowercase, conform to the DNS Label (RFC 1123)
        requirements, and is immutable.
    overhead: Overhead represents the resource overhead associated with running a pod for
        a given RuntimeClass. For more details, see
        https://git.k8s.io/enhancements/keps/sig-node/20190226-pod-overhead.md This field
        is alpha-level as of Kubernetes v1.15, and is only honored by servers that enable
        the PodOverhead feature.
    scheduling: Scheduling holds the scheduling constraints to ensure that pods running
        with this RuntimeClass are scheduled to nodes that support it. If scheduling is
        nil, this RuntimeClass is assumed to be supported by all nodes.
    """

    version = 'v1alpha1'
    runtimeHandler: str
    overhead: Optional[Overhead] = None
    scheduling: Optional[Scheduling] = None


@dataclass
class RuntimeClass(HikaruDocumentBase):
    """
    RuntimeClass defines a class of container runtime supported in the cluster. The
    RuntimeClass is used to determine which container runtime is used to run all
    containers in a pod. RuntimeClasses are (currently) manually defined by a user or
    cluster provisioner, and referenced in the PodSpec. The Kubelet is responsible for
    resolving the RuntimeClassName reference before running the pod. For more details, see
    https://git.k8s.io/enhancements/keps/sig-node/runtime-class.md

    Full name: io.k8s.api.node.v1alpha1.RuntimeClass

    Attributes:
    spec: Specification of the RuntimeClass More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
    apiVersion: APIVersion defines the versioned schema of this representation of an
        object. Servers should convert recognized schemas to the latest internal value,
        and may reject unrecognized values. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind: Kind is a string value representing the REST resource this object represents.
        Servers may infer this from the endpoint the client submits requests to. Cannot be
        updated. In CamelCase. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata: More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    """

    version = 'v1alpha1'
    spec: RuntimeClassSpec
    apiVersion: Optional[str] = None
    kind: Optional[str] = None
    metadata: Optional[ObjectMeta] = None


@dataclass
class RuntimeClassList(HikaruDocumentBase):
    """
    RuntimeClassList is a list of RuntimeClass objects.

    Full name: io.k8s.api.node.v1alpha1.RuntimeClassList

    Attributes:
    items: Items is a list of schema objects.
    apiVersion: APIVersion defines the versioned schema of this representation of an
        object. Servers should convert recognized schemas to the latest internal value,
        and may reject unrecognized values. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind: Kind is a string value representing the REST resource this object represents.
        Servers may infer this from the endpoint the client submits requests to. Cannot be
        updated. In CamelCase. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata: Standard list metadata. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    """

    version = 'v1alpha1'
    items: List[RuntimeClass]
    apiVersion: Optional[str] = None
    kind: Optional[str] = None
    metadata: Optional[ListMeta] = None


@dataclass
class RoleRef(HikaruBase):
    """
    RoleRef contains information that points to the role being used

    Full name: io.k8s.api.rbac.v1alpha1.RoleRef

    Attributes:
    apiGroup: APIGroup is the group for the resource being referenced
    kind: Kind is the type of resource being referenced
    name: Name is the name of resource being referenced
    """

    version = 'v1alpha1'
    apiGroup: str
    kind: str
    name: str


@dataclass
class ClusterRoleBinding(HikaruDocumentBase):
    """
    ClusterRoleBinding references a ClusterRole, but not contain it. It can reference a
    ClusterRole in the global namespace, and adds who information via Subject. Deprecated
    in v1.17 in favor of rbac.authorization.k8s.io/v1 ClusterRoleBinding, and will no
    longer be served in v1.22.

    Full name: io.k8s.api.rbac.v1alpha1.ClusterRoleBinding

    Attributes:
    roleRef: RoleRef can only reference a ClusterRole in the global namespace. If the
        RoleRef cannot be resolved, the Authorizer must return an error.
    apiVersion: APIVersion defines the versioned schema of this representation of an
        object. Servers should convert recognized schemas to the latest internal value,
        and may reject unrecognized values. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind: Kind is a string value representing the REST resource this object represents.
        Servers may infer this from the endpoint the client submits requests to. Cannot be
        updated. In CamelCase. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata: Standard object's metadata.
    subjects: Subjects holds references to the objects the role applies to.
    """

    version = 'v1alpha1'
    roleRef: RoleRef
    apiVersion: Optional[str] = None
    kind: Optional[str] = None
    metadata: Optional[ObjectMeta] = None
    subjects: Optional[List[Subject]] = field(default_factory=list)


@dataclass
class ClusterRoleBindingList(HikaruDocumentBase):
    """
    ClusterRoleBindingList is a collection of ClusterRoleBindings. Deprecated in v1.17 in
    favor of rbac.authorization.k8s.io/v1 ClusterRoleBindings, and will no longer be
    served in v1.22.

    Full name: io.k8s.api.rbac.v1alpha1.ClusterRoleBindingList

    Attributes:
    items: Items is a list of ClusterRoleBindings
    apiVersion: APIVersion defines the versioned schema of this representation of an
        object. Servers should convert recognized schemas to the latest internal value,
        and may reject unrecognized values. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind: Kind is a string value representing the REST resource this object represents.
        Servers may infer this from the endpoint the client submits requests to. Cannot be
        updated. In CamelCase. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata: Standard object's metadata.
    """

    version = 'v1alpha1'
    items: List[ClusterRoleBinding]
    apiVersion: Optional[str] = None
    kind: Optional[str] = None
    metadata: Optional[ListMeta] = None


@dataclass
class AggregationRule(HikaruBase):
    """
    AggregationRule describes how to locate ClusterRoles to aggregate into the ClusterRole

    Full name: io.k8s.api.rbac.v1alpha1.AggregationRule

    Attributes:
    clusterRoleSelectors: ClusterRoleSelectors holds a list of selectors which will be
        used to find ClusterRoles and create the rules. If any of the selectors match,
        then the ClusterRole's permissions will be added
    """

    version = 'v1alpha1'
    clusterRoleSelectors: Optional[List[LabelSelector]] = field(default_factory=list)


@dataclass
class PolicyRule(HikaruBase):
    """
    PolicyRule holds information that describes a policy rule, but does not contain
    information about who the rule applies to or which namespace the rule applies to.

    Full name: io.k8s.api.rbac.v1alpha1.PolicyRule

    Attributes:
    verbs: Verbs is a list of Verbs that apply to ALL the ResourceKinds and
        AttributeRestrictions contained in this rule. VerbAll represents all kinds.
    apiGroups: APIGroups is the name of the APIGroup that contains the resources. If
        multiple API groups are specified, any action requested against one of the
        enumerated resources in any API group will be allowed.
    nonResourceURLs: NonResourceURLs is a set of partial urls that a user should have
        access to. *s are allowed, but only as the full, final step in the path Since
        non-resource URLs are not namespaced, this field is only applicable for
        ClusterRoles referenced from a ClusterRoleBinding. Rules can either apply to API
        resources (such as "pods" or "secrets") or non-resource URL paths (such as
        "/api"), but not both.
    resourceNames: ResourceNames is an optional white list of names that the rule applies
        to. An empty set means that everything is allowed.
    resources: Resources is a list of resources this rule applies to. ResourceAll
        represents all resources.
    """

    version = 'v1alpha1'
    verbs: List[str]
    apiGroups: Optional[List[str]] = field(default_factory=list)
    nonResourceURLs: Optional[List[str]] = field(default_factory=list)
    resourceNames: Optional[List[str]] = field(default_factory=list)
    resources: Optional[List[str]] = field(default_factory=list)


@dataclass
class ClusterRole(HikaruDocumentBase):
    """
    ClusterRole is a cluster level, logical grouping of PolicyRules that can be referenced
    as a unit by a RoleBinding or ClusterRoleBinding. Deprecated in v1.17 in favor of
    rbac.authorization.k8s.io/v1 ClusterRole, and will no longer be served in v1.22.

    Full name: io.k8s.api.rbac.v1alpha1.ClusterRole

    Attributes:
    aggregationRule: AggregationRule is an optional field that describes how to build the
        Rules for this ClusterRole. If AggregationRule is set, then the Rules are
        controller managed and direct changes to Rules will be stomped by the controller.
    apiVersion: APIVersion defines the versioned schema of this representation of an
        object. Servers should convert recognized schemas to the latest internal value,
        and may reject unrecognized values. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind: Kind is a string value representing the REST resource this object represents.
        Servers may infer this from the endpoint the client submits requests to. Cannot be
        updated. In CamelCase. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata: Standard object's metadata.
    rules: Rules holds all the PolicyRules for this ClusterRole
    """

    version = 'v1alpha1'
    aggregationRule: Optional[AggregationRule] = None
    apiVersion: Optional[str] = None
    kind: Optional[str] = None
    metadata: Optional[ObjectMeta] = None
    rules: Optional[List[PolicyRule]] = field(default_factory=list)


@dataclass
class ClusterRoleList(HikaruDocumentBase):
    """
    ClusterRoleList is a collection of ClusterRoles. Deprecated in v1.17 in favor of
    rbac.authorization.k8s.io/v1 ClusterRoles, and will no longer be served in v1.22.

    Full name: io.k8s.api.rbac.v1alpha1.ClusterRoleList

    Attributes:
    items: Items is a list of ClusterRoles
    apiVersion: APIVersion defines the versioned schema of this representation of an
        object. Servers should convert recognized schemas to the latest internal value,
        and may reject unrecognized values. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind: Kind is a string value representing the REST resource this object represents.
        Servers may infer this from the endpoint the client submits requests to. Cannot be
        updated. In CamelCase. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata: Standard object's metadata.
    """

    version = 'v1alpha1'
    items: List[ClusterRole]
    apiVersion: Optional[str] = None
    kind: Optional[str] = None
    metadata: Optional[ListMeta] = None


@dataclass
class RoleBinding(HikaruDocumentBase):
    """
    RoleBinding references a role, but does not contain it. It can reference a Role in the
    same namespace or a ClusterRole in the global namespace. It adds who information via
    Subjects and namespace information by which namespace it exists in. RoleBindings in a
    given namespace only have effect in that namespace. Deprecated in v1.17 in favor of
    rbac.authorization.k8s.io/v1 RoleBinding, and will no longer be served in v1.22.

    Full name: io.k8s.api.rbac.v1alpha1.RoleBinding

    Attributes:
    roleRef: RoleRef can reference a Role in the current namespace or a ClusterRole in the
        global namespace. If the RoleRef cannot be resolved, the Authorizer must return an
        error.
    apiVersion: APIVersion defines the versioned schema of this representation of an
        object. Servers should convert recognized schemas to the latest internal value,
        and may reject unrecognized values. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind: Kind is a string value representing the REST resource this object represents.
        Servers may infer this from the endpoint the client submits requests to. Cannot be
        updated. In CamelCase. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata: Standard object's metadata.
    subjects: Subjects holds references to the objects the role applies to.
    """

    version = 'v1alpha1'
    roleRef: RoleRef
    apiVersion: Optional[str] = None
    kind: Optional[str] = None
    metadata: Optional[ObjectMeta] = None
    subjects: Optional[List[Subject]] = field(default_factory=list)


@dataclass
class RoleBindingList(HikaruDocumentBase):
    """
    RoleBindingList is a collection of RoleBindings Deprecated in v1.17 in favor of
    rbac.authorization.k8s.io/v1 RoleBindingList, and will no longer be served in v1.22.

    Full name: io.k8s.api.rbac.v1alpha1.RoleBindingList

    Attributes:
    items: Items is a list of RoleBindings
    apiVersion: APIVersion defines the versioned schema of this representation of an
        object. Servers should convert recognized schemas to the latest internal value,
        and may reject unrecognized values. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind: Kind is a string value representing the REST resource this object represents.
        Servers may infer this from the endpoint the client submits requests to. Cannot be
        updated. In CamelCase. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata: Standard object's metadata.
    """

    version = 'v1alpha1'
    items: List[RoleBinding]
    apiVersion: Optional[str] = None
    kind: Optional[str] = None
    metadata: Optional[ListMeta] = None


@dataclass
class Role(HikaruDocumentBase):
    """
    Role is a namespaced, logical grouping of PolicyRules that can be referenced as a unit
    by a RoleBinding. Deprecated in v1.17 in favor of rbac.authorization.k8s.io/v1 Role,
    and will no longer be served in v1.22.

    Full name: io.k8s.api.rbac.v1alpha1.Role

    Attributes:
    apiVersion: APIVersion defines the versioned schema of this representation of an
        object. Servers should convert recognized schemas to the latest internal value,
        and may reject unrecognized values. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind: Kind is a string value representing the REST resource this object represents.
        Servers may infer this from the endpoint the client submits requests to. Cannot be
        updated. In CamelCase. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata: Standard object's metadata.
    rules: Rules holds all the PolicyRules for this Role
    """

    version = 'v1alpha1'
    apiVersion: Optional[str] = None
    kind: Optional[str] = None
    metadata: Optional[ObjectMeta] = None
    rules: Optional[List[PolicyRule]] = field(default_factory=list)


@dataclass
class RoleList(HikaruDocumentBase):
    """
    RoleList is a collection of Roles. Deprecated in v1.17 in favor of
    rbac.authorization.k8s.io/v1 RoleList, and will no longer be served in v1.22.

    Full name: io.k8s.api.rbac.v1alpha1.RoleList

    Attributes:
    items: Items is a list of Roles
    apiVersion: APIVersion defines the versioned schema of this representation of an
        object. Servers should convert recognized schemas to the latest internal value,
        and may reject unrecognized values. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind: Kind is a string value representing the REST resource this object represents.
        Servers may infer this from the endpoint the client submits requests to. Cannot be
        updated. In CamelCase. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata: Standard object's metadata.
    """

    version = 'v1alpha1'
    items: List[Role]
    apiVersion: Optional[str] = None
    kind: Optional[str] = None
    metadata: Optional[ListMeta] = None


@dataclass
class PriorityClass(HikaruDocumentBase):
    """
    DEPRECATED - This group version of PriorityClass is deprecated by
    scheduling.k8s.io/v1/PriorityClass. PriorityClass defines mapping from a priority
    class name to the priority integer value. The value can be any valid integer.

    Full name: io.k8s.api.scheduling.v1alpha1.PriorityClass

    Attributes:
    value: The value of this priority class. This is the actual priority that pods receive
        when they have the name of this class in their pod spec.
    apiVersion: APIVersion defines the versioned schema of this representation of an
        object. Servers should convert recognized schemas to the latest internal value,
        and may reject unrecognized values. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    description: description is an arbitrary string that usually provides guidelines on
        when this priority class should be used.
    globalDefault: globalDefault specifies whether this PriorityClass should be considered
        as the default priority for pods that do not have any priority class. Only one
        PriorityClass can be marked as `globalDefault`. However, if more than one
        PriorityClasses exists with their `globalDefault` field set to true, the smallest
        value of such global default PriorityClasses will be used as the default priority.
    kind: Kind is a string value representing the REST resource this object represents.
        Servers may infer this from the endpoint the client submits requests to. Cannot be
        updated. In CamelCase. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata: Standard object's metadata. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    preemptionPolicy: PreemptionPolicy is the Policy for preempting pods with lower
        priority. One of Never, PreemptLowerPriority. Defaults to PreemptLowerPriority if
        unset. This field is beta-level, gated by the NonPreemptingPriority feature-gate.
    """

    version = 'v1alpha1'
    value: int
    apiVersion: Optional[str] = None
    description: Optional[str] = None
    globalDefault: Optional[bool] = None
    kind: Optional[str] = None
    metadata: Optional[ObjectMeta] = None
    preemptionPolicy: Optional[str] = None


@dataclass
class PriorityClassList(HikaruDocumentBase):
    """
    PriorityClassList is a collection of priority classes.

    Full name: io.k8s.api.scheduling.v1alpha1.PriorityClassList

    Attributes:
    items: items is the list of PriorityClasses
    apiVersion: APIVersion defines the versioned schema of this representation of an
        object. Servers should convert recognized schemas to the latest internal value,
        and may reject unrecognized values. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind: Kind is a string value representing the REST resource this object represents.
        Servers may infer this from the endpoint the client submits requests to. Cannot be
        updated. In CamelCase. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata: Standard list metadata More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    """

    version = 'v1alpha1'
    items: List[PriorityClass]
    apiVersion: Optional[str] = None
    kind: Optional[str] = None
    metadata: Optional[ListMeta] = None


@dataclass
class CSIStorageCapacity(HikaruDocumentBase):
    """
    CSIStorageCapacity stores the result of one CSI GetCapacity call. For a given
    StorageClass, this describes the available capacity in a particular topology segment.
    This can be used when considering where to instantiate new PersistentVolumes. For
    example this can express things like: - StorageClass "standard" has "1234 GiB"
    available in "topology.kubernetes.io/zone=us-east1" - StorageClass "localssd" has "10
    GiB" available in "kubernetes.io/hostname=knode-abc123" The following three cases all
    imply that no capacity is available for a certain combination: - no object exists with
    suitable topology and storage class name - such an object exists, but the capacity is
    unset - such an object exists, but the capacity is zero The producer of these objects
    can decide which approach is more suitable. This is an alpha feature and only
    available when the CSIStorageCapacity feature is enabled.

    Full name: io.k8s.api.storage.v1alpha1.CSIStorageCapacity

    Attributes:
    storageClassName: The name of the StorageClass that the reported capacity applies to.
        It must meet the same requirements as the name of a StorageClass object
        (non-empty, DNS subdomain). If that object no longer exists, the
        CSIStorageCapacity object is obsolete and should be removed by its creator. This
        field is immutable.
    apiVersion: APIVersion defines the versioned schema of this representation of an
        object. Servers should convert recognized schemas to the latest internal value,
        and may reject unrecognized values. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    capacity: Capacity is the value reported by the CSI driver in its GetCapacityResponse
        for a GetCapacityRequest with topology and parameters that match the previous
        fields. The semantic is currently (CSI spec 1.2) defined as: The available
        capacity, in bytes, of the storage that can be used to provision volumes. If not
        set, that information is currently unavailable and treated like zero capacity.
    kind: Kind is a string value representing the REST resource this object represents.
        Servers may infer this from the endpoint the client submits requests to. Cannot be
        updated. In CamelCase. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata: Standard object's metadata. The name has no particular meaning. It must be
        be a DNS subdomain (dots allowed, 253 characters). To ensure that there are no
        conflicts with other CSI drivers on the cluster, the recommendation is to use
        csisc-<uuid>, a generated name, or a reverse-domain name which ends with the
        unique CSI driver name. Objects are namespaced. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    nodeTopology: NodeTopology defines which nodes have access to the storage for which
        capacity was reported. If not set, the storage is not accessible from any node in
        the cluster. If empty, the storage is accessible from all nodes. This field is
        immutable.
    """

    version = 'v1alpha1'
    storageClassName: str
    apiVersion: Optional[str] = None
    capacity: Optional[Quantity] = None
    kind: Optional[str] = None
    metadata: Optional[ObjectMeta] = None
    nodeTopology: Optional[LabelSelector] = None


@dataclass
class CSIStorageCapacityList(HikaruDocumentBase):
    """
    CSIStorageCapacityList is a collection of CSIStorageCapacity objects.

    Full name: io.k8s.api.storage.v1alpha1.CSIStorageCapacityList

    Attributes:
    items: Items is the list of CSIStorageCapacity objects.
    apiVersion: APIVersion defines the versioned schema of this representation of an
        object. Servers should convert recognized schemas to the latest internal value,
        and may reject unrecognized values. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind: Kind is a string value representing the REST resource this object represents.
        Servers may infer this from the endpoint the client submits requests to. Cannot be
        updated. In CamelCase. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata: Standard list metadata More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    """

    version = 'v1alpha1'
    items: List[CSIStorageCapacity]
    apiVersion: Optional[str] = None
    kind: Optional[str] = None
    metadata: Optional[ListMeta] = None


@dataclass
class VolumeAttachmentSource(HikaruBase):
    """
    VolumeAttachmentSource represents a volume that should be attached. Right now only
    PersistenVolumes can be attached via external attacher, in future we may allow also
    inline volumes in pods. Exactly one member can be set.

    Full name: io.k8s.api.storage.v1alpha1.VolumeAttachmentSource

    Attributes:
    inlineVolumeSpec: inlineVolumeSpec contains all the information necessary to attach a
        persistent volume defined by a pod's inline VolumeSource. This field is populated
        only for the CSIMigration feature. It contains translated fields from a pod's
        inline VolumeSource to a PersistentVolumeSpec. This field is alpha-level and is
        only honored by servers that enabled the CSIMigration feature.
    persistentVolumeName: Name of the persistent volume to attach.
    """

    version = 'v1alpha1'
    inlineVolumeSpec: Optional[PersistentVolumeSpec] = None
    persistentVolumeName: Optional[str] = None


@dataclass
class VolumeAttachmentSpec(HikaruBase):
    """
    VolumeAttachmentSpec is the specification of a VolumeAttachment request.

    Full name: io.k8s.api.storage.v1alpha1.VolumeAttachmentSpec

    Attributes:
    attacher: Attacher indicates the name of the volume driver that MUST handle this
        request. This is the name returned by GetPluginName().
    nodeName: The node that the volume should be attached to.
    source: Source represents the volume that should be attached.
    """

    version = 'v1alpha1'
    attacher: str
    nodeName: str
    source: VolumeAttachmentSource


@dataclass
class VolumeError(HikaruBase):
    """
    VolumeError captures an error encountered during a volume operation.

    Full name: io.k8s.api.storage.v1alpha1.VolumeError

    Attributes:
    message: String detailing the error encountered during Attach or Detach operation.
        This string maybe logged, so it should not contain sensitive information.
    time: Time the error was encountered.
    """

    version = 'v1alpha1'
    message: Optional[str] = None
    time: Optional[Time] = None


@dataclass
class VolumeAttachmentStatus(HikaruBase):
    """
    VolumeAttachmentStatus is the status of a VolumeAttachment request.

    Full name: io.k8s.api.storage.v1alpha1.VolumeAttachmentStatus

    Attributes:
    attached: Indicates the volume is successfully attached. This field must only be set
        by the entity completing the attach operation, i.e. the external-attacher.
    attachError: The last error encountered during attach operation, if any. This field
        must only be set by the entity completing the attach operation, i.e. the
        external-attacher.
    detachError: The last error encountered during detach operation, if any. This field
        must only be set by the entity completing the detach operation, i.e. the
        external-attacher.
    attachmentMetadata: Upon successful attach, this field is populated with any
        information returned by the attach operation that must be passed into subsequent
        WaitForAttach or Mount calls. This field must only be set by the entity completing
        the attach operation, i.e. the external-attacher.
    """

    version = 'v1alpha1'
    attached: bool
    attachError: Optional[VolumeError] = None
    detachError: Optional[VolumeError] = None
    attachmentMetadata: Optional[Dict[str, str]] = field(default_factory=dict)


@dataclass
class VolumeAttachment(HikaruDocumentBase):
    """
    VolumeAttachment captures the intent to attach or detach the specified volume to/from
    the specified node. VolumeAttachment objects are non-namespaced.

    Full name: io.k8s.api.storage.v1alpha1.VolumeAttachment

    Attributes:
    spec: Specification of the desired attach/detach volume behavior. Populated by the
        Kubernetes system.
    apiVersion: APIVersion defines the versioned schema of this representation of an
        object. Servers should convert recognized schemas to the latest internal value,
        and may reject unrecognized values. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind: Kind is a string value representing the REST resource this object represents.
        Servers may infer this from the endpoint the client submits requests to. Cannot be
        updated. In CamelCase. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata: Standard object metadata. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    status: Status of the VolumeAttachment request. Populated by the entity completing the
        attach or detach operation, i.e. the external-attacher.
    """

    version = 'v1alpha1'
    spec: VolumeAttachmentSpec
    apiVersion: Optional[str] = None
    kind: Optional[str] = None
    metadata: Optional[ObjectMeta] = None
    status: Optional[VolumeAttachmentStatus] = None


@dataclass
class VolumeAttachmentList(HikaruDocumentBase):
    """
    VolumeAttachmentList is a collection of VolumeAttachment objects.

    Full name: io.k8s.api.storage.v1alpha1.VolumeAttachmentList

    Attributes:
    items: Items is the list of VolumeAttachments
    apiVersion: APIVersion defines the versioned schema of this representation of an
        object. Servers should convert recognized schemas to the latest internal value,
        and may reject unrecognized values. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind: Kind is a string value representing the REST resource this object represents.
        Servers may infer this from the endpoint the client submits requests to. Cannot be
        updated. In CamelCase. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata: Standard list metadata More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    """

    version = 'v1alpha1'
    items: List[VolumeAttachment]
    apiVersion: Optional[str] = None
    kind: Optional[str] = None
    metadata: Optional[ListMeta] = None


globs = dict(globals())
__all__ = [c.__name__ for c in globs.values()
           if type(c) == type]
del globs
