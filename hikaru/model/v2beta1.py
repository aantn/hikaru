
"""
DO NOT EDIT THIS FILE!

This module is automatically generated using the hikaru.build program that turns
a Kubernetes Swagger spec into the code for the hikaru.model module.
"""


from hikaru.meta import HikaruBase, HikaruDocumentBase
from typing import Optional, List, Dict
from dataclasses import dataclass, field
from .unversioned import *
from .v1 import *


@dataclass
class ContainerResourceMetricSource(HikaruBase):
    """
    ContainerResourceMetricSource indicates how to scale on a resource metric known to
    Kubernetes, as specified in requests and limits, describing each pod in the current
    scale target (e.g. CPU or memory). The values will be averaged together before being
    compared to the target. Such metrics are built in to Kubernetes, and have special
    scaling options on top of those available to normal per-pod metrics using the "pods"
    source. Only one "target" type should be set.

    Full name: io.k8s.api.autoscaling.v2beta1.ContainerResourceMetricSource

    Attributes:
    container: container is the name of the container in the pods of the scaling target
    name: name is the name of the resource in question.
    targetAverageUtilization: targetAverageUtilization is the target value of the average
        of the resource metric across all relevant pods, represented as a percentage of
        the requested value of the resource for the pods.
    targetAverageValue: targetAverageValue is the target value of the average of the
        resource metric across all relevant pods, as a raw value (instead of as a
        percentage of the request), similar to the "pods" metric source type.
    """

    version = 'v2beta1'
    container: str
    name: str
    targetAverageUtilization: Optional[int] = None
    targetAverageValue: Optional[Quantity] = None


@dataclass
class ExternalMetricSource(HikaruBase):
    """
    ExternalMetricSource indicates how to scale on a metric not associated with any
    Kubernetes object (for example length of queue in cloud messaging service, or QPS from
    loadbalancer running outside of cluster). Exactly one "target" type should be set.

    Full name: io.k8s.api.autoscaling.v2beta1.ExternalMetricSource

    Attributes:
    metricName: metricName is the name of the metric in question.
    metricSelector: metricSelector is used to identify a specific time series within a
        given metric.
    targetAverageValue: targetAverageValue is the target per-pod value of global metric
        (as a quantity). Mutually exclusive with TargetValue.
    targetValue: targetValue is the target value of the metric (as a quantity). Mutually
        exclusive with TargetAverageValue.
    """

    version = 'v2beta1'
    metricName: str
    metricSelector: Optional[LabelSelector] = None
    targetAverageValue: Optional[Quantity] = None
    targetValue: Optional[Quantity] = None


@dataclass
class CrossVersionObjectReference(HikaruBase):
    """
    CrossVersionObjectReference contains enough information to let you identify the
    referred resource.

    Full name: io.k8s.api.autoscaling.v2beta1.CrossVersionObjectReference

    Attributes:
    kind: Kind of the referent; More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
    name: Name of the referent; More info:
        http://kubernetes.io/docs/user-guide/identifiers#names
    apiVersion: API version of the referent
    """

    version = 'v2beta1'
    kind: str
    name: str
    apiVersion: Optional[str] = None


@dataclass
class ObjectMetricSource(HikaruBase):
    """
    ObjectMetricSource indicates how to scale on a metric describing a kubernetes object
    (for example, hits-per-second on an Ingress object).

    Full name: io.k8s.api.autoscaling.v2beta1.ObjectMetricSource

    Attributes:
    metricName: metricName is the name of the metric in question.
    target: target is the described Kubernetes object.
    targetValue: targetValue is the target value of the metric (as a quantity).
    averageValue: averageValue is the target value of the average of the metric across all
        relevant pods (as a quantity)
    selector: selector is the string-encoded form of a standard kubernetes label selector
        for the given metric When set, it is passed as an additional parameter to the
        metrics server for more specific metrics scoping When unset, just the metricName
        will be used to gather metrics.
    """

    version = 'v2beta1'
    metricName: str
    target: CrossVersionObjectReference
    targetValue: Quantity
    averageValue: Optional[Quantity] = None
    selector: Optional[LabelSelector] = None


@dataclass
class PodsMetricSource(HikaruBase):
    """
    PodsMetricSource indicates how to scale on a metric describing each pod in the current
    scale target (for example, transactions-processed-per-second). The values will be
    averaged together before being compared to the target value.

    Full name: io.k8s.api.autoscaling.v2beta1.PodsMetricSource

    Attributes:
    metricName: metricName is the name of the metric in question
    targetAverageValue: targetAverageValue is the target value of the average of the
        metric across all relevant pods (as a quantity)
    selector: selector is the string-encoded form of a standard kubernetes label selector
        for the given metric When set, it is passed as an additional parameter to the
        metrics server for more specific metrics scoping When unset, just the metricName
        will be used to gather metrics.
    """

    version = 'v2beta1'
    metricName: str
    targetAverageValue: Quantity
    selector: Optional[LabelSelector] = None


@dataclass
class ResourceMetricSource(HikaruBase):
    """
    ResourceMetricSource indicates how to scale on a resource metric known to Kubernetes,
    as specified in requests and limits, describing each pod in the current scale target
    (e.g. CPU or memory). The values will be averaged together before being compared to
    the target. Such metrics are built in to Kubernetes, and have special scaling options
    on top of those available to normal per-pod metrics using the "pods" source. Only one
    "target" type should be set.

    Full name: io.k8s.api.autoscaling.v2beta1.ResourceMetricSource

    Attributes:
    name: name is the name of the resource in question.
    targetAverageUtilization: targetAverageUtilization is the target value of the average
        of the resource metric across all relevant pods, represented as a percentage of
        the requested value of the resource for the pods.
    targetAverageValue: targetAverageValue is the target value of the average of the
        resource metric across all relevant pods, as a raw value (instead of as a
        percentage of the request), similar to the "pods" metric source type.
    """

    version = 'v2beta1'
    name: str
    targetAverageUtilization: Optional[int] = None
    targetAverageValue: Optional[Quantity] = None


@dataclass
class MetricSpec(HikaruBase):
    """
    MetricSpec specifies how to scale based on a single metric (only `type` and one other
    matching field should be set at once).

    Full name: io.k8s.api.autoscaling.v2beta1.MetricSpec

    Attributes:
    type: type is the type of metric source. It should be one of "ContainerResource",
        "External", "Object", "Pods" or "Resource", each mapping to a matching field in
        the object. Note: "ContainerResource" type is available on when the feature-gate
        HPAContainerMetrics is enabled
    containerResource: container resource refers to a resource metric (such as those
        specified in requests and limits) known to Kubernetes describing a single
        container in each pod of the current scale target (e.g. CPU or memory). Such
        metrics are built in to Kubernetes, and have special scaling options on top of
        those available to normal per-pod metrics using the "pods" source. This is an
        alpha feature and can be enabled by the HPAContainerMetrics feature flag.
    external: external refers to a global metric that is not associated with any
        Kubernetes object. It allows autoscaling based on information coming from
        components running outside of cluster (for example length of queue in cloud
        messaging service, or QPS from loadbalancer running outside of cluster).
    object: object refers to a metric describing a single kubernetes object (for example,
        hits-per-second on an Ingress object).
    pods: pods refers to a metric describing each pod in the current scale target (for
        example, transactions-processed-per-second). The values will be averaged together
        before being compared to the target value.
    resource: resource refers to a resource metric (such as those specified in requests
        and limits) known to Kubernetes describing each pod in the current scale target
        (e.g. CPU or memory). Such metrics are built in to Kubernetes, and have special
        scaling options on top of those available to normal per-pod metrics using the
        "pods" source.
    """

    version = 'v2beta1'
    type: str
    containerResource: Optional[ContainerResourceMetricSource] = None
    external: Optional[ExternalMetricSource] = None
    object: Optional[ObjectMetricSource] = None
    pods: Optional[PodsMetricSource] = None
    resource: Optional[ResourceMetricSource] = None


@dataclass
class HorizontalPodAutoscalerSpec(HikaruBase):
    """
    HorizontalPodAutoscalerSpec describes the desired functionality of the
    HorizontalPodAutoscaler.

    Full name: io.k8s.api.autoscaling.v2beta1.HorizontalPodAutoscalerSpec

    Attributes:
    maxReplicas: maxReplicas is the upper limit for the number of replicas to which the
        autoscaler can scale up. It cannot be less that minReplicas.
    scaleTargetRef: scaleTargetRef points to the target resource to scale, and is used to
        the pods for which metrics should be collected, as well as to actually change the
        replica count.
    minReplicas: minReplicas is the lower limit for the number of replicas to which the
        autoscaler can scale down. It defaults to 1 pod. minReplicas is allowed to be 0 if
        the alpha feature gate HPAScaleToZero is enabled and at least one Object or
        External metric is configured. Scaling is active as long as at least one metric
        value is available.
    metrics: metrics contains the specifications for which to use to calculate the desired
        replica count (the maximum replica count across all metrics will be used). The
        desired replica count is calculated multiplying the ratio between the target value
        and the current value by the current number of pods. Ergo, metrics used must
        decrease as the pod count is increased, and vice-versa. See the individual metric
        source types for more information about how each type of metric must respond.
    """

    version = 'v2beta1'
    maxReplicas: int
    scaleTargetRef: CrossVersionObjectReference
    minReplicas: Optional[int] = None
    metrics: Optional[List[MetricSpec]] = field(default_factory=list)


@dataclass
class HorizontalPodAutoscalerCondition(HikaruBase):
    """
    HorizontalPodAutoscalerCondition describes the state of a HorizontalPodAutoscaler at a
    certain point.

    Full name: io.k8s.api.autoscaling.v2beta1.HorizontalPodAutoscalerCondition

    Attributes:
    status: status is the status of the condition (True, False, Unknown)
    type: type describes the current condition
    lastTransitionTime: lastTransitionTime is the last time the condition transitioned
        from one status to another
    message: message is a human-readable explanation containing details about the
        transition
    reason: reason is the reason for the condition's last transition.
    """

    version = 'v2beta1'
    status: str
    type: str
    lastTransitionTime: Optional[Time] = None
    message: Optional[str] = None
    reason: Optional[str] = None


@dataclass
class ContainerResourceMetricStatus(HikaruBase):
    """
    ContainerResourceMetricStatus indicates the current value of a resource metric known
    to Kubernetes, as specified in requests and limits, describing a single container in
    each pod in the current scale target (e.g. CPU or memory). Such metrics are built in
    to Kubernetes, and have special scaling options on top of those available to normal
    per-pod metrics using the "pods" source.

    Full name: io.k8s.api.autoscaling.v2beta1.ContainerResourceMetricStatus

    Attributes:
    container: container is the name of the container in the pods of the scaling target
    currentAverageValue: currentAverageValue is the current value of the average of the
        resource metric across all relevant pods, as a raw value (instead of as a
        percentage of the request), similar to the "pods" metric source type. It will
        always be set, regardless of the corresponding metric specification.
    name: name is the name of the resource in question.
    currentAverageUtilization: currentAverageUtilization is the current value of the
        average of the resource metric across all relevant pods, represented as a
        percentage of the requested value of the resource for the pods. It will only be
        present if `targetAverageValue` was set in the corresponding metric specification.
    """

    version = 'v2beta1'
    container: str
    currentAverageValue: Quantity
    name: str
    currentAverageUtilization: Optional[int] = None


@dataclass
class ExternalMetricStatus(HikaruBase):
    """
    ExternalMetricStatus indicates the current value of a global metric not associated
    with any Kubernetes object.

    Full name: io.k8s.api.autoscaling.v2beta1.ExternalMetricStatus

    Attributes:
    currentValue: currentValue is the current value of the metric (as a quantity)
    metricName: metricName is the name of a metric used for autoscaling in metric system.
    currentAverageValue: currentAverageValue is the current value of metric averaged over
        autoscaled pods.
    metricSelector: metricSelector is used to identify a specific time series within a
        given metric.
    """

    version = 'v2beta1'
    currentValue: Quantity
    metricName: str
    currentAverageValue: Optional[Quantity] = None
    metricSelector: Optional[LabelSelector] = None


@dataclass
class ObjectMetricStatus(HikaruBase):
    """
    ObjectMetricStatus indicates the current value of a metric describing a kubernetes
    object (for example, hits-per-second on an Ingress object).

    Full name: io.k8s.api.autoscaling.v2beta1.ObjectMetricStatus

    Attributes:
    currentValue: currentValue is the current value of the metric (as a quantity).
    metricName: metricName is the name of the metric in question.
    target: target is the described Kubernetes object.
    averageValue: averageValue is the current value of the average of the metric across
        all relevant pods (as a quantity)
    selector: selector is the string-encoded form of a standard kubernetes label selector
        for the given metric When set in the ObjectMetricSource, it is passed as an
        additional parameter to the metrics server for more specific metrics scoping. When
        unset, just the metricName will be used to gather metrics.
    """

    version = 'v2beta1'
    currentValue: Quantity
    metricName: str
    target: CrossVersionObjectReference
    averageValue: Optional[Quantity] = None
    selector: Optional[LabelSelector] = None


@dataclass
class PodsMetricStatus(HikaruBase):
    """
    PodsMetricStatus indicates the current value of a metric describing each pod in the
    current scale target (for example, transactions-processed-per-second).

    Full name: io.k8s.api.autoscaling.v2beta1.PodsMetricStatus

    Attributes:
    currentAverageValue: currentAverageValue is the current value of the average of the
        metric across all relevant pods (as a quantity)
    metricName: metricName is the name of the metric in question
    selector: selector is the string-encoded form of a standard kubernetes label selector
        for the given metric When set in the PodsMetricSource, it is passed as an
        additional parameter to the metrics server for more specific metrics scoping. When
        unset, just the metricName will be used to gather metrics.
    """

    version = 'v2beta1'
    currentAverageValue: Quantity
    metricName: str
    selector: Optional[LabelSelector] = None


@dataclass
class ResourceMetricStatus(HikaruBase):
    """
    ResourceMetricStatus indicates the current value of a resource metric known to
    Kubernetes, as specified in requests and limits, describing each pod in the current
    scale target (e.g. CPU or memory). Such metrics are built in to Kubernetes, and have
    special scaling options on top of those available to normal per-pod metrics using the
    "pods" source.

    Full name: io.k8s.api.autoscaling.v2beta1.ResourceMetricStatus

    Attributes:
    currentAverageValue: currentAverageValue is the current value of the average of the
        resource metric across all relevant pods, as a raw value (instead of as a
        percentage of the request), similar to the "pods" metric source type. It will
        always be set, regardless of the corresponding metric specification.
    name: name is the name of the resource in question.
    currentAverageUtilization: currentAverageUtilization is the current value of the
        average of the resource metric across all relevant pods, represented as a
        percentage of the requested value of the resource for the pods. It will only be
        present if `targetAverageValue` was set in the corresponding metric specification.
    """

    version = 'v2beta1'
    currentAverageValue: Quantity
    name: str
    currentAverageUtilization: Optional[int] = None


@dataclass
class MetricStatus(HikaruBase):
    """
    MetricStatus describes the last-read state of a single metric.

    Full name: io.k8s.api.autoscaling.v2beta1.MetricStatus

    Attributes:
    type: type is the type of metric source. It will be one of "ContainerResource",
        "External", "Object", "Pods" or "Resource", each corresponds to a matching field
        in the object. Note: "ContainerResource" type is available on when the
        feature-gate HPAContainerMetrics is enabled
    containerResource: container resource refers to a resource metric (such as those
        specified in requests and limits) known to Kubernetes describing a single
        container in each pod in the current scale target (e.g. CPU or memory). Such
        metrics are built in to Kubernetes, and have special scaling options on top of
        those available to normal per-pod metrics using the "pods" source.
    external: external refers to a global metric that is not associated with any
        Kubernetes object. It allows autoscaling based on information coming from
        components running outside of cluster (for example length of queue in cloud
        messaging service, or QPS from loadbalancer running outside of cluster).
    object: object refers to a metric describing a single kubernetes object (for example,
        hits-per-second on an Ingress object).
    pods: pods refers to a metric describing each pod in the current scale target (for
        example, transactions-processed-per-second). The values will be averaged together
        before being compared to the target value.
    resource: resource refers to a resource metric (such as those specified in requests
        and limits) known to Kubernetes describing each pod in the current scale target
        (e.g. CPU or memory). Such metrics are built in to Kubernetes, and have special
        scaling options on top of those available to normal per-pod metrics using the
        "pods" source.
    """

    version = 'v2beta1'
    type: str
    containerResource: Optional[ContainerResourceMetricStatus] = None
    external: Optional[ExternalMetricStatus] = None
    object: Optional[ObjectMetricStatus] = None
    pods: Optional[PodsMetricStatus] = None
    resource: Optional[ResourceMetricStatus] = None


@dataclass
class HorizontalPodAutoscalerStatus(HikaruBase):
    """
    HorizontalPodAutoscalerStatus describes the current status of a horizontal pod
    autoscaler.

    Full name: io.k8s.api.autoscaling.v2beta1.HorizontalPodAutoscalerStatus

    Attributes:
    conditions: conditions is the set of conditions required for this autoscaler to scale
        its target, and indicates whether or not those conditions are met.
    currentReplicas: currentReplicas is current number of replicas of pods managed by this
        autoscaler, as last seen by the autoscaler.
    desiredReplicas: desiredReplicas is the desired number of replicas of pods managed by
        this autoscaler, as last calculated by the autoscaler.
    lastScaleTime: lastScaleTime is the last time the HorizontalPodAutoscaler scaled the
        number of pods, used by the autoscaler to control how often the number of pods is
        changed.
    observedGeneration: observedGeneration is the most recent generation observed by this
        autoscaler.
    currentMetrics: currentMetrics is the last read state of the metrics used by this
        autoscaler.
    """

    version = 'v2beta1'
    conditions: List[HorizontalPodAutoscalerCondition]
    currentReplicas: int
    desiredReplicas: int
    lastScaleTime: Optional[Time] = None
    observedGeneration: Optional[int] = None
    currentMetrics: Optional[List[MetricStatus]] = field(default_factory=list)


@dataclass
class HorizontalPodAutoscaler(HikaruDocumentBase):
    """
    HorizontalPodAutoscaler is the configuration for a horizontal pod autoscaler, which
    automatically manages the replica count of any resource implementing the scale
    subresource based on the metrics specified.

    Full name: io.k8s.api.autoscaling.v2beta1.HorizontalPodAutoscaler

    Attributes:
    apiVersion: APIVersion defines the versioned schema of this representation of an
        object. Servers should convert recognized schemas to the latest internal value,
        and may reject unrecognized values. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind: Kind is a string value representing the REST resource this object represents.
        Servers may infer this from the endpoint the client submits requests to. Cannot be
        updated. In CamelCase. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata: metadata is the standard object metadata. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    spec: spec is the specification for the behaviour of the autoscaler. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status.
    status: status is the current information about the autoscaler.
    """

    version = 'v2beta1'
    apiVersion: Optional[str] = None
    kind: Optional[str] = None
    metadata: Optional[ObjectMeta] = None
    spec: Optional[HorizontalPodAutoscalerSpec] = None
    status: Optional[HorizontalPodAutoscalerStatus] = None


@dataclass
class HorizontalPodAutoscalerList(HikaruDocumentBase):
    """
    HorizontalPodAutoscaler is a list of horizontal pod autoscaler objects.

    Full name: io.k8s.api.autoscaling.v2beta1.HorizontalPodAutoscalerList

    Attributes:
    items: items is the list of horizontal pod autoscaler objects.
    apiVersion: APIVersion defines the versioned schema of this representation of an
        object. Servers should convert recognized schemas to the latest internal value,
        and may reject unrecognized values. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind: Kind is a string value representing the REST resource this object represents.
        Servers may infer this from the endpoint the client submits requests to. Cannot be
        updated. In CamelCase. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata: metadata is the standard list metadata.
    """

    version = 'v2beta1'
    items: List[HorizontalPodAutoscaler]
    apiVersion: Optional[str] = None
    kind: Optional[str] = None
    metadata: Optional[ListMeta] = None


globs = dict(globals())
__all__ = [c.__name__ for c in globs.values()
           if type(c) == type]
del globs
