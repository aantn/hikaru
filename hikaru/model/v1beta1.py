#
# Copyright (c) 2021 Incisive Technology Ltd
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
"""
DO NOT EDIT THIS FILE!

This module is automatically generated using the hikaru.build program that turns
a Kubernetes Swagger spec into the code for the hikaru.model module.
"""


from hikaru.meta import HikaruBase, HikaruDocumentBase
from typing import Optional, List, Dict
from dataclasses import dataclass, field
from .unversioned import *
from .v1 import *


@dataclass
class ServiceReference(HikaruBase):
    """
    ServiceReference holds a reference to Service.legacy.k8s.io

    Full name: io.k8s.api.admissionregistration.v1beta1.ServiceReference

    Attributes:
    name: Name is the name of the service
    namespace: Namespace is the namespace of the service
    port: If specified, the port on the service that hosting webhook. Default to 443 for
        backward compatibility. `port` should be a valid port number (1-65535, inclusive).
    """

    name: Optional[str] = None
    namespace: Optional[str] = None
    port: Optional[int] = None


@dataclass
class WebhookClientConfig(HikaruBase):
    """
    WebhookClientConfig contains the information to make a TLS connection with the webhook

    Full name: io.k8s.api.admissionregistration.v1beta1.WebhookClientConfig

    Attributes:
    caBundle: `caBundle` is a PEM encoded CA bundle which will be used to validate the
        webhook's server certificate. If unspecified, system trust roots on the apiserver
        are used.
    service: `service` is a reference to the service for this webhook. Either `service` or
        `url` must be specified. If the webhook is running within the cluster, then you
        should use `service`.
    url: `url` gives the location of the webhook, in standard URL form
        (`scheme://host:port/path`). Exactly one of `url` or `service` must be specified.
        The `host` should not refer to a service running in the cluster; use the `service`
        field instead. The host might be resolved via external DNS in some apiservers
        (e.g., `kube-apiserver` cannot resolve in-cluster DNS as that would be a layering
        violation). `host` may also be an IP address. Please note that using `localhost`
        or `127.0.0.1` as a `host` is risky unless you take great care to run this webhook
        on all hosts which run an apiserver which might need to make calls to this
        webhook. Such installs are likely to be non-portable, i.e., not easy to turn up in
        a new cluster. The scheme must be "https"; the URL must begin with "https://". A
        path is optional, and if present may be any string permissible in a URL. You may
        use the path to pass an arbitrary string to the webhook, for example, a cluster
        identifier. Attempting to use a user or basic auth e.g. "user:password@" is not
        allowed. Fragments ("#...") and query parameters ("?...") are not allowed, either.
    """

    caBundle: Optional[str] = None
    service: Optional[ServiceReference] = None
    url: Optional[str] = None


@dataclass
class RuleWithOperations(HikaruBase):
    """
    RuleWithOperations is a tuple of Operations and Resources. It is recommended to make
    sure that all the tuple expansions are valid.

    Full name: io.k8s.api.admissionregistration.v1beta1.RuleWithOperations

    Attributes:
    scope: scope specifies the scope of this rule. Valid values are "Cluster",
        "Namespaced", and "*" "Cluster" means that only cluster-scoped resources will
        match this rule. Namespace API objects are cluster-scoped. "Namespaced" means that
        only namespaced resources will match this rule. "*" means that there are no scope
        restrictions. Subresources match the scope of their parent resource. Default is
        "*".
    apiGroups: APIGroups is the API groups the resources belong to. '*' is all groups. If
        '*' is present, the length of the slice must be one. Required.
    apiVersions: APIVersions is the API versions the resources belong to. '*' is all
        versions. If '*' is present, the length of the slice must be one. Required.
    operations: Operations is the operations the admission hook cares about - CREATE,
        UPDATE, DELETE, CONNECT or * for all of those operations and any future admission
        operations that are added. If '*' is present, the length of the slice must be one.
        Required.
    resources: Resources is a list of resources this rule applies to. For example: 'pods'
        means pods. 'pods/log' means the log subresource of pods. '*' means all resources,
        but not subresources. 'pods/*' means all subresources of pods. '*/scale' means all
        scale subresources. '*/*' means all resources and their subresources. If wildcard
        is present, the validation rule will ensure resources do not overlap with each
        other. Depending on the enclosing object, subresources might not be allowed.
        Required.
    """

    scope: Optional[str] = None
    apiGroups: Optional[List[str]] = field(default_factory=list)
    apiVersions: Optional[List[str]] = field(default_factory=list)
    operations: Optional[List[str]] = field(default_factory=list)
    resources: Optional[List[str]] = field(default_factory=list)


@dataclass
class MutatingWebhook(HikaruBase):
    """
    MutatingWebhook describes an admission webhook and the resources and operations it
    applies to.

    Full name: io.k8s.api.admissionregistration.v1beta1.MutatingWebhook

    Attributes:
    clientConfig: ClientConfig defines how to communicate with the hook. Required
    name: The name of the admission webhook. Name should be fully qualified, e.g.,
        imagepolicy.kubernetes.io, where "imagepolicy" is the name of the webhook, and
        kubernetes.io is the name of the organization. Required.
    failurePolicy: FailurePolicy defines how unrecognized errors from the admission
        endpoint are handled - allowed values are Ignore or Fail. Defaults to Ignore.
    matchPolicy: matchPolicy defines how the "rules" list is used to match incoming
        requests. Allowed values are "Exact" or "Equivalent". - Exact: match a request
        only if it exactly matches a specified rule. For example, if deployments can be
        modified via apps/v1, apps/v1beta1, and extensions/v1beta1, but "rules" only
        included `apiGroups:["apps"], apiVersions:["v1"], resources: ["deployments"]`, a
        request to apps/v1beta1 or extensions/v1beta1 would not be sent to the webhook. -
        Equivalent: match a request if modifies a resource listed in rules, even via
        another API group or version. For example, if deployments can be modified via
        apps/v1, apps/v1beta1, and extensions/v1beta1, and "rules" only included
        `apiGroups:["apps"], apiVersions:["v1"], resources: ["deployments"]`, a request to
        apps/v1beta1 or extensions/v1beta1 would be converted to apps/v1 and sent to the
        webhook. Defaults to "Exact"
    namespaceSelector: NamespaceSelector decides whether to run the webhook on an object
        based on whether the namespace for that object matches the selector. If the object
        itself is a namespace, the matching is performed on object.metadata.labels. If the
        object is another cluster scoped resource, it never skips the webhook. For
        example, to run the webhook on any objects whose namespace is not associated with
        "runlevel" of "0" or "1"; you will set the selector as follows:
        "namespaceSelector": { "matchExpressions": [ { "key": "runlevel", "operator":
        "NotIn", "values": [ "0", "1" ] } ] } If instead you want to only run the webhook
        on any objects whose namespace is associated with the "environment" of "prod" or
        "staging"; you will set the selector as follows: "namespaceSelector": {
        "matchExpressions": [ { "key": "environment", "operator": "In", "values": [
        "prod", "staging" ] } ] } See
        https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/ for more
        examples of label selectors. Default to the empty LabelSelector, which matches
        everything.
    objectSelector: ObjectSelector decides whether to run the webhook based on if the
        object has matching labels. objectSelector is evaluated against both the oldObject
        and newObject that would be sent to the webhook, and is considered to match if
        either object matches the selector. A null object (oldObject in the case of
        create, or newObject in the case of delete) or an object that cannot have labels
        (like a DeploymentRollback or a PodProxyOptions object) is not considered to
        match. Use the object selector only if the webhook is opt-in, because end users
        may skip the admission webhook by setting the labels. Default to the empty
        LabelSelector, which matches everything.
    reinvocationPolicy: reinvocationPolicy indicates whether this webhook should be called
        multiple times as part of a single admission evaluation. Allowed values are
        "Never" and "IfNeeded". Never: the webhook will not be called more than once in a
        single admission evaluation. IfNeeded: the webhook will be called at least one
        additional time as part of the admission evaluation if the object being admitted
        is modified by other admission plugins after the initial webhook call. Webhooks
        that specify this option *must* be idempotent, able to process objects they
        previously admitted. Note: * the number of additional invocations is not
        guaranteed to be exactly one. * if additional invocations result in further
        modifications to the object, webhooks are not guaranteed to be invoked again. *
        webhooks that use this option may be reordered to minimize the number of
        additional invocations. * to validate an object after all mutations are guaranteed
        complete, use a validating admission webhook instead. Defaults to "Never".
    sideEffects: SideEffects states whether this webhook has side effects. Acceptable
        values are: Unknown, None, Some, NoneOnDryRun Webhooks with side effects MUST
        implement a reconciliation system, since a request may be rejected by a future
        step in the admission chain and the side effects therefore need to be undone.
        Requests with the dryRun attribute will be auto-rejected if they match a webhook
        with sideEffects == Unknown or Some. Defaults to Unknown.
    timeoutSeconds: TimeoutSeconds specifies the timeout for this webhook. After the
        timeout passes, the webhook call will be ignored or the API call will fail based
        on the failure policy. The timeout value must be between 1 and 30 seconds. Default
        to 30 seconds.
    admissionReviewVersions: AdmissionReviewVersions is an ordered list of preferred
        `AdmissionReview` versions the Webhook expects. API server will try to use first
        version in the list which it supports. If none of the versions specified in this
        list supported by API server, validation will fail for this object. If a persisted
        webhook configuration specifies allowed versions and does not include any versions
        known to the API Server, calls to the webhook will fail and be subject to the
        failure policy. Default to `['v1beta1']`.
    rules: Rules describes what operations on what resources/subresources the webhook
        cares about. The webhook cares about an operation if it matches _any_ Rule.
        However, in order to prevent ValidatingAdmissionWebhooks and
        MutatingAdmissionWebhooks from putting the cluster in a state which cannot be
        recovered from without completely disabling the plugin,
        ValidatingAdmissionWebhooks and MutatingAdmissionWebhooks are never called on
        admission requests for ValidatingWebhookConfiguration and
        MutatingWebhookConfiguration objects.
    """

    clientConfig: WebhookClientConfig
    name: str
    failurePolicy: Optional[str] = None
    matchPolicy: Optional[str] = None
    namespaceSelector: Optional[LabelSelector] = None
    objectSelector: Optional[LabelSelector] = None
    reinvocationPolicy: Optional[str] = None
    sideEffects: Optional[str] = None
    timeoutSeconds: Optional[int] = None
    admissionReviewVersions: Optional[List[str]] = field(default_factory=list)
    rules: Optional[List[RuleWithOperations]] = field(default_factory=list)


@dataclass
class MutatingWebhookConfiguration(HikaruDocumentBase):
    """
    MutatingWebhookConfiguration describes the configuration of and admission webhook that
    accept or reject and may change the object. Deprecated in v1.16, planned for removal
    in v1.19. Use admissionregistration.k8s.io/v1 MutatingWebhookConfiguration instead.

    Full name: io.k8s.api.admissionregistration.v1beta1.MutatingWebhookConfiguration

    Attributes:
    apiVersion: APIVersion defines the versioned schema of this representation of an
        object. Servers should convert recognized schemas to the latest internal value,
        and may reject unrecognized values. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind: Kind is a string value representing the REST resource this object represents.
        Servers may infer this from the endpoint the client submits requests to. Cannot be
        updated. In CamelCase. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata: Standard object metadata; More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.
    webhooks: Webhooks is a list of webhooks and the affected resources and operations.
    """

    _version = 'v1beta1'
    apiVersion: Optional[str] = None
    kind: Optional[str] = None
    metadata: Optional[ObjectMeta] = None
    webhooks: Optional[List[MutatingWebhook]] = field(default_factory=list)


@dataclass
class MutatingWebhookConfigurationList(HikaruDocumentBase):
    """
    MutatingWebhookConfigurationList is a list of MutatingWebhookConfiguration.

    Full name: io.k8s.api.admissionregistration.v1beta1.MutatingWebhookConfigurationList

    Attributes:
    items: List of MutatingWebhookConfiguration.
    apiVersion: APIVersion defines the versioned schema of this representation of an
        object. Servers should convert recognized schemas to the latest internal value,
        and may reject unrecognized values. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind: Kind is a string value representing the REST resource this object represents.
        Servers may infer this from the endpoint the client submits requests to. Cannot be
        updated. In CamelCase. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata: Standard list metadata. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    """

    _version = 'v1beta1'
    items: List[MutatingWebhookConfiguration]
    apiVersion: Optional[str] = None
    kind: Optional[str] = None
    metadata: Optional[ListMeta] = None


@dataclass
class ValidatingWebhook(HikaruBase):
    """
    ValidatingWebhook describes an admission webhook and the resources and operations it
    applies to.

    Full name: io.k8s.api.admissionregistration.v1beta1.ValidatingWebhook

    Attributes:
    clientConfig: ClientConfig defines how to communicate with the hook. Required
    name: The name of the admission webhook. Name should be fully qualified, e.g.,
        imagepolicy.kubernetes.io, where "imagepolicy" is the name of the webhook, and
        kubernetes.io is the name of the organization. Required.
    failurePolicy: FailurePolicy defines how unrecognized errors from the admission
        endpoint are handled - allowed values are Ignore or Fail. Defaults to Ignore.
    matchPolicy: matchPolicy defines how the "rules" list is used to match incoming
        requests. Allowed values are "Exact" or "Equivalent". - Exact: match a request
        only if it exactly matches a specified rule. For example, if deployments can be
        modified via apps/v1, apps/v1beta1, and extensions/v1beta1, but "rules" only
        included `apiGroups:["apps"], apiVersions:["v1"], resources: ["deployments"]`, a
        request to apps/v1beta1 or extensions/v1beta1 would not be sent to the webhook. -
        Equivalent: match a request if modifies a resource listed in rules, even via
        another API group or version. For example, if deployments can be modified via
        apps/v1, apps/v1beta1, and extensions/v1beta1, and "rules" only included
        `apiGroups:["apps"], apiVersions:["v1"], resources: ["deployments"]`, a request to
        apps/v1beta1 or extensions/v1beta1 would be converted to apps/v1 and sent to the
        webhook. Defaults to "Exact"
    namespaceSelector: NamespaceSelector decides whether to run the webhook on an object
        based on whether the namespace for that object matches the selector. If the object
        itself is a namespace, the matching is performed on object.metadata.labels. If the
        object is another cluster scoped resource, it never skips the webhook. For
        example, to run the webhook on any objects whose namespace is not associated with
        "runlevel" of "0" or "1"; you will set the selector as follows:
        "namespaceSelector": { "matchExpressions": [ { "key": "runlevel", "operator":
        "NotIn", "values": [ "0", "1" ] } ] } If instead you want to only run the webhook
        on any objects whose namespace is associated with the "environment" of "prod" or
        "staging"; you will set the selector as follows: "namespaceSelector": {
        "matchExpressions": [ { "key": "environment", "operator": "In", "values": [
        "prod", "staging" ] } ] } See
        https://kubernetes.io/docs/concepts/overview/working-with-objects/labels for more
        examples of label selectors. Default to the empty LabelSelector, which matches
        everything.
    objectSelector: ObjectSelector decides whether to run the webhook based on if the
        object has matching labels. objectSelector is evaluated against both the oldObject
        and newObject that would be sent to the webhook, and is considered to match if
        either object matches the selector. A null object (oldObject in the case of
        create, or newObject in the case of delete) or an object that cannot have labels
        (like a DeploymentRollback or a PodProxyOptions object) is not considered to
        match. Use the object selector only if the webhook is opt-in, because end users
        may skip the admission webhook by setting the labels. Default to the empty
        LabelSelector, which matches everything.
    sideEffects: SideEffects states whether this webhook has side effects. Acceptable
        values are: Unknown, None, Some, NoneOnDryRun Webhooks with side effects MUST
        implement a reconciliation system, since a request may be rejected by a future
        step in the admission chain and the side effects therefore need to be undone.
        Requests with the dryRun attribute will be auto-rejected if they match a webhook
        with sideEffects == Unknown or Some. Defaults to Unknown.
    timeoutSeconds: TimeoutSeconds specifies the timeout for this webhook. After the
        timeout passes, the webhook call will be ignored or the API call will fail based
        on the failure policy. The timeout value must be between 1 and 30 seconds. Default
        to 30 seconds.
    admissionReviewVersions: AdmissionReviewVersions is an ordered list of preferred
        `AdmissionReview` versions the Webhook expects. API server will try to use first
        version in the list which it supports. If none of the versions specified in this
        list supported by API server, validation will fail for this object. If a persisted
        webhook configuration specifies allowed versions and does not include any versions
        known to the API Server, calls to the webhook will fail and be subject to the
        failure policy. Default to `['v1beta1']`.
    rules: Rules describes what operations on what resources/subresources the webhook
        cares about. The webhook cares about an operation if it matches _any_ Rule.
        However, in order to prevent ValidatingAdmissionWebhooks and
        MutatingAdmissionWebhooks from putting the cluster in a state which cannot be
        recovered from without completely disabling the plugin,
        ValidatingAdmissionWebhooks and MutatingAdmissionWebhooks are never called on
        admission requests for ValidatingWebhookConfiguration and
        MutatingWebhookConfiguration objects.
    """

    clientConfig: WebhookClientConfig
    name: str
    failurePolicy: Optional[str] = None
    matchPolicy: Optional[str] = None
    namespaceSelector: Optional[LabelSelector] = None
    objectSelector: Optional[LabelSelector] = None
    sideEffects: Optional[str] = None
    timeoutSeconds: Optional[int] = None
    admissionReviewVersions: Optional[List[str]] = field(default_factory=list)
    rules: Optional[List[RuleWithOperations]] = field(default_factory=list)


@dataclass
class ValidatingWebhookConfiguration(HikaruDocumentBase):
    """
    ValidatingWebhookConfiguration describes the configuration of and admission webhook
    that accept or reject and object without changing it. Deprecated in v1.16, planned for
    removal in v1.19. Use admissionregistration.k8s.io/v1 ValidatingWebhookConfiguration
    instead.

    Full name: io.k8s.api.admissionregistration.v1beta1.ValidatingWebhookConfiguration

    Attributes:
    apiVersion: APIVersion defines the versioned schema of this representation of an
        object. Servers should convert recognized schemas to the latest internal value,
        and may reject unrecognized values. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind: Kind is a string value representing the REST resource this object represents.
        Servers may infer this from the endpoint the client submits requests to. Cannot be
        updated. In CamelCase. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata: Standard object metadata; More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.
    webhooks: Webhooks is a list of webhooks and the affected resources and operations.
    """

    _version = 'v1beta1'
    apiVersion: Optional[str] = None
    kind: Optional[str] = None
    metadata: Optional[ObjectMeta] = None
    webhooks: Optional[List[ValidatingWebhook]] = field(default_factory=list)


@dataclass
class ValidatingWebhookConfigurationList(HikaruDocumentBase):
    """
    ValidatingWebhookConfigurationList is a list of ValidatingWebhookConfiguration.

    Full name: io.k8s.api.admissionregistration.v1beta1.ValidatingWebhookConfigurationList

    Attributes:
    items: List of ValidatingWebhookConfiguration.
    apiVersion: APIVersion defines the versioned schema of this representation of an
        object. Servers should convert recognized schemas to the latest internal value,
        and may reject unrecognized values. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind: Kind is a string value representing the REST resource this object represents.
        Servers may infer this from the endpoint the client submits requests to. Cannot be
        updated. In CamelCase. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata: Standard list metadata. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    """

    _version = 'v1beta1'
    items: List[ValidatingWebhookConfiguration]
    apiVersion: Optional[str] = None
    kind: Optional[str] = None
    metadata: Optional[ListMeta] = None


@dataclass
class TokenReviewSpec(HikaruBase):
    """
    TokenReviewSpec is a description of the token authentication request.

    Full name: io.k8s.api.authentication.v1beta1.TokenReviewSpec

    Attributes:
    token: Token is the opaque bearer token.
    audiences: Audiences is a list of the identifiers that the resource server presented
        with the token identifies as. Audience-aware token authenticators will verify that
        the token was intended for at least one of the audiences in this list. If no
        audiences are provided, the audience will default to the audience of the
        Kubernetes apiserver.
    """

    token: Optional[str] = None
    audiences: Optional[List[str]] = field(default_factory=list)


@dataclass
class UserInfo(HikaruBase):
    """
    UserInfo holds the information about the user needed to implement the user.Info
    interface.

    Full name: io.k8s.api.authentication.v1beta1.UserInfo

    Attributes:
    uid: A unique value that identifies this user across time. If this user is deleted and
        another user by the same name is added, they will have different UIDs.
    username: The name that uniquely identifies this user among all active users.
    extra: Any additional information provided by the authenticator.
    groups: The names of groups this user is a part of.
    """

    uid: Optional[str] = None
    username: Optional[str] = None
    extra: Optional[Dict[str, str]] = field(default_factory=dict)
    groups: Optional[List[str]] = field(default_factory=list)


@dataclass
class TokenReviewStatus(HikaruBase):
    """
    TokenReviewStatus is the result of the token authentication request.

    Full name: io.k8s.api.authentication.v1beta1.TokenReviewStatus

    Attributes:
    authenticated: Authenticated indicates that the token was associated with a known
        user.
    error: Error indicates that the token couldn't be checked
    user: User is the UserInfo associated with the provided token.
    audiences: Audiences are audience identifiers chosen by the authenticator that are
        compatible with both the TokenReview and token. An identifier is any identifier in
        the intersection of the TokenReviewSpec audiences and the token's audiences. A
        client of the TokenReview API that sets the spec.audiences field should validate
        that a compatible audience identifier is returned in the status.audiences field to
        ensure that the TokenReview server is audience aware. If a TokenReview returns an
        empty status.audience field where status.authenticated is "true", the token is
        valid against the audience of the Kubernetes API server.
    """

    authenticated: Optional[bool] = None
    error: Optional[str] = None
    user: Optional[UserInfo] = None
    audiences: Optional[List[str]] = field(default_factory=list)


@dataclass
class TokenReview(HikaruDocumentBase):
    """
    TokenReview attempts to authenticate a token to a known user. Note: TokenReview
    requests may be cached by the webhook token authenticator plugin in the
    kube-apiserver.

    Full name: io.k8s.api.authentication.v1beta1.TokenReview

    Attributes:
    spec: Spec holds information about the request being evaluated
    apiVersion: APIVersion defines the versioned schema of this representation of an
        object. Servers should convert recognized schemas to the latest internal value,
        and may reject unrecognized values. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind: Kind is a string value representing the REST resource this object represents.
        Servers may infer this from the endpoint the client submits requests to. Cannot be
        updated. In CamelCase. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata:
    status: Status is filled in by the server and indicates whether the request can be
        authenticated.
    """

    _version = 'v1beta1'
    spec: TokenReviewSpec
    apiVersion: Optional[str] = None
    kind: Optional[str] = None
    metadata: Optional[ObjectMeta] = None
    status: Optional[TokenReviewStatus] = None


@dataclass
class NonResourceAttributes(HikaruBase):
    """
    NonResourceAttributes includes the authorization attributes available for non-resource
    requests to the Authorizer interface

    Full name: io.k8s.api.authorization.v1beta1.NonResourceAttributes

    Attributes:
    path: Path is the URL path of the request
    verb: Verb is the standard HTTP verb
    """

    path: Optional[str] = None
    verb: Optional[str] = None


@dataclass
class ResourceAttributes(HikaruBase):
    """
    ResourceAttributes includes the authorization attributes available for resource
    requests to the Authorizer interface

    Full name: io.k8s.api.authorization.v1beta1.ResourceAttributes

    Attributes:
    group: Group is the API Group of the Resource. "*" means all.
    name: Name is the name of the resource being requested for a "get" or deleted for a
        "delete". "" (empty) means all.
    namespace: Namespace is the namespace of the action being requested. Currently, there
        is no distinction between no namespace and all namespaces "" (empty) is defaulted
        for LocalSubjectAccessReviews "" (empty) is empty for cluster-scoped resources ""
        (empty) means "all" for namespace scoped resources from a SubjectAccessReview or
        SelfSubjectAccessReview
    resource: Resource is one of the existing resource types. "*" means all.
    subresource: Subresource is one of the existing resource types. "" means none.
    verb: Verb is a kubernetes resource API verb, like: get, list, watch, create, update,
        delete, proxy. "*" means all.
    version: Version is the API Version of the Resource. "*" means all.
    """

    group: Optional[str] = None
    name: Optional[str] = None
    namespace: Optional[str] = None
    resource: Optional[str] = None
    subresource: Optional[str] = None
    verb: Optional[str] = None
    version: Optional[str] = None


@dataclass
class SubjectAccessReviewSpec(HikaruBase):
    """
    SubjectAccessReviewSpec is a description of the access request. Exactly one of
    ResourceAuthorizationAttributes and NonResourceAuthorizationAttributes must be set

    Full name: io.k8s.api.authorization.v1beta1.SubjectAccessReviewSpec

    Attributes:
    nonResourceAttributes: NonResourceAttributes describes information for a non-resource
        access request
    resourceAttributes: ResourceAuthorizationAttributes describes information for a
        resource access request
    uid: UID information about the requesting user.
    user: User is the user you're testing for. If you specify "User" but not "Group", then
        is it interpreted as "What if User were not a member of any groups
    extra: Extra corresponds to the user.Info.GetExtra() method from the authenticator.
        Since that is input to the authorizer it needs a reflection here.
    group: Groups is the groups you're testing for.
    """

    nonResourceAttributes: Optional[NonResourceAttributes] = None
    resourceAttributes: Optional[ResourceAttributes] = None
    uid: Optional[str] = None
    user: Optional[str] = None
    extra: Optional[Dict[str, str]] = field(default_factory=dict)
    group: Optional[List[str]] = field(default_factory=list)


@dataclass
class SubjectAccessReviewStatus(HikaruBase):
    """
    SubjectAccessReviewStatus

    Full name: io.k8s.api.authorization.v1beta1.SubjectAccessReviewStatus

    Attributes:
    allowed: Allowed is required. True if the action would be allowed, false otherwise.
    denied: Denied is optional. True if the action would be denied, otherwise false. If
        both allowed is false and denied is false, then the authorizer has no opinion on
        whether to authorize the action. Denied may not be true if Allowed is true.
    evaluationError: EvaluationError is an indication that some error occurred during the
        authorization check. It is entirely possible to get an error and be able to
        continue determine authorization status in spite of it. For instance, RBAC can be
        missing a role, but enough roles are still present and bound to reason about the
        request.
    reason: Reason is optional. It indicates why a request was allowed or denied.
    """

    allowed: bool
    denied: Optional[bool] = None
    evaluationError: Optional[str] = None
    reason: Optional[str] = None


@dataclass
class LocalSubjectAccessReview(HikaruDocumentBase):
    """
    LocalSubjectAccessReview checks whether or not a user or group can perform an action
    in a given namespace. Having a namespace scoped resource makes it much easier to grant
    namespace scoped policy that includes permissions checking.

    Full name: io.k8s.api.authorization.v1beta1.LocalSubjectAccessReview

    Attributes:
    spec: Spec holds information about the request being evaluated. spec.namespace must be
        equal to the namespace you made the request against. If empty, it is defaulted.
    apiVersion: APIVersion defines the versioned schema of this representation of an
        object. Servers should convert recognized schemas to the latest internal value,
        and may reject unrecognized values. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind: Kind is a string value representing the REST resource this object represents.
        Servers may infer this from the endpoint the client submits requests to. Cannot be
        updated. In CamelCase. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata:
    status: Status is filled in by the server and indicates whether the request is allowed
        or not
    """

    _version = 'v1beta1'
    spec: SubjectAccessReviewSpec
    apiVersion: Optional[str] = None
    kind: Optional[str] = None
    metadata: Optional[ObjectMeta] = None
    status: Optional[SubjectAccessReviewStatus] = None


@dataclass
class SelfSubjectAccessReviewSpec(HikaruBase):
    """
    SelfSubjectAccessReviewSpec is a description of the access request. Exactly one of
    ResourceAuthorizationAttributes and NonResourceAuthorizationAttributes must be set

    Full name: io.k8s.api.authorization.v1beta1.SelfSubjectAccessReviewSpec

    Attributes:
    nonResourceAttributes: NonResourceAttributes describes information for a non-resource
        access request
    resourceAttributes: ResourceAuthorizationAttributes describes information for a
        resource access request
    """

    nonResourceAttributes: Optional[NonResourceAttributes] = None
    resourceAttributes: Optional[ResourceAttributes] = None


@dataclass
class SelfSubjectAccessReview(HikaruDocumentBase):
    """
    SelfSubjectAccessReview checks whether or the current user can perform an action. Not
    filling in a spec.namespace means "in all namespaces". Self is a special case, because
    users should always be able to check whether they can perform an action

    Full name: io.k8s.api.authorization.v1beta1.SelfSubjectAccessReview

    Attributes:
    spec: Spec holds information about the request being evaluated. user and groups must
        be empty
    apiVersion: APIVersion defines the versioned schema of this representation of an
        object. Servers should convert recognized schemas to the latest internal value,
        and may reject unrecognized values. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind: Kind is a string value representing the REST resource this object represents.
        Servers may infer this from the endpoint the client submits requests to. Cannot be
        updated. In CamelCase. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata:
    status: Status is filled in by the server and indicates whether the request is allowed
        or not
    """

    _version = 'v1beta1'
    spec: SelfSubjectAccessReviewSpec
    apiVersion: Optional[str] = None
    kind: Optional[str] = None
    metadata: Optional[ObjectMeta] = None
    status: Optional[SubjectAccessReviewStatus] = None


@dataclass
class SelfSubjectRulesReviewSpec(HikaruBase):
    """

    Full name: io.k8s.api.authorization.v1beta1.SelfSubjectRulesReviewSpec

    Attributes:
    namespace: Namespace to evaluate rules for. Required.
    """

    namespace: Optional[str] = None


@dataclass
class NonResourceRule(HikaruBase):
    """
    NonResourceRule holds information that describes a rule for the non-resource

    Full name: io.k8s.api.authorization.v1beta1.NonResourceRule

    Attributes:
    verbs: Verb is a list of kubernetes non-resource API verbs, like: get, post, put,
        delete, patch, head, options. "*" means all.
    nonResourceURLs: NonResourceURLs is a set of partial urls that a user should have
        access to. *s are allowed, but only as the full, final step in the path. "*" means
        all.
    """

    verbs: List[str]
    nonResourceURLs: Optional[List[str]] = field(default_factory=list)


@dataclass
class ResourceRule(HikaruBase):
    """
    ResourceRule is the list of actions the subject is allowed to perform on resources.
    The list ordering isn't significant, may contain duplicates, and possibly be
    incomplete.

    Full name: io.k8s.api.authorization.v1beta1.ResourceRule

    Attributes:
    verbs: Verb is a list of kubernetes resource API verbs, like: get, list, watch,
        create, update, delete, proxy. "*" means all.
    apiGroups: APIGroups is the name of the APIGroup that contains the resources. If
        multiple API groups are specified, any action requested against one of the
        enumerated resources in any API group will be allowed. "*" means all.
    resourceNames: ResourceNames is an optional white list of names that the rule applies
        to. An empty set means that everything is allowed. "*" means all.
    resources: Resources is a list of resources this rule applies to. "*" means all in the
        specified apiGroups. "*/foo" represents the subresource 'foo' for all resources in
        the specified apiGroups.
    """

    verbs: List[str]
    apiGroups: Optional[List[str]] = field(default_factory=list)
    resourceNames: Optional[List[str]] = field(default_factory=list)
    resources: Optional[List[str]] = field(default_factory=list)


@dataclass
class SubjectRulesReviewStatus(HikaruBase):
    """
    SubjectRulesReviewStatus contains the result of a rules check. This check can be
    incomplete depending on the set of authorizers the server is configured with and any
    errors experienced during evaluation. Because authorization rules are additive, if a
    rule appears in a list it's safe to assume the subject has that permission, even if
    that list is incomplete.

    Full name: io.k8s.api.authorization.v1beta1.SubjectRulesReviewStatus

    Attributes:
    incomplete: Incomplete is true when the rules returned by this call are incomplete.
        This is most commonly encountered when an authorizer, such as an external
        authorizer, doesn't support rules evaluation.
    nonResourceRules: NonResourceRules is the list of actions the subject is allowed to
        perform on non-resources. The list ordering isn't significant, may contain
        duplicates, and possibly be incomplete.
    resourceRules: ResourceRules is the list of actions the subject is allowed to perform
        on resources. The list ordering isn't significant, may contain duplicates, and
        possibly be incomplete.
    evaluationError: EvaluationError can appear in combination with Rules. It indicates an
        error occurred during rule evaluation, such as an authorizer that doesn't support
        rule evaluation, and that ResourceRules and/or NonResourceRules may be incomplete.
    """

    incomplete: bool
    nonResourceRules: List[NonResourceRule]
    resourceRules: List[ResourceRule]
    evaluationError: Optional[str] = None


@dataclass
class SelfSubjectRulesReview(HikaruDocumentBase):
    """
    SelfSubjectRulesReview enumerates the set of actions the current user can perform
    within a namespace. The returned list of actions may be incomplete depending on the
    server's authorization mode, and any errors experienced during the evaluation.
    SelfSubjectRulesReview should be used by UIs to show/hide actions, or to quickly let
    an end user reason about their permissions. It should NOT Be used by external systems
    to drive authorization decisions as this raises confused deputy, cache
    lifetime/revocation, and correctness concerns. SubjectAccessReview, and
    LocalAccessReview are the correct way to defer authorization decisions to the API
    server.

    Full name: io.k8s.api.authorization.v1beta1.SelfSubjectRulesReview

    Attributes:
    spec: Spec holds information about the request being evaluated.
    apiVersion: APIVersion defines the versioned schema of this representation of an
        object. Servers should convert recognized schemas to the latest internal value,
        and may reject unrecognized values. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind: Kind is a string value representing the REST resource this object represents.
        Servers may infer this from the endpoint the client submits requests to. Cannot be
        updated. In CamelCase. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata:
    status: Status is filled in by the server and indicates the set of actions a user can
        perform.
    """

    _version = 'v1beta1'
    spec: SelfSubjectRulesReviewSpec
    apiVersion: Optional[str] = None
    kind: Optional[str] = None
    metadata: Optional[ObjectMeta] = None
    status: Optional[SubjectRulesReviewStatus] = None


@dataclass
class SubjectAccessReview(HikaruDocumentBase):
    """
    SubjectAccessReview checks whether or not a user or group can perform an action.

    Full name: io.k8s.api.authorization.v1beta1.SubjectAccessReview

    Attributes:
    spec: Spec holds information about the request being evaluated
    apiVersion: APIVersion defines the versioned schema of this representation of an
        object. Servers should convert recognized schemas to the latest internal value,
        and may reject unrecognized values. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind: Kind is a string value representing the REST resource this object represents.
        Servers may infer this from the endpoint the client submits requests to. Cannot be
        updated. In CamelCase. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata:
    status: Status is filled in by the server and indicates whether the request is allowed
        or not
    """

    _version = 'v1beta1'
    spec: SubjectAccessReviewSpec
    apiVersion: Optional[str] = None
    kind: Optional[str] = None
    metadata: Optional[ObjectMeta] = None
    status: Optional[SubjectAccessReviewStatus] = None


@dataclass
class JobTemplateSpec(HikaruBase):
    """
    JobTemplateSpec describes the data a Job should have when created from a template

    Full name: io.k8s.api.batch.v1beta1.JobTemplateSpec

    Attributes:
    metadata: Standard object's metadata of the jobs created from this template. More
        info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    spec: Specification of the desired behavior of the job. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
    """

    metadata: Optional[ObjectMeta] = None
    spec: Optional[JobSpec] = None


@dataclass
class CronJobSpec(HikaruBase):
    """
    CronJobSpec describes how the job execution will look like and when it will actually
    run.

    Full name: io.k8s.api.batch.v1beta1.CronJobSpec

    Attributes:
    jobTemplate: Specifies the job that will be created when executing a CronJob.
    schedule: The schedule in Cron format, see https://en.wikipedia.org/wiki/Cron.
    concurrencyPolicy: Specifies how to treat concurrent executions of a Job. Valid values
        are: - "Allow" (default): allows CronJobs to run concurrently; - "Forbid": forbids
        concurrent runs, skipping next run if previous run hasn't finished yet; -
        "Replace": cancels currently running job and replaces it with a new one
    failedJobsHistoryLimit: The number of failed finished jobs to retain. This is a
        pointer to distinguish between explicit zero and not specified. Defaults to 1.
    startingDeadlineSeconds: Optional deadline in seconds for starting the job if it
        misses scheduled time for any reason. Missed jobs executions will be counted as
        failed ones.
    successfulJobsHistoryLimit: The number of successful finished jobs to retain. This is
        a pointer to distinguish between explicit zero and not specified. Defaults to 3.
    suspend: This flag tells the controller to suspend subsequent executions, it does not
        apply to already started executions. Defaults to false.
    """

    jobTemplate: JobTemplateSpec
    schedule: str
    concurrencyPolicy: Optional[str] = None
    failedJobsHistoryLimit: Optional[int] = None
    startingDeadlineSeconds: Optional[int] = None
    successfulJobsHistoryLimit: Optional[int] = None
    suspend: Optional[bool] = None


@dataclass
class CronJobStatus(HikaruBase):
    """
    CronJobStatus represents the current state of a cron job.

    Full name: io.k8s.api.batch.v1beta1.CronJobStatus

    Attributes:
    lastScheduleTime: Information when was the last time the job was successfully
        scheduled.
    active: A list of pointers to currently running jobs.
    """

    lastScheduleTime: Optional[Time] = None
    active: Optional[List[ObjectReference]] = field(default_factory=list)


@dataclass
class CronJob(HikaruDocumentBase):
    """
    CronJob represents the configuration of a single cron job.

    Full name: io.k8s.api.batch.v1beta1.CronJob

    Attributes:
    apiVersion: APIVersion defines the versioned schema of this representation of an
        object. Servers should convert recognized schemas to the latest internal value,
        and may reject unrecognized values. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind: Kind is a string value representing the REST resource this object represents.
        Servers may infer this from the endpoint the client submits requests to. Cannot be
        updated. In CamelCase. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata: Standard object's metadata. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    spec: Specification of the desired behavior of a cron job, including the schedule.
        More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
    status: Current status of a cron job. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
    """

    _version = 'v1beta1'
    apiVersion: Optional[str] = None
    kind: Optional[str] = None
    metadata: Optional[ObjectMeta] = None
    spec: Optional[CronJobSpec] = None
    status: Optional[CronJobStatus] = None


@dataclass
class CronJobList(HikaruDocumentBase):
    """
    CronJobList is a collection of cron jobs.

    Full name: io.k8s.api.batch.v1beta1.CronJobList

    Attributes:
    items: items is the list of CronJobs.
    apiVersion: APIVersion defines the versioned schema of this representation of an
        object. Servers should convert recognized schemas to the latest internal value,
        and may reject unrecognized values. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind: Kind is a string value representing the REST resource this object represents.
        Servers may infer this from the endpoint the client submits requests to. Cannot be
        updated. In CamelCase. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata: Standard list metadata. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    """

    _version = 'v1beta1'
    items: List[CronJob]
    apiVersion: Optional[str] = None
    kind: Optional[str] = None
    metadata: Optional[ListMeta] = None


@dataclass
class CertificateSigningRequestSpec(HikaruBase):
    """
    This information is immutable after the request is created. Only the Request and
    Usages fields can be set on creation, other fields are derived by Kubernetes and
    cannot be modified by users.

    Full name: io.k8s.api.certificates.v1beta1.CertificateSigningRequestSpec

    Attributes:
    request: Base64-encoded PKCS#10 CSR data
    signerName: Requested signer for the request. It is a qualified name in the form:
        `scope-hostname.io/name`. If empty, it will be defaulted: 1. If it's a kubelet
        client certificate, it is assigned "kubernetes.io/kube-apiserver-client-kubelet".
        2. If it's a kubelet serving certificate, it is assigned
        "kubernetes.io/kubelet-serving". 3. Otherwise, it is assigned
        "kubernetes.io/legacy-unknown". Distribution of trust for signers happens out of
        band. You can select on this field using `spec.signerName`.
    uid: UID information about the requesting user. See user.Info interface for details.
    username: Information about the requesting user. See user.Info interface for details.
    extra: Extra information about the requesting user. See user.Info interface for
        details.
    groups: Group information about the requesting user. See user.Info interface for
        details.
    usages: allowedUsages specifies a set of usage contexts the key will be valid for.
        See: https://tools.ietf.org/html/rfc5280#section-4.2.1.3
        https://tools.ietf.org/html/rfc5280#section-4.2.1.12 Valid values are: "signing",
        "digital signature", "content commitment", "key encipherment", "key agreement",
        "data encipherment", "cert sign", "crl sign", "encipher only", "decipher only",
        "any", "server auth", "client auth", "code signing", "email protection", "s/mime",
        "ipsec end system", "ipsec tunnel", "ipsec user", "timestamping", "ocsp signing",
        "microsoft sgc", "netscape sgc"
    """

    request: str
    signerName: Optional[str] = None
    uid: Optional[str] = None
    username: Optional[str] = None
    extra: Optional[Dict[str, str]] = field(default_factory=dict)
    groups: Optional[List[str]] = field(default_factory=list)
    usages: Optional[List[str]] = field(default_factory=list)


@dataclass
class CertificateSigningRequestCondition(HikaruBase):
    """

    Full name: io.k8s.api.certificates.v1beta1.CertificateSigningRequestCondition

    Attributes:
    type: type of the condition. Known conditions include "Approved", "Denied", and
        "Failed".
    lastTransitionTime: lastTransitionTime is the time the condition last transitioned
        from one status to another. If unset, when a new condition type is added or an
        existing condition's status is changed, the server defaults this to the current
        time.
    lastUpdateTime: timestamp for the last update to this condition
    message: human readable message with details about the request state
    reason: brief reason for the request state
    status: Status of the condition, one of True, False, Unknown. Approved, Denied, and
        Failed conditions may not be "False" or "Unknown". Defaults to "True". If unset,
        should be treated as "True".
    """

    type: str
    lastTransitionTime: Optional[Time] = None
    lastUpdateTime: Optional[Time] = None
    message: Optional[str] = None
    reason: Optional[str] = None
    status: Optional[str] = None


@dataclass
class CertificateSigningRequestStatus(HikaruBase):
    """

    Full name: io.k8s.api.certificates.v1beta1.CertificateSigningRequestStatus

    Attributes:
    certificate: If request was approved, the controller will place the issued certificate
        here.
    conditions: Conditions applied to the request, such as approval or denial.
    """

    certificate: Optional[str] = None
    conditions: Optional[List[CertificateSigningRequestCondition]] = field(default_factory=list)


@dataclass
class CertificateSigningRequest(HikaruDocumentBase):
    """
    Describes a certificate signing request

    Full name: io.k8s.api.certificates.v1beta1.CertificateSigningRequest

    Attributes:
    apiVersion: APIVersion defines the versioned schema of this representation of an
        object. Servers should convert recognized schemas to the latest internal value,
        and may reject unrecognized values. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind: Kind is a string value representing the REST resource this object represents.
        Servers may infer this from the endpoint the client submits requests to. Cannot be
        updated. In CamelCase. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata:
    spec: The certificate request itself and any additional information.
    status: Derived information about the request.
    """

    _version = 'v1beta1'
    apiVersion: Optional[str] = None
    kind: Optional[str] = None
    metadata: Optional[ObjectMeta] = None
    spec: Optional[CertificateSigningRequestSpec] = None
    status: Optional[CertificateSigningRequestStatus] = None


@dataclass
class CertificateSigningRequestList(HikaruDocumentBase):
    """

    Full name: io.k8s.api.certificates.v1beta1.CertificateSigningRequestList

    Attributes:
    items:
    apiVersion: APIVersion defines the versioned schema of this representation of an
        object. Servers should convert recognized schemas to the latest internal value,
        and may reject unrecognized values. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind: Kind is a string value representing the REST resource this object represents.
        Servers may infer this from the endpoint the client submits requests to. Cannot be
        updated. In CamelCase. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata:
    """

    _version = 'v1beta1'
    items: List[CertificateSigningRequest]
    apiVersion: Optional[str] = None
    kind: Optional[str] = None
    metadata: Optional[ListMeta] = None


@dataclass
class LeaseSpec(HikaruBase):
    """
    LeaseSpec is a specification of a Lease.

    Full name: io.k8s.api.coordination.v1beta1.LeaseSpec

    Attributes:
    acquireTime: acquireTime is a time when the current lease was acquired.
    holderIdentity: holderIdentity contains the identity of the holder of a current lease.
    leaseDurationSeconds: leaseDurationSeconds is a duration that candidates for a lease
        need to wait to force acquire it. This is measure against time of last observed
        RenewTime.
    leaseTransitions: leaseTransitions is the number of transitions of a lease between
        holders.
    renewTime: renewTime is a time when the current holder of a lease has last updated the
        lease.
    """

    acquireTime: Optional[MicroTime] = None
    holderIdentity: Optional[str] = None
    leaseDurationSeconds: Optional[int] = None
    leaseTransitions: Optional[int] = None
    renewTime: Optional[MicroTime] = None


@dataclass
class Lease(HikaruDocumentBase):
    """
    Lease defines a lease concept.

    Full name: io.k8s.api.coordination.v1beta1.Lease

    Attributes:
    apiVersion: APIVersion defines the versioned schema of this representation of an
        object. Servers should convert recognized schemas to the latest internal value,
        and may reject unrecognized values. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind: Kind is a string value representing the REST resource this object represents.
        Servers may infer this from the endpoint the client submits requests to. Cannot be
        updated. In CamelCase. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata: More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    spec: Specification of the Lease. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
    """

    _version = 'v1beta1'
    apiVersion: Optional[str] = None
    kind: Optional[str] = None
    metadata: Optional[ObjectMeta] = None
    spec: Optional[LeaseSpec] = None


@dataclass
class LeaseList(HikaruDocumentBase):
    """
    LeaseList is a list of Lease objects.

    Full name: io.k8s.api.coordination.v1beta1.LeaseList

    Attributes:
    items: Items is a list of schema objects.
    apiVersion: APIVersion defines the versioned schema of this representation of an
        object. Servers should convert recognized schemas to the latest internal value,
        and may reject unrecognized values. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind: Kind is a string value representing the REST resource this object represents.
        Servers may infer this from the endpoint the client submits requests to. Cannot be
        updated. In CamelCase. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata: Standard list metadata. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    """

    _version = 'v1beta1'
    items: List[Lease]
    apiVersion: Optional[str] = None
    kind: Optional[str] = None
    metadata: Optional[ListMeta] = None


@dataclass
class EndpointConditions(HikaruBase):
    """
    EndpointConditions represents the current condition of an endpoint.

    Full name: io.k8s.api.discovery.v1beta1.EndpointConditions

    Attributes:
    ready: ready indicates that this endpoint is prepared to receive traffic, according to
        whatever system is managing the endpoint. A nil value indicates an unknown state.
        In most cases consumers should interpret this unknown state as ready. For
        compatibility reasons, ready should never be "true" for terminating endpoints.
    serving: serving is identical to ready except that it is set regardless of the
        terminating state of endpoints. This condition should be set to true for a ready
        endpoint that is terminating. If nil, consumers should defer to the ready
        condition. This field can be enabled with the EndpointSliceTerminatingCondition
        feature gate.
    terminating: terminating indicates that this endpoint is terminating. A nil value
        indicates an unknown state. Consumers should interpret this unknown state to mean
        that the endpoint is not terminating. This field can be enabled with the
        EndpointSliceTerminatingCondition feature gate.
    """

    ready: Optional[bool] = None
    serving: Optional[bool] = None
    terminating: Optional[bool] = None


@dataclass
class Endpoint(HikaruBase):
    """
    Endpoint represents a single logical "backend" implementing a service.

    Full name: io.k8s.api.discovery.v1beta1.Endpoint

    Attributes:
    addresses: addresses of this endpoint. The contents of this field are interpreted
        according to the corresponding EndpointSlice addressType field. Consumers must
        handle different types of addresses in the context of their own capabilities. This
        must contain at least one address but no more than 100.
    conditions: conditions contains information about the current status of the endpoint.
    hostname: hostname of this endpoint. This field may be used by consumers of endpoints
        to distinguish endpoints from each other (e.g. in DNS names). Multiple endpoints
        which use the same hostname should be considered fungible (e.g. multiple A values
        in DNS). Must be lowercase and pass DNS Label (RFC 1123) validation.
    nodeName: nodeName represents the name of the Node hosting this endpoint. This can be
        used to determine endpoints local to a Node. This field can be enabled with the
        EndpointSliceNodeName feature gate.
    targetRef: targetRef is a reference to a Kubernetes object that represents this
        endpoint.
    topology: topology contains arbitrary topology information associated with the
        endpoint. These key/value pairs must conform with the label format.
        https://kubernetes.io/docs/concepts/overview/working-with-objects/labels Topology
        may include a maximum of 16 key/value pairs. This includes, but is not limited to
        the following well known keys: * kubernetes.io/hostname: the value indicates the
        hostname of the node where the endpoint is located. This should match the
        corresponding node label. * topology.kubernetes.io/zone: the value indicates the
        zone where the endpoint is located. This should match the corresponding node
        label. * topology.kubernetes.io/region: the value indicates the region where the
        endpoint is located. This should match the corresponding node label. This field is
        deprecated and will be removed in future api versions.
    """

    addresses: List[str]
    conditions: Optional[EndpointConditions] = None
    hostname: Optional[str] = None
    nodeName: Optional[str] = None
    targetRef: Optional[ObjectReference] = None
    topology: Optional[Dict[str, str]] = field(default_factory=dict)


@dataclass
class EndpointPort(HikaruBase):
    """
    EndpointPort represents a Port used by an EndpointSlice

    Full name: io.k8s.api.discovery.v1beta1.EndpointPort

    Attributes:
    appProtocol: The application protocol for this port. This field follows standard
        Kubernetes label syntax. Un-prefixed names are reserved for IANA standard service
        names (as per RFC-6335 and http://www.iana.org/assignments/service-names).
        Non-standard protocols should use prefixed names such as
        mycompany.com/my-custom-protocol.
    name: The name of this port. All ports in an EndpointSlice must have a unique name. If
        the EndpointSlice is dervied from a Kubernetes service, this corresponds to the
        Service.ports[].name. Name must either be an empty string or pass DNS_LABEL
        validation: * must be no more than 63 characters long. * must consist of lower
        case alphanumeric characters or '-'. * must start and end with an alphanumeric
        character. Default is empty string.
    port: The port number of the endpoint. If this is not specified, ports are not
        restricted and must be interpreted in the context of the specific consumer.
    protocol: The IP protocol for this port. Must be UDP, TCP, or SCTP. Default is TCP.
    """

    appProtocol: Optional[str] = None
    name: Optional[str] = None
    port: Optional[int] = None
    protocol: Optional[str] = None


@dataclass
class EndpointSlice(HikaruDocumentBase):
    """
    EndpointSlice represents a subset of the endpoints that implement a service. For a
    given service there may be multiple EndpointSlice objects, selected by labels, which
    must be joined to produce the full set of endpoints.

    Full name: io.k8s.api.discovery.v1beta1.EndpointSlice

    Attributes:
    addressType: addressType specifies the type of address carried by this EndpointSlice.
        All addresses in this slice must be the same type. This field is immutable after
        creation. The following address types are currently supported: * IPv4: Represents
        an IPv4 Address. * IPv6: Represents an IPv6 Address. * FQDN: Represents a Fully
        Qualified Domain Name.
    endpoints: endpoints is a list of unique endpoints in this slice. Each slice may
        include a maximum of 1000 endpoints.
    apiVersion: APIVersion defines the versioned schema of this representation of an
        object. Servers should convert recognized schemas to the latest internal value,
        and may reject unrecognized values. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind: Kind is a string value representing the REST resource this object represents.
        Servers may infer this from the endpoint the client submits requests to. Cannot be
        updated. In CamelCase. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata: Standard object's metadata.
    ports: ports specifies the list of network ports exposed by each endpoint in this
        slice. Each port must have a unique name. When ports is empty, it indicates that
        there are no defined ports. When a port is defined with a nil port value, it
        indicates "all ports". Each slice may include a maximum of 100 ports.
    """

    _version = 'v1beta1'
    addressType: str
    endpoints: List[Endpoint]
    apiVersion: Optional[str] = None
    kind: Optional[str] = None
    metadata: Optional[ObjectMeta] = None
    ports: Optional[List[EndpointPort]] = field(default_factory=list)


@dataclass
class EndpointSliceList(HikaruDocumentBase):
    """
    EndpointSliceList represents a list of endpoint slices

    Full name: io.k8s.api.discovery.v1beta1.EndpointSliceList

    Attributes:
    items: List of endpoint slices
    apiVersion: APIVersion defines the versioned schema of this representation of an
        object. Servers should convert recognized schemas to the latest internal value,
        and may reject unrecognized values. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind: Kind is a string value representing the REST resource this object represents.
        Servers may infer this from the endpoint the client submits requests to. Cannot be
        updated. In CamelCase. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata: Standard list metadata.
    """

    _version = 'v1beta1'
    items: List[EndpointSlice]
    apiVersion: Optional[str] = None
    kind: Optional[str] = None
    metadata: Optional[ListMeta] = None


@dataclass
class EventSeries(HikaruBase):
    """
    EventSeries contain information on series of events, i.e. thing that was/is happening
    continuously for some time.

    Full name: io.k8s.api.events.v1beta1.EventSeries

    Attributes:
    count: count is the number of occurrences in this series up to the last heartbeat
        time.
    lastObservedTime: lastObservedTime is the time when last Event from the series was
        seen before last heartbeat.
    """

    count: int
    lastObservedTime: MicroTime


@dataclass
class Event(HikaruDocumentBase):
    """
    Event is a report of an event somewhere in the cluster. It generally denotes some
    state change in the system. Events have a limited retention time and triggers and
    messages may evolve with time. Event consumers should not rely on the timing of an
    event with a given Reason reflecting a consistent underlying trigger, or the continued
    existence of events with that Reason. Events should be treated as informative,
    best-effort, supplemental data.

    Full name: io.k8s.api.events.v1beta1.Event

    Attributes:
    eventTime: eventTime is the time when this Event was first observed. It is required.
    metadata:
    action: action is what action was taken/failed regarding to the regarding object. It
        is machine-readable. This field can have at most 128 characters.
    apiVersion: APIVersion defines the versioned schema of this representation of an
        object. Servers should convert recognized schemas to the latest internal value,
        and may reject unrecognized values. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    deprecatedCount: deprecatedCount is the deprecated field assuring backward
        compatibility with core.v1 Event type.
    deprecatedFirstTimestamp: deprecatedFirstTimestamp is the deprecated field assuring
        backward compatibility with core.v1 Event type.
    deprecatedLastTimestamp: deprecatedLastTimestamp is the deprecated field assuring
        backward compatibility with core.v1 Event type.
    deprecatedSource: deprecatedSource is the deprecated field assuring backward
        compatibility with core.v1 Event type.
    kind: Kind is a string value representing the REST resource this object represents.
        Servers may infer this from the endpoint the client submits requests to. Cannot be
        updated. In CamelCase. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    note: note is a human-readable description of the status of this operation. Maximal
        length of the note is 1kB, but libraries should be prepared to handle values up to
        64kB.
    reason: reason is why the action was taken. It is human-readable. This field can have
        at most 128 characters.
    regarding: regarding contains the object this Event is about. In most cases it's an
        Object reporting controller implements, e.g. ReplicaSetController implements
        ReplicaSets and this event is emitted because it acts on some changes in a
        ReplicaSet object.
    related: related is the optional secondary object for more complex actions. E.g. when
        regarding object triggers a creation or deletion of related object.
    reportingController: reportingController is the name of the controller that emitted
        this Event, e.g. `kubernetes.io/kubelet`. This field cannot be empty for new
        Events.
    reportingInstance: reportingInstance is the ID of the controller instance, e.g.
        `kubelet-xyzf`. This field cannot be empty for new Events and it can have at most
        128 characters.
    series: series is data about the Event series this event represents or nil if it's a
        singleton Event.
    type: type is the type of this event (Normal, Warning), new types could be added in
        the future. It is machine-readable.
    """

    _version = 'v1beta1'
    eventTime: MicroTime
    metadata: ObjectMeta
    action: Optional[str] = None
    apiVersion: Optional[str] = None
    deprecatedCount: Optional[int] = None
    deprecatedFirstTimestamp: Optional[Time] = None
    deprecatedLastTimestamp: Optional[Time] = None
    deprecatedSource: Optional[EventSource] = None
    kind: Optional[str] = None
    note: Optional[str] = None
    reason: Optional[str] = None
    regarding: Optional[ObjectReference] = None
    related: Optional[ObjectReference] = None
    reportingController: Optional[str] = None
    reportingInstance: Optional[str] = None
    series: Optional[EventSeries] = None
    type: Optional[str] = None


@dataclass
class EventList(HikaruDocumentBase):
    """
    EventList is a list of Event objects.

    Full name: io.k8s.api.events.v1beta1.EventList

    Attributes:
    items: items is a list of schema objects.
    apiVersion: APIVersion defines the versioned schema of this representation of an
        object. Servers should convert recognized schemas to the latest internal value,
        and may reject unrecognized values. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind: Kind is a string value representing the REST resource this object represents.
        Servers may infer this from the endpoint the client submits requests to. Cannot be
        updated. In CamelCase. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata: Standard list metadata. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    """

    _version = 'v1beta1'
    items: List[Event]
    apiVersion: Optional[str] = None
    kind: Optional[str] = None
    metadata: Optional[ListMeta] = None


@dataclass
class IngressBackend(HikaruBase):
    """
    IngressBackend describes all endpoints for a given service and port.

    Full name: io.k8s.api.extensions.v1beta1.IngressBackend

    Attributes:
    resource: Resource is an ObjectRef to another Kubernetes resource in the namespace of
        the Ingress object. If resource is specified, serviceName and servicePort must not
        be specified.
    serviceName: Specifies the name of the referenced service.
    servicePort: Specifies the port of the referenced service.
    """

    resource: Optional[TypedLocalObjectReference] = None
    serviceName: Optional[str] = None
    servicePort: Optional[IntOrString] = None


@dataclass
class HTTPIngressPath(HikaruBase):
    """
    HTTPIngressPath associates a path with a backend. Incoming urls matching the path are
    forwarded to the backend.

    Full name: io.k8s.api.extensions.v1beta1.HTTPIngressPath

    Attributes:
    backend: Backend defines the referenced service endpoint to which the traffic will be
        forwarded to.
    path: Path is matched against the path of an incoming request. Currently it can
        contain characters disallowed from the conventional "path" part of a URL as
        defined by RFC 3986. Paths must begin with a '/'. When unspecified, all paths from
        incoming requests are matched.
    pathType: PathType determines the interpretation of the Path matching. PathType can be
        one of the following values: * Exact: Matches the URL path exactly. * Prefix:
        Matches based on a URL path prefix split by '/'. Matching is done on a path
        element by element basis. A path element refers is the list of labels in the path
        split by the '/' separator. A request is a match for path p if every p is an
        element-wise prefix of p of the request path. Note that if the last element of the
        path is a substring of the last element in request path, it is not a match (e.g.
        /foo/bar matches /foo/bar/baz, but does not match /foo/barbaz). *
        ImplementationSpecific: Interpretation of the Path matching is up to the
        IngressClass. Implementations can treat this as a separate PathType or treat it
        identically to Prefix or Exact path types. Implementations are required to support
        all path types. Defaults to ImplementationSpecific.
    """

    backend: IngressBackend
    path: Optional[str] = None
    pathType: Optional[str] = None


@dataclass
class HTTPIngressRuleValue(HikaruBase):
    """
    HTTPIngressRuleValue is a list of http selectors pointing to backends. In the example:
    http://<host>/<path>?<searchpart> -> backend where where parts of the url correspond
    to RFC 3986, this resource will be used to match against everything after the last '/'
    and before the first '?' or '#'.

    Full name: io.k8s.api.extensions.v1beta1.HTTPIngressRuleValue

    Attributes:
    paths: A collection of paths that map requests to backends.
    """

    paths: List[HTTPIngressPath]


@dataclass
class IngressRule(HikaruBase):
    """
    IngressRule represents the rules mapping the paths under a specified host to the
    related backend services. Incoming requests are first evaluated for a host match, then
    routed to the backend associated with the matching IngressRuleValue.

    Full name: io.k8s.api.extensions.v1beta1.IngressRule

    Attributes:
    host: Host is the fully qualified domain name of a network host, as defined by RFC
        3986. Note the following deviations from the "host" part of the URI as defined in
        RFC 3986: 1. IPs are not allowed. Currently an IngressRuleValue can only apply to
        the IP in the Spec of the parent Ingress. 2. The `:` delimiter is not respected
        because ports are not allowed. Currently the port of an Ingress is implicitly :80
        for http and :443 for https. Both these may change in the future. Incoming
        requests are matched against the host before the IngressRuleValue. If the host is
        unspecified, the Ingress routes all traffic based on the specified
        IngressRuleValue. Host can be "precise" which is a domain name without the
        terminating dot of a network host (e.g. "foo.bar.com") or "wildcard", which is a
        domain name prefixed with a single wildcard label (e.g. "*.foo.com"). The wildcard
        character '*' must appear by itself as the first DNS label and matches only a
        single label. You cannot have a wildcard label by itself (e.g. Host == "*").
        Requests will be matched against the Host field in the following way: 1. If Host
        is precise, the request matches this rule if the http host header is equal to
        Host. 2. If Host is a wildcard, then the request matches this rule if the http
        host header is to equal to the suffix (removing the first label) of the wildcard
        rule.
    http:
    """

    host: Optional[str] = None
    http: Optional[HTTPIngressRuleValue] = None


@dataclass
class IngressTLS(HikaruBase):
    """
    IngressTLS describes the transport layer security associated with an Ingress.

    Full name: io.k8s.api.extensions.v1beta1.IngressTLS

    Attributes:
    secretName: SecretName is the name of the secret used to terminate TLS traffic on port
        443. Field is left optional to allow TLS routing based on SNI hostname alone. If
        the SNI host in a listener conflicts with the "Host" header field used by an
        IngressRule, the SNI host is used for termination and value of the Host header is
        used for routing.
    hosts: Hosts are a list of hosts included in the TLS certificate. The values in this
        list must match the name/s used in the tlsSecret. Defaults to the wildcard host
        setting for the loadbalancer controller fulfilling this Ingress, if left
        unspecified.
    """

    secretName: Optional[str] = None
    hosts: Optional[List[str]] = field(default_factory=list)


@dataclass
class IngressSpec(HikaruBase):
    """
    IngressSpec describes the Ingress the user wishes to exist.

    Full name: io.k8s.api.extensions.v1beta1.IngressSpec

    Attributes:
    backend: A default backend capable of servicing requests that don't match any rule. At
        least one of 'backend' or 'rules' must be specified. This field is optional to
        allow the loadbalancer controller or defaulting logic to specify a global default.
    ingressClassName: IngressClassName is the name of the IngressClass cluster resource.
        The associated IngressClass defines which controller will implement the resource.
        This replaces the deprecated `kubernetes.io/ingress.class` annotation. For
        backwards compatibility, when that annotation is set, it must be given precedence
        over this field. The controller may emit a warning if the field and annotation
        have different values. Implementations of this API should ignore Ingresses without
        a class specified. An IngressClass resource may be marked as default, which can be
        used to set a default value for this field. For more information, refer to the
        IngressClass documentation.
    rules: A list of host rules used to configure the Ingress. If unspecified, or no rule
        matches, all traffic is sent to the default backend.
    tls: TLS configuration. Currently the Ingress only supports a single TLS port, 443. If
        multiple members of this list specify different hosts, they will be multiplexed on
        the same port according to the hostname specified through the SNI TLS extension,
        if the ingress controller fulfilling the ingress supports SNI.
    """

    backend: Optional[IngressBackend] = None
    ingressClassName: Optional[str] = None
    rules: Optional[List[IngressRule]] = field(default_factory=list)
    tls: Optional[List[IngressTLS]] = field(default_factory=list)


@dataclass
class IngressStatus(HikaruBase):
    """
    IngressStatus describe the current state of the Ingress.

    Full name: io.k8s.api.extensions.v1beta1.IngressStatus

    Attributes:
    loadBalancer: LoadBalancer contains the current status of the load-balancer.
    """

    loadBalancer: Optional[LoadBalancerStatus] = None


@dataclass
class Ingress(HikaruDocumentBase):
    """
    Ingress is a collection of rules that allow inbound connections to reach the endpoints
    defined by a backend. An Ingress can be configured to give services
    externally-reachable urls, load balance traffic, terminate SSL, offer name based
    virtual hosting etc.

    Full name: io.k8s.api.extensions.v1beta1.Ingress

    Attributes:
    apiVersion: APIVersion defines the versioned schema of this representation of an
        object. Servers should convert recognized schemas to the latest internal value,
        and may reject unrecognized values. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind: Kind is a string value representing the REST resource this object represents.
        Servers may infer this from the endpoint the client submits requests to. Cannot be
        updated. In CamelCase. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata: Standard object's metadata. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    spec: Spec is the desired state of the Ingress. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
    status: Status is the current state of the Ingress. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
    """

    _version = 'v1beta1'
    apiVersion: Optional[str] = None
    kind: Optional[str] = None
    metadata: Optional[ObjectMeta] = None
    spec: Optional[IngressSpec] = None
    status: Optional[IngressStatus] = None


@dataclass
class IngressList(HikaruDocumentBase):
    """
    IngressList is a collection of Ingress.

    Full name: io.k8s.api.extensions.v1beta1.IngressList

    Attributes:
    items: Items is the list of Ingress.
    apiVersion: APIVersion defines the versioned schema of this representation of an
        object. Servers should convert recognized schemas to the latest internal value,
        and may reject unrecognized values. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind: Kind is a string value representing the REST resource this object represents.
        Servers may infer this from the endpoint the client submits requests to. Cannot be
        updated. In CamelCase. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata: Standard object's metadata. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    """

    _version = 'v1beta1'
    items: List[Ingress]
    apiVersion: Optional[str] = None
    kind: Optional[str] = None
    metadata: Optional[ListMeta] = None


@dataclass
class PriorityLevelConfigurationReference(HikaruBase):
    """
    PriorityLevelConfigurationReference contains information that points to the
    "request-priority" being used.

    Full name: io.k8s.api.flowcontrol.v1beta1.PriorityLevelConfigurationReference

    Attributes:
    name: `name` is the name of the priority level configuration being referenced
        Required.
    """

    name: str


@dataclass
class FlowDistinguisherMethod(HikaruBase):
    """
    FlowDistinguisherMethod specifies the method of a flow distinguisher.

    Full name: io.k8s.api.flowcontrol.v1beta1.FlowDistinguisherMethod

    Attributes:
    type: `type` is the type of flow distinguisher method The supported types are "ByUser"
        and "ByNamespace". Required.
    """

    type: str


@dataclass
class Subject(HikaruBase):
    """
    Subject contains a reference to the object or user identities a role binding applies
    to. This can either hold a direct API object reference, or a value for non-objects
    such as user and group names.

    Full name: io.k8s.api.flowcontrol.v1beta1.Subject

    Attributes:
    kind: Kind of object being referenced. Values defined by this API group are "User",
        "Group", and "ServiceAccount". If the Authorizer does not recognized the kind
        value, the Authorizer should report an error.
    name: Name of the object being referenced.
    apiGroup: APIGroup holds the API group of the referenced subject. Defaults to "" for
        ServiceAccount subjects. Defaults to "rbac.authorization.k8s.io" for User and
        Group subjects.
    namespace: Namespace of the referenced object. If the object kind is non-namespace,
        such as "User" or "Group", and this value is not empty the Authorizer should
        report an error.
    """

    kind: str
    name: str
    apiGroup: Optional[str] = None
    namespace: Optional[str] = None


@dataclass
class NonResourcePolicyRule(HikaruBase):
    """
    NonResourcePolicyRule is a predicate that matches non-resource requests according to
    their verb and the target non-resource URL. A NonResourcePolicyRule matches a request
    if and only if both (a) at least one member of verbs matches the request and (b) at
    least one member of nonResourceURLs matches the request.

    Full name: io.k8s.api.flowcontrol.v1beta1.NonResourcePolicyRule

    Attributes:
    nonResourceURLs: `nonResourceURLs` is a set of url prefixes that a user should have
        access to and may not be empty. For example: - "/healthz" is legal - "/hea*" is
        illegal - "/hea" is legal but matches nothing - "/hea/*" also matches nothing -
        "/healthz/*" matches all per-component health checks. "*" matches all non-resource
        urls. if it is present, it must be the only entry. Required.
    verbs: `verbs` is a list of matching verbs and may not be empty. "*" matches all
        verbs. If it is present, it must be the only entry. Required.
    """

    nonResourceURLs: List[str]
    verbs: List[str]


@dataclass
class ResourcePolicyRule(HikaruBase):
    """
    ResourcePolicyRule is a predicate that matches some resource requests, testing the
    request's verb and the target resource. A ResourcePolicyRule matches a resource
    request if and only if: (a) at least one member of verbs matches the request, (b) at
    least one member of apiGroups matches the request, (c) at least one member of
    resources matches the request, and (d) least one member of namespaces matches the
    request.

    Full name: io.k8s.api.flowcontrol.v1beta1.ResourcePolicyRule

    Attributes:
    apiGroups: `apiGroups` is a list of matching API groups and may not be empty. "*"
        matches all API groups and, if present, must be the only entry. Required.
    resources: `resources` is a list of matching resources (i.e., lowercase and plural)
        with, if desired, subresource. For example, [ "services", "nodes/status" ]. This
        list may not be empty. "*" matches all resources and, if present, must be the only
        entry. Required.
    verbs: `verbs` is a list of matching verbs and may not be empty. "*" matches all verbs
        and, if present, must be the only entry. Required.
    clusterScope: `clusterScope` indicates whether to match requests that do not specify a
        namespace (which happens either because the resource is not namespaced or the
        request targets all namespaces). If this field is omitted or false then the
        `namespaces` field must contain a non-empty list.
    namespaces: `namespaces` is a list of target namespaces that restricts matches. A
        request that specifies a target namespace matches only if either (a) this list
        contains that target namespace or (b) this list contains "*". Note that "*"
        matches any specified namespace but does not match a request that _does not
        specify_ a namespace (see the `clusterScope` field for that). This list may be
        empty, but only if `clusterScope` is true.
    """

    apiGroups: List[str]
    resources: List[str]
    verbs: List[str]
    clusterScope: Optional[bool] = None
    namespaces: Optional[List[str]] = field(default_factory=list)


@dataclass
class PolicyRulesWithSubjects(HikaruBase):
    """
    PolicyRulesWithSubjects prescribes a test that applies to a request to an apiserver.
    The test considers the subject making the request, the verb being requested, and the
    resource to be acted upon. This PolicyRulesWithSubjects matches a request if and only
    if both (a) at least one member of subjects matches the request and (b) at least one
    member of resourceRules or nonResourceRules matches the request.

    Full name: io.k8s.api.flowcontrol.v1beta1.PolicyRulesWithSubjects

    Attributes:
    subjects: subjects is the list of normal user, serviceaccount, or group that this rule
        cares about. There must be at least one member in this slice. A slice that
        includes both the system:authenticated and system:unauthenticated user groups
        matches every request. Required.
    nonResourceRules: `nonResourceRules` is a list of NonResourcePolicyRules that identify
        matching requests according to their verb and the target non-resource URL.
    resourceRules: `resourceRules` is a slice of ResourcePolicyRules that identify
        matching requests according to their verb and the target resource. At least one of
        `resourceRules` and `nonResourceRules` has to be non-empty.
    """

    subjects: List[Subject]
    nonResourceRules: Optional[List[NonResourcePolicyRule]] = field(default_factory=list)
    resourceRules: Optional[List[ResourcePolicyRule]] = field(default_factory=list)


@dataclass
class FlowSchemaSpec(HikaruBase):
    """
    FlowSchemaSpec describes how the FlowSchema's specification looks like.

    Full name: io.k8s.api.flowcontrol.v1beta1.FlowSchemaSpec

    Attributes:
    priorityLevelConfiguration: `priorityLevelConfiguration` should reference a
        PriorityLevelConfiguration in the cluster. If the reference cannot be resolved,
        the FlowSchema will be ignored and marked as invalid in its status. Required.
    distinguisherMethod: `distinguisherMethod` defines how to compute the flow
        distinguisher for requests that match this schema. `nil` specifies that the
        distinguisher is disabled and thus will always be the empty string.
    matchingPrecedence: `matchingPrecedence` is used to choose among the FlowSchemas that
        match a given request. The chosen FlowSchema is among those with the numerically
        lowest (which we take to be logically highest) MatchingPrecedence. Each
        MatchingPrecedence value must be ranged in [1,10000]. Note that if the precedence
        is not specified, it will be set to 1000 as default.
    rules: `rules` describes which requests will match this flow schema. This FlowSchema
        matches a request if and only if at least one member of rules matches the request.
        if it is an empty slice, there will be no requests matching the FlowSchema.
    """

    priorityLevelConfiguration: PriorityLevelConfigurationReference
    distinguisherMethod: Optional[FlowDistinguisherMethod] = None
    matchingPrecedence: Optional[int] = None
    rules: Optional[List[PolicyRulesWithSubjects]] = field(default_factory=list)


@dataclass
class FlowSchemaCondition(HikaruBase):
    """
    FlowSchemaCondition describes conditions for a FlowSchema.

    Full name: io.k8s.api.flowcontrol.v1beta1.FlowSchemaCondition

    Attributes:
    lastTransitionTime: `lastTransitionTime` is the last time the condition transitioned
        from one status to another.
    message: `message` is a human-readable message indicating details about last
        transition.
    reason: `reason` is a unique, one-word, CamelCase reason for the condition's last
        transition.
    status: `status` is the status of the condition. Can be True, False, Unknown.
        Required.
    type: `type` is the type of the condition. Required.
    """

    lastTransitionTime: Optional[Time] = None
    message: Optional[str] = None
    reason: Optional[str] = None
    status: Optional[str] = None
    type: Optional[str] = None


@dataclass
class FlowSchemaStatus(HikaruBase):
    """
    FlowSchemaStatus represents the current state of a FlowSchema.

    Full name: io.k8s.api.flowcontrol.v1beta1.FlowSchemaStatus

    Attributes:
    conditions: `conditions` is a list of the current states of FlowSchema.
    """

    conditions: Optional[List[FlowSchemaCondition]] = field(default_factory=list)


@dataclass
class FlowSchema(HikaruDocumentBase):
    """
    FlowSchema defines the schema of a group of flows. Note that a flow is made up of a
    set of inbound API requests with similar attributes and is identified by a pair of
    strings: the name of the FlowSchema and a "flow distinguisher".

    Full name: io.k8s.api.flowcontrol.v1beta1.FlowSchema

    Attributes:
    apiVersion: APIVersion defines the versioned schema of this representation of an
        object. Servers should convert recognized schemas to the latest internal value,
        and may reject unrecognized values. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind: Kind is a string value representing the REST resource this object represents.
        Servers may infer this from the endpoint the client submits requests to. Cannot be
        updated. In CamelCase. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata: `metadata` is the standard object's metadata. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    spec: `spec` is the specification of the desired behavior of a FlowSchema. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
    status: `status` is the current status of a FlowSchema. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
    """

    _version = 'v1beta1'
    apiVersion: Optional[str] = None
    kind: Optional[str] = None
    metadata: Optional[ObjectMeta] = None
    spec: Optional[FlowSchemaSpec] = None
    status: Optional[FlowSchemaStatus] = None


@dataclass
class FlowSchemaList(HikaruDocumentBase):
    """
    FlowSchemaList is a list of FlowSchema objects.

    Full name: io.k8s.api.flowcontrol.v1beta1.FlowSchemaList

    Attributes:
    items: `items` is a list of FlowSchemas.
    apiVersion: APIVersion defines the versioned schema of this representation of an
        object. Servers should convert recognized schemas to the latest internal value,
        and may reject unrecognized values. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind: Kind is a string value representing the REST resource this object represents.
        Servers may infer this from the endpoint the client submits requests to. Cannot be
        updated. In CamelCase. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata: `metadata` is the standard list metadata. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    """

    _version = 'v1beta1'
    items: List[FlowSchema]
    apiVersion: Optional[str] = None
    kind: Optional[str] = None
    metadata: Optional[ListMeta] = None


@dataclass
class GroupSubject(HikaruBase):
    """
    GroupSubject holds detailed information for group-kind subject.

    Full name: io.k8s.api.flowcontrol.v1beta1.GroupSubject

    Attributes:
    name: name is the user group that matches, or "*" to match all user groups. See
        https://github.com/kubernetes/apiserver/blob/master/pkg/authentication/user/user.go
        for some well-known group names. Required.
    """

    name: str


@dataclass
class QueuingConfiguration(HikaruBase):
    """
    QueuingConfiguration holds the configuration parameters for queuing

    Full name: io.k8s.api.flowcontrol.v1beta1.QueuingConfiguration

    Attributes:
    handSize: `handSize` is a small positive number that configures the shuffle sharding
        of requests into queues. When enqueuing a request at this priority level the
        request's flow identifier (a string pair) is hashed and the hash value is used to
        shuffle the list of queues and deal a hand of the size specified here. The request
        is put into one of the shortest queues in that hand. `handSize` must be no larger
        than `queues`, and should be significantly smaller (so that a few heavy flows do
        not saturate most of the queues). See the user-facing documentation for more
        extensive guidance on setting this field. This field has a default value of 8.
    queueLengthLimit: `queueLengthLimit` is the maximum number of requests allowed to be
        waiting in a given queue of this priority level at a time; excess requests are
        rejected. This value must be positive. If not specified, it will be defaulted to
        50.
    queues: `queues` is the number of queues for this priority level. The queues exist
        independently at each apiserver. The value must be positive. Setting it to 1
        effectively precludes shufflesharding and thus makes the distinguisher method of
        associated flow schemas irrelevant. This field has a default value of 64.
    """

    handSize: Optional[int] = None
    queueLengthLimit: Optional[int] = None
    queues: Optional[int] = None


@dataclass
class LimitResponse(HikaruBase):
    """
    LimitResponse defines how to handle requests that can not be executed right now.

    Full name: io.k8s.api.flowcontrol.v1beta1.LimitResponse

    Attributes:
    type: `type` is "Queue" or "Reject". "Queue" means that requests that can not be
        executed upon arrival are held in a queue until they can be executed or a queuing
        limit is reached. "Reject" means that requests that can not be executed upon
        arrival are rejected. Required.
    queuing: `queuing` holds the configuration parameters for queuing. This field may be
        non-empty only if `type` is `"Queue"`.
    """

    type: str
    queuing: Optional[QueuingConfiguration] = None


@dataclass
class LimitedPriorityLevelConfiguration(HikaruBase):
    """
    LimitedPriorityLevelConfiguration specifies how to handle requests that are subject to
    limits. It addresses two issues: * How are requests for this priority level limited? *
    What should be done with requests that exceed the limit?

    Full name: io.k8s.api.flowcontrol.v1beta1.LimitedPriorityLevelConfiguration

    Attributes:
    assuredConcurrencyShares: `assuredConcurrencyShares` (ACS) configures the execution
        limit, which is a limit on the number of requests of this priority level that may
        be exeucting at a given time. ACS must be a positive number. The server's
        concurrency limit (SCL) is divided among the concurrency-controlled priority
        levels in proportion to their assured concurrency shares. This produces the
        assured concurrency value (ACV) --- the number of requests that may be executing
        at a time --- for each such priority level: ACV(l) = ceil( SCL * ACS(l) / (
        sum[priority levels k] ACS(k) ) ) bigger numbers of ACS mean more reserved
        concurrent requests (at the expense of every other PL). This field has a default
        value of 30.
    limitResponse: `limitResponse` indicates what to do with requests that can not be
        executed right now
    """

    assuredConcurrencyShares: Optional[int] = None
    limitResponse: Optional[LimitResponse] = None


@dataclass
class PriorityLevelConfigurationSpec(HikaruBase):
    """
    PriorityLevelConfigurationSpec specifies the configuration of a priority level.

    Full name: io.k8s.api.flowcontrol.v1beta1.PriorityLevelConfigurationSpec

    Attributes:
    type: `type` indicates whether this priority level is subject to limitation on request
        execution. A value of `"Exempt"` means that requests of this priority level are
        not subject to a limit (and thus are never queued) and do not detract from the
        capacity made available to other priority levels. A value of `"Limited"` means
        that (a) requests of this priority level _are_ subject to limits and (b) some of
        the server's limited capacity is made available exclusively to this priority
        level. Required.
    limited: `limited` specifies how requests are handled for a Limited priority level.
        This field must be non-empty if and only if `type` is `"Limited"`.
    """

    type: str
    limited: Optional[LimitedPriorityLevelConfiguration] = None


@dataclass
class PriorityLevelConfigurationCondition(HikaruBase):
    """
    PriorityLevelConfigurationCondition defines the condition of priority level.

    Full name: io.k8s.api.flowcontrol.v1beta1.PriorityLevelConfigurationCondition

    Attributes:
    lastTransitionTime: `lastTransitionTime` is the last time the condition transitioned
        from one status to another.
    message: `message` is a human-readable message indicating details about last
        transition.
    reason: `reason` is a unique, one-word, CamelCase reason for the condition's last
        transition.
    status: `status` is the status of the condition. Can be True, False, Unknown.
        Required.
    type: `type` is the type of the condition. Required.
    """

    lastTransitionTime: Optional[Time] = None
    message: Optional[str] = None
    reason: Optional[str] = None
    status: Optional[str] = None
    type: Optional[str] = None


@dataclass
class PriorityLevelConfigurationStatus(HikaruBase):
    """
    PriorityLevelConfigurationStatus represents the current state of a "request-priority".

    Full name: io.k8s.api.flowcontrol.v1beta1.PriorityLevelConfigurationStatus

    Attributes:
    conditions: `conditions` is the current state of "request-priority".
    """

    conditions: Optional[List[PriorityLevelConfigurationCondition]] = field(default_factory=list)


@dataclass
class PriorityLevelConfiguration(HikaruDocumentBase):
    """
    PriorityLevelConfiguration represents the configuration of a priority level.

    Full name: io.k8s.api.flowcontrol.v1beta1.PriorityLevelConfiguration

    Attributes:
    apiVersion: APIVersion defines the versioned schema of this representation of an
        object. Servers should convert recognized schemas to the latest internal value,
        and may reject unrecognized values. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind: Kind is a string value representing the REST resource this object represents.
        Servers may infer this from the endpoint the client submits requests to. Cannot be
        updated. In CamelCase. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata: `metadata` is the standard object's metadata. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    spec: `spec` is the specification of the desired behavior of a "request-priority".
        More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
    status: `status` is the current status of a "request-priority". More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
    """

    _version = 'v1beta1'
    apiVersion: Optional[str] = None
    kind: Optional[str] = None
    metadata: Optional[ObjectMeta] = None
    spec: Optional[PriorityLevelConfigurationSpec] = None
    status: Optional[PriorityLevelConfigurationStatus] = None


@dataclass
class PriorityLevelConfigurationList(HikaruDocumentBase):
    """
    PriorityLevelConfigurationList is a list of PriorityLevelConfiguration objects.

    Full name: io.k8s.api.flowcontrol.v1beta1.PriorityLevelConfigurationList

    Attributes:
    items: `items` is a list of request-priorities.
    apiVersion: APIVersion defines the versioned schema of this representation of an
        object. Servers should convert recognized schemas to the latest internal value,
        and may reject unrecognized values. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind: Kind is a string value representing the REST resource this object represents.
        Servers may infer this from the endpoint the client submits requests to. Cannot be
        updated. In CamelCase. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata: `metadata` is the standard object's metadata. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    """

    _version = 'v1beta1'
    items: List[PriorityLevelConfiguration]
    apiVersion: Optional[str] = None
    kind: Optional[str] = None
    metadata: Optional[ListMeta] = None


@dataclass
class ServiceAccountSubject(HikaruBase):
    """
    ServiceAccountSubject holds detailed information for service-account-kind subject.

    Full name: io.k8s.api.flowcontrol.v1beta1.ServiceAccountSubject

    Attributes:
    name: `name` is the name of matching ServiceAccount objects, or "*" to match
        regardless of name. Required.
    namespace: `namespace` is the namespace of matching ServiceAccount objects. Required.
    """

    name: str
    namespace: str


@dataclass
class UserSubject(HikaruBase):
    """
    UserSubject holds detailed information for user-kind subject.

    Full name: io.k8s.api.flowcontrol.v1beta1.UserSubject

    Attributes:
    name: `name` is the username that matches, or "*" to match all usernames. Required.
    """

    name: str


@dataclass
class IngressClassSpec(HikaruBase):
    """
    IngressClassSpec provides information about the class of an Ingress.

    Full name: io.k8s.api.networking.v1beta1.IngressClassSpec

    Attributes:
    controller: Controller refers to the name of the controller that should handle this
        class. This allows for different "flavors" that are controlled by the same
        controller. For example, you may have different Parameters for the same
        implementing controller. This should be specified as a domain-prefixed path no
        more than 250 characters in length, e.g. "acme.io/ingress-controller". This field
        is immutable.
    parameters: Parameters is a link to a custom resource containing additional
        configuration for the controller. This is optional if the controller does not
        require extra parameters.
    """

    controller: Optional[str] = None
    parameters: Optional[TypedLocalObjectReference] = None


@dataclass
class IngressClass(HikaruDocumentBase):
    """
    IngressClass represents the class of the Ingress, referenced by the Ingress Spec. The
    `ingressclass.kubernetes.io/is-default-class` annotation can be used to indicate that
    an IngressClass should be considered default. When a single IngressClass resource has
    this annotation set to true, new Ingress resources without a class specified will be
    assigned this default class.

    Full name: io.k8s.api.networking.v1beta1.IngressClass

    Attributes:
    apiVersion: APIVersion defines the versioned schema of this representation of an
        object. Servers should convert recognized schemas to the latest internal value,
        and may reject unrecognized values. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind: Kind is a string value representing the REST resource this object represents.
        Servers may infer this from the endpoint the client submits requests to. Cannot be
        updated. In CamelCase. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata: Standard object's metadata. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    spec: Spec is the desired state of the IngressClass. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
    """

    _version = 'v1beta1'
    apiVersion: Optional[str] = None
    kind: Optional[str] = None
    metadata: Optional[ObjectMeta] = None
    spec: Optional[IngressClassSpec] = None


@dataclass
class IngressClassList(HikaruDocumentBase):
    """
    IngressClassList is a collection of IngressClasses.

    Full name: io.k8s.api.networking.v1beta1.IngressClassList

    Attributes:
    items: Items is the list of IngressClasses.
    apiVersion: APIVersion defines the versioned schema of this representation of an
        object. Servers should convert recognized schemas to the latest internal value,
        and may reject unrecognized values. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind: Kind is a string value representing the REST resource this object represents.
        Servers may infer this from the endpoint the client submits requests to. Cannot be
        updated. In CamelCase. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata: Standard list metadata.
    """

    _version = 'v1beta1'
    items: List[IngressClass]
    apiVersion: Optional[str] = None
    kind: Optional[str] = None
    metadata: Optional[ListMeta] = None


@dataclass
class Overhead(HikaruBase):
    """
    Overhead structure represents the resource overhead associated with running a pod.

    Full name: io.k8s.api.node.v1beta1.Overhead

    Attributes:
    podFixed: PodFixed represents the fixed resource overhead associated with running a
        pod.
    """

    podFixed: Optional[Dict[str, str]] = field(default_factory=dict)


@dataclass
class Scheduling(HikaruBase):
    """
    Scheduling specifies the scheduling constraints for nodes supporting a RuntimeClass.

    Full name: io.k8s.api.node.v1beta1.Scheduling

    Attributes:
    nodeSelector: nodeSelector lists labels that must be present on nodes that support
        this RuntimeClass. Pods using this RuntimeClass can only be scheduled to a node
        matched by this selector. The RuntimeClass nodeSelector is merged with a pod's
        existing nodeSelector. Any conflicts will cause the pod to be rejected in
        admission.
    tolerations: tolerations are appended (excluding duplicates) to pods running with this
        RuntimeClass during admission, effectively unioning the set of nodes tolerated by
        the pod and the RuntimeClass.
    """

    nodeSelector: Optional[Dict[str, str]] = field(default_factory=dict)
    tolerations: Optional[List[Toleration]] = field(default_factory=list)


@dataclass
class RuntimeClass(HikaruDocumentBase):
    """
    RuntimeClass defines a class of container runtime supported in the cluster. The
    RuntimeClass is used to determine which container runtime is used to run all
    containers in a pod. RuntimeClasses are (currently) manually defined by a user or
    cluster provisioner, and referenced in the PodSpec. The Kubelet is responsible for
    resolving the RuntimeClassName reference before running the pod. For more details, see
    https://git.k8s.io/enhancements/keps/sig-node/runtime-class.md

    Full name: io.k8s.api.node.v1beta1.RuntimeClass

    Attributes:
    handler: Handler specifies the underlying runtime and configuration that the CRI
        implementation will use to handle pods of this class. The possible values are
        specific to the node & CRI configuration. It is assumed that all handlers are
        available on every node, and handlers of the same name are equivalent on every
        node. For example, a handler called "runc" might specify that the runc OCI runtime
        (using native Linux containers) will be used to run the containers in a pod. The
        Handler must be lowercase, conform to the DNS Label (RFC 1123) requirements, and
        is immutable.
    apiVersion: APIVersion defines the versioned schema of this representation of an
        object. Servers should convert recognized schemas to the latest internal value,
        and may reject unrecognized values. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind: Kind is a string value representing the REST resource this object represents.
        Servers may infer this from the endpoint the client submits requests to. Cannot be
        updated. In CamelCase. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata: More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    overhead: Overhead represents the resource overhead associated with running a pod for
        a given RuntimeClass. For more details, see
        https://git.k8s.io/enhancements/keps/sig-node/20190226-pod-overhead.md This field
        is alpha-level as of Kubernetes v1.15, and is only honored by servers that enable
        the PodOverhead feature.
    scheduling: Scheduling holds the scheduling constraints to ensure that pods running
        with this RuntimeClass are scheduled to nodes that support it. If scheduling is
        nil, this RuntimeClass is assumed to be supported by all nodes.
    """

    _version = 'v1beta1'
    handler: str
    apiVersion: Optional[str] = None
    kind: Optional[str] = None
    metadata: Optional[ObjectMeta] = None
    overhead: Optional[Overhead] = None
    scheduling: Optional[Scheduling] = None


@dataclass
class RuntimeClassList(HikaruDocumentBase):
    """
    RuntimeClassList is a list of RuntimeClass objects.

    Full name: io.k8s.api.node.v1beta1.RuntimeClassList

    Attributes:
    items: Items is a list of schema objects.
    apiVersion: APIVersion defines the versioned schema of this representation of an
        object. Servers should convert recognized schemas to the latest internal value,
        and may reject unrecognized values. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind: Kind is a string value representing the REST resource this object represents.
        Servers may infer this from the endpoint the client submits requests to. Cannot be
        updated. In CamelCase. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata: Standard list metadata. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    """

    _version = 'v1beta1'
    items: List[RuntimeClass]
    apiVersion: Optional[str] = None
    kind: Optional[str] = None
    metadata: Optional[ListMeta] = None


@dataclass
class Eviction(HikaruDocumentBase):
    """
    Eviction evicts a pod from its node subject to certain policies and safety
    constraints. This is a subresource of Pod. A request to cause such an eviction is
    created by POSTing to .../pods/<pod name>/evictions.

    Full name: io.k8s.api.policy.v1beta1.Eviction

    Attributes:
    apiVersion: APIVersion defines the versioned schema of this representation of an
        object. Servers should convert recognized schemas to the latest internal value,
        and may reject unrecognized values. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    deleteOptions: DeleteOptions may be provided
    kind: Kind is a string value representing the REST resource this object represents.
        Servers may infer this from the endpoint the client submits requests to. Cannot be
        updated. In CamelCase. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata: ObjectMeta describes the pod that is being evicted.
    """

    _version = 'v1beta1'
    apiVersion: Optional[str] = None
    deleteOptions: Optional[DeleteOptions] = None
    kind: Optional[str] = None
    metadata: Optional[ObjectMeta] = None


@dataclass
class PodDisruptionBudgetSpec(HikaruBase):
    """
    PodDisruptionBudgetSpec is a description of a PodDisruptionBudget.

    Full name: io.k8s.api.policy.v1beta1.PodDisruptionBudgetSpec

    Attributes:
    maxUnavailable: An eviction is allowed if at most "maxUnavailable" pods selected by
        "selector" are unavailable after the eviction, i.e. even in absence of the evicted
        pod. For example, one can prevent all voluntary evictions by specifying 0. This is
        a mutually exclusive setting with "minAvailable".
    minAvailable: An eviction is allowed if at least "minAvailable" pods selected by
        "selector" will still be available after the eviction, i.e. even in the absence of
        the evicted pod. So for example you can prevent all voluntary evictions by
        specifying "100%".
    selector: Label query over pods whose evictions are managed by the disruption budget.
    """

    maxUnavailable: Optional[IntOrString] = None
    minAvailable: Optional[IntOrString] = None
    selector: Optional[LabelSelector] = None


@dataclass
class PodDisruptionBudgetStatus(HikaruBase):
    """
    PodDisruptionBudgetStatus represents information about the status of a
    PodDisruptionBudget. Status may trail the actual state of a system.

    Full name: io.k8s.api.policy.v1beta1.PodDisruptionBudgetStatus

    Attributes:
    currentHealthy: current number of healthy pods
    desiredHealthy: minimum desired number of healthy pods
    disruptionsAllowed: Number of pod disruptions that are currently allowed.
    expectedPods: total number of pods counted by this disruption budget
    observedGeneration: Most recent generation observed when updating this PDB status.
        DisruptionsAllowed and other status information is valid only if
        observedGeneration equals to PDB's object generation.
    disruptedPods: DisruptedPods contains information about pods whose eviction was
        processed by the API server eviction subresource handler but has not yet been
        observed by the PodDisruptionBudget controller. A pod will be in this map from the
        time when the API server processed the eviction request to the time when the pod
        is seen by PDB controller as having been marked for deletion (or after a timeout).
        The key in the map is the name of the pod and the value is the time when the API
        server processed the eviction request. If the deletion didn't occur and a pod is
        still there it will be removed from the list automatically by PodDisruptionBudget
        controller after some time. If everything goes smooth this map should be empty for
        the most of the time. Large number of entries in the map may indicate problems
        with pod deletions.
    """

    currentHealthy: int
    desiredHealthy: int
    disruptionsAllowed: int
    expectedPods: int
    observedGeneration: Optional[int] = None
    disruptedPods: Optional[Dict[str, str]] = field(default_factory=dict)


@dataclass
class PodDisruptionBudget(HikaruDocumentBase):
    """
    PodDisruptionBudget is an object to define the max disruption that can be caused to a
    collection of pods

    Full name: io.k8s.api.policy.v1beta1.PodDisruptionBudget

    Attributes:
    apiVersion: APIVersion defines the versioned schema of this representation of an
        object. Servers should convert recognized schemas to the latest internal value,
        and may reject unrecognized values. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind: Kind is a string value representing the REST resource this object represents.
        Servers may infer this from the endpoint the client submits requests to. Cannot be
        updated. In CamelCase. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata:
    spec: Specification of the desired behavior of the PodDisruptionBudget.
    status: Most recently observed status of the PodDisruptionBudget.
    """

    _version = 'v1beta1'
    apiVersion: Optional[str] = None
    kind: Optional[str] = None
    metadata: Optional[ObjectMeta] = None
    spec: Optional[PodDisruptionBudgetSpec] = None
    status: Optional[PodDisruptionBudgetStatus] = None


@dataclass
class PodDisruptionBudgetList(HikaruDocumentBase):
    """
    PodDisruptionBudgetList is a collection of PodDisruptionBudgets.

    Full name: io.k8s.api.policy.v1beta1.PodDisruptionBudgetList

    Attributes:
    items:
    apiVersion: APIVersion defines the versioned schema of this representation of an
        object. Servers should convert recognized schemas to the latest internal value,
        and may reject unrecognized values. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind: Kind is a string value representing the REST resource this object represents.
        Servers may infer this from the endpoint the client submits requests to. Cannot be
        updated. In CamelCase. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata:
    """

    _version = 'v1beta1'
    items: List[PodDisruptionBudget]
    apiVersion: Optional[str] = None
    kind: Optional[str] = None
    metadata: Optional[ListMeta] = None


@dataclass
class IDRange(HikaruBase):
    """
    IDRange provides a min/max of an allowed range of IDs.

    Full name: io.k8s.api.policy.v1beta1.IDRange

    Attributes:
    max: max is the end of the range, inclusive.
    min: min is the start of the range, inclusive.
    """

    max: int
    min: int


@dataclass
class FSGroupStrategyOptions(HikaruBase):
    """
    FSGroupStrategyOptions defines the strategy type and options used to create the
    strategy.

    Full name: io.k8s.api.policy.v1beta1.FSGroupStrategyOptions

    Attributes:
    rule: rule is the strategy that will dictate what FSGroup is used in the
        SecurityContext.
    ranges: ranges are the allowed ranges of fs groups. If you would like to force a
        single fs group then supply a single range with the same start and end. Required
        for MustRunAs.
    """

    rule: Optional[str] = None
    ranges: Optional[List[IDRange]] = field(default_factory=list)


@dataclass
class RunAsUserStrategyOptions(HikaruBase):
    """
    RunAsUserStrategyOptions defines the strategy type and any options used to create the
    strategy.

    Full name: io.k8s.api.policy.v1beta1.RunAsUserStrategyOptions

    Attributes:
    rule: rule is the strategy that will dictate the allowable RunAsUser values that may
        be set.
    ranges: ranges are the allowed ranges of uids that may be used. If you would like to
        force a single uid then supply a single range with the same start and end.
        Required for MustRunAs.
    """

    rule: str
    ranges: Optional[List[IDRange]] = field(default_factory=list)


@dataclass
class SELinuxStrategyOptions(HikaruBase):
    """
    SELinuxStrategyOptions defines the strategy type and any options used to create the
    strategy.

    Full name: io.k8s.api.policy.v1beta1.SELinuxStrategyOptions

    Attributes:
    rule: rule is the strategy that will dictate the allowable labels that may be set.
    seLinuxOptions: seLinuxOptions required to run as; required for MustRunAs More info:
        https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
    """

    rule: str
    seLinuxOptions: Optional[SELinuxOptions] = None


@dataclass
class SupplementalGroupsStrategyOptions(HikaruBase):
    """
    SupplementalGroupsStrategyOptions defines the strategy type and options used to create
    the strategy.

    Full name: io.k8s.api.policy.v1beta1.SupplementalGroupsStrategyOptions

    Attributes:
    rule: rule is the strategy that will dictate what supplemental groups is used in the
        SecurityContext.
    ranges: ranges are the allowed ranges of supplemental groups. If you would like to
        force a single supplemental group then supply a single range with the same start
        and end. Required for MustRunAs.
    """

    rule: Optional[str] = None
    ranges: Optional[List[IDRange]] = field(default_factory=list)


@dataclass
class AllowedCSIDriver(HikaruBase):
    """
    AllowedCSIDriver represents a single inline CSI Driver that is allowed to be used.

    Full name: io.k8s.api.policy.v1beta1.AllowedCSIDriver

    Attributes:
    name: Name is the registered name of the CSI driver
    """

    name: str


@dataclass
class AllowedFlexVolume(HikaruBase):
    """
    AllowedFlexVolume represents a single Flexvolume that is allowed to be used.

    Full name: io.k8s.api.policy.v1beta1.AllowedFlexVolume

    Attributes:
    driver: driver is the name of the Flexvolume driver.
    """

    driver: str


@dataclass
class AllowedHostPath(HikaruBase):
    """
    AllowedHostPath defines the host volume conditions that will be enabled by a policy
    for pods to use. It requires the path prefix to be defined.

    Full name: io.k8s.api.policy.v1beta1.AllowedHostPath

    Attributes:
    pathPrefix: pathPrefix is the path prefix that the host volume must match. It does not
        support `*`. Trailing slashes are trimmed when validating the path prefix with a
        host path. Examples: `/foo` would allow `/foo`, `/foo/` and `/foo/bar` `/foo`
        would not allow `/food` or `/etc/foo`
    readOnly: when set to true, will allow host volumes matching the pathPrefix only if
        all volume mounts are readOnly.
    """

    pathPrefix: Optional[str] = None
    readOnly: Optional[bool] = None


@dataclass
class HostPortRange(HikaruBase):
    """
    HostPortRange defines a range of host ports that will be enabled by a policy for pods
    to use. It requires both the start and end to be defined.

    Full name: io.k8s.api.policy.v1beta1.HostPortRange

    Attributes:
    max: max is the end of the range, inclusive.
    min: min is the start of the range, inclusive.
    """

    max: int
    min: int


@dataclass
class RunAsGroupStrategyOptions(HikaruBase):
    """
    RunAsGroupStrategyOptions defines the strategy type and any options used to create the
    strategy.

    Full name: io.k8s.api.policy.v1beta1.RunAsGroupStrategyOptions

    Attributes:
    rule: rule is the strategy that will dictate the allowable RunAsGroup values that may
        be set.
    ranges: ranges are the allowed ranges of gids that may be used. If you would like to
        force a single gid then supply a single range with the same start and end.
        Required for MustRunAs.
    """

    rule: str
    ranges: Optional[List[IDRange]] = field(default_factory=list)


@dataclass
class RuntimeClassStrategyOptions(HikaruBase):
    """
    RuntimeClassStrategyOptions define the strategy that will dictate the allowable
    RuntimeClasses for a pod.

    Full name: io.k8s.api.policy.v1beta1.RuntimeClassStrategyOptions

    Attributes:
    allowedRuntimeClassNames: allowedRuntimeClassNames is an allowlist of RuntimeClass
        names that may be specified on a pod. A value of "*" means that any RuntimeClass
        name is allowed, and must be the only item in the list. An empty list requires the
        RuntimeClassName field to be unset.
    defaultRuntimeClassName: defaultRuntimeClassName is the default RuntimeClassName to
        set on the pod. The default MUST be allowed by the allowedRuntimeClassNames list.
        A value of nil does not mutate the Pod.
    """

    allowedRuntimeClassNames: List[str]
    defaultRuntimeClassName: Optional[str] = None


@dataclass
class PodSecurityPolicySpec(HikaruBase):
    """
    PodSecurityPolicySpec defines the policy enforced.

    Full name: io.k8s.api.policy.v1beta1.PodSecurityPolicySpec

    Attributes:
    fsGroup: fsGroup is the strategy that will dictate what fs group is used by the
        SecurityContext.
    runAsUser: runAsUser is the strategy that will dictate the allowable RunAsUser values
        that may be set.
    seLinux: seLinux is the strategy that will dictate the allowable labels that may be
        set.
    supplementalGroups: supplementalGroups is the strategy that will dictate what
        supplemental groups are used by the SecurityContext.
    allowPrivilegeEscalation: allowPrivilegeEscalation determines if a pod can request to
        allow privilege escalation. If unspecified, defaults to true.
    defaultAllowPrivilegeEscalation: defaultAllowPrivilegeEscalation controls the default
        setting for whether a process can gain more privileges than its parent process.
    hostIPC: hostIPC determines if the policy allows the use of HostIPC in the pod spec.
    hostNetwork: hostNetwork determines if the policy allows the use of HostNetwork in the
        pod spec.
    hostPID: hostPID determines if the policy allows the use of HostPID in the pod spec.
    privileged: privileged determines if a pod can request to be run as privileged.
    readOnlyRootFilesystem: readOnlyRootFilesystem when set to true will force containers
        to run with a read only root file system. If the container specifically requests
        to run with a non-read only root file system the PSP should deny the pod. If set
        to false the container may run with a read only root file system if it wishes but
        it will not be forced to.
    runAsGroup: RunAsGroup is the strategy that will dictate the allowable RunAsGroup
        values that may be set. If this field is omitted, the pod's RunAsGroup can take
        any value. This field requires the RunAsGroup feature gate to be enabled.
    runtimeClass: runtimeClass is the strategy that will dictate the allowable
        RuntimeClasses for a pod. If this field is omitted, the pod's runtimeClassName
        field is unrestricted. Enforcement of this field depends on the RuntimeClass
        feature gate being enabled.
    allowedCSIDrivers: AllowedCSIDrivers is an allowlist of inline CSI drivers that must
        be explicitly set to be embedded within a pod spec. An empty value indicates that
        any CSI driver can be used for inline ephemeral volumes. This is a beta field, and
        is only honored if the API server enables the CSIInlineVolume feature gate.
    allowedCapabilities: allowedCapabilities is a list of capabilities that can be
        requested to add to the container. Capabilities in this field may be added at the
        pod author's discretion. You must not list a capability in both
        allowedCapabilities and requiredDropCapabilities.
    allowedFlexVolumes: allowedFlexVolumes is an allowlist of Flexvolumes. Empty or nil
        indicates that all Flexvolumes may be used. This parameter is effective only when
        the usage of the Flexvolumes is allowed in the "volumes" field.
    allowedHostPaths: allowedHostPaths is an allowlist of host paths. Empty indicates that
        all host paths may be used.
    allowedProcMountTypes: AllowedProcMountTypes is an allowlist of allowed
        ProcMountTypes. Empty or nil indicates that only the DefaultProcMountType may be
        used. This requires the ProcMountType feature flag to be enabled.
    allowedUnsafeSysctls: allowedUnsafeSysctls is a list of explicitly allowed unsafe
        sysctls, defaults to none. Each entry is either a plain sysctl name or ends in "*"
        in which case it is considered as a prefix of allowed sysctls. Single * means all
        unsafe sysctls are allowed. Kubelet has to allowlist all allowed unsafe sysctls
        explicitly to avoid rejection. Examples: e.g. "foo/*" allows "foo/bar", "foo/baz",
        etc. e.g. "foo.*" allows "foo.bar", "foo.baz", etc.
    defaultAddCapabilities: defaultAddCapabilities is the default set of capabilities that
        will be added to the container unless the pod spec specifically drops the
        capability. You may not list a capability in both defaultAddCapabilities and
        requiredDropCapabilities. Capabilities added here are implicitly allowed, and need
        not be included in the allowedCapabilities list.
    forbiddenSysctls: forbiddenSysctls is a list of explicitly forbidden sysctls, defaults
        to none. Each entry is either a plain sysctl name or ends in "*" in which case it
        is considered as a prefix of forbidden sysctls. Single * means all sysctls are
        forbidden. Examples: e.g. "foo/*" forbids "foo/bar", "foo/baz", etc. e.g. "foo.*"
        forbids "foo.bar", "foo.baz", etc.
    hostPorts: hostPorts determines which host port ranges are allowed to be exposed.
    requiredDropCapabilities: requiredDropCapabilities are the capabilities that will be
        dropped from the container. These are required to be dropped and cannot be added.
    volumes: volumes is an allowlist of volume plugins. Empty indicates that no volumes
        may be used. To allow all volumes you may use '*'.
    """

    fsGroup: FSGroupStrategyOptions
    runAsUser: RunAsUserStrategyOptions
    seLinux: SELinuxStrategyOptions
    supplementalGroups: SupplementalGroupsStrategyOptions
    allowPrivilegeEscalation: Optional[bool] = None
    defaultAllowPrivilegeEscalation: Optional[bool] = None
    hostIPC: Optional[bool] = None
    hostNetwork: Optional[bool] = None
    hostPID: Optional[bool] = None
    privileged: Optional[bool] = None
    readOnlyRootFilesystem: Optional[bool] = None
    runAsGroup: Optional[RunAsGroupStrategyOptions] = None
    runtimeClass: Optional[RuntimeClassStrategyOptions] = None
    allowedCSIDrivers: Optional[List[AllowedCSIDriver]] = field(default_factory=list)
    allowedCapabilities: Optional[List[str]] = field(default_factory=list)
    allowedFlexVolumes: Optional[List[AllowedFlexVolume]] = field(default_factory=list)
    allowedHostPaths: Optional[List[AllowedHostPath]] = field(default_factory=list)
    allowedProcMountTypes: Optional[List[str]] = field(default_factory=list)
    allowedUnsafeSysctls: Optional[List[str]] = field(default_factory=list)
    defaultAddCapabilities: Optional[List[str]] = field(default_factory=list)
    forbiddenSysctls: Optional[List[str]] = field(default_factory=list)
    hostPorts: Optional[List[HostPortRange]] = field(default_factory=list)
    requiredDropCapabilities: Optional[List[str]] = field(default_factory=list)
    volumes: Optional[List[str]] = field(default_factory=list)


@dataclass
class PodSecurityPolicy(HikaruDocumentBase):
    """
    PodSecurityPolicy governs the ability to make requests that affect the Security
    Context that will be applied to a pod and container. Deprecated in 1.21.

    Full name: io.k8s.api.policy.v1beta1.PodSecurityPolicy

    Attributes:
    apiVersion: APIVersion defines the versioned schema of this representation of an
        object. Servers should convert recognized schemas to the latest internal value,
        and may reject unrecognized values. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind: Kind is a string value representing the REST resource this object represents.
        Servers may infer this from the endpoint the client submits requests to. Cannot be
        updated. In CamelCase. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata: Standard object's metadata. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    spec: spec defines the policy enforced.
    """

    _version = 'v1beta1'
    apiVersion: Optional[str] = None
    kind: Optional[str] = None
    metadata: Optional[ObjectMeta] = None
    spec: Optional[PodSecurityPolicySpec] = None


@dataclass
class PodSecurityPolicyList(HikaruDocumentBase):
    """
    PodSecurityPolicyList is a list of PodSecurityPolicy objects.

    Full name: io.k8s.api.policy.v1beta1.PodSecurityPolicyList

    Attributes:
    items: items is a list of schema objects.
    apiVersion: APIVersion defines the versioned schema of this representation of an
        object. Servers should convert recognized schemas to the latest internal value,
        and may reject unrecognized values. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind: Kind is a string value representing the REST resource this object represents.
        Servers may infer this from the endpoint the client submits requests to. Cannot be
        updated. In CamelCase. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata: Standard list metadata. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    """

    _version = 'v1beta1'
    items: List[PodSecurityPolicy]
    apiVersion: Optional[str] = None
    kind: Optional[str] = None
    metadata: Optional[ListMeta] = None


@dataclass
class RoleRef(HikaruBase):
    """
    RoleRef contains information that points to the role being used

    Full name: io.k8s.api.rbac.v1beta1.RoleRef

    Attributes:
    apiGroup: APIGroup is the group for the resource being referenced
    kind: Kind is the type of resource being referenced
    name: Name is the name of resource being referenced
    """

    apiGroup: str
    kind: str
    name: str


@dataclass
class ClusterRoleBinding(HikaruDocumentBase):
    """
    ClusterRoleBinding references a ClusterRole, but not contain it. It can reference a
    ClusterRole in the global namespace, and adds who information via Subject. Deprecated
    in v1.17 in favor of rbac.authorization.k8s.io/v1 ClusterRoleBinding, and will no
    longer be served in v1.22.

    Full name: io.k8s.api.rbac.v1beta1.ClusterRoleBinding

    Attributes:
    roleRef: RoleRef can only reference a ClusterRole in the global namespace. If the
        RoleRef cannot be resolved, the Authorizer must return an error.
    apiVersion: APIVersion defines the versioned schema of this representation of an
        object. Servers should convert recognized schemas to the latest internal value,
        and may reject unrecognized values. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind: Kind is a string value representing the REST resource this object represents.
        Servers may infer this from the endpoint the client submits requests to. Cannot be
        updated. In CamelCase. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata: Standard object's metadata.
    subjects: Subjects holds references to the objects the role applies to.
    """

    _version = 'v1beta1'
    roleRef: RoleRef
    apiVersion: Optional[str] = None
    kind: Optional[str] = None
    metadata: Optional[ObjectMeta] = None
    subjects: Optional[List[Subject]] = field(default_factory=list)


@dataclass
class ClusterRoleBindingList(HikaruDocumentBase):
    """
    ClusterRoleBindingList is a collection of ClusterRoleBindings. Deprecated in v1.17 in
    favor of rbac.authorization.k8s.io/v1 ClusterRoleBindingList, and will no longer be
    served in v1.22.

    Full name: io.k8s.api.rbac.v1beta1.ClusterRoleBindingList

    Attributes:
    items: Items is a list of ClusterRoleBindings
    apiVersion: APIVersion defines the versioned schema of this representation of an
        object. Servers should convert recognized schemas to the latest internal value,
        and may reject unrecognized values. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind: Kind is a string value representing the REST resource this object represents.
        Servers may infer this from the endpoint the client submits requests to. Cannot be
        updated. In CamelCase. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata: Standard object's metadata.
    """

    _version = 'v1beta1'
    items: List[ClusterRoleBinding]
    apiVersion: Optional[str] = None
    kind: Optional[str] = None
    metadata: Optional[ListMeta] = None


@dataclass
class AggregationRule(HikaruBase):
    """
    AggregationRule describes how to locate ClusterRoles to aggregate into the ClusterRole

    Full name: io.k8s.api.rbac.v1beta1.AggregationRule

    Attributes:
    clusterRoleSelectors: ClusterRoleSelectors holds a list of selectors which will be
        used to find ClusterRoles and create the rules. If any of the selectors match,
        then the ClusterRole's permissions will be added
    """

    clusterRoleSelectors: Optional[List[LabelSelector]] = field(default_factory=list)


@dataclass
class PolicyRule(HikaruBase):
    """
    PolicyRule holds information that describes a policy rule, but does not contain
    information about who the rule applies to or which namespace the rule applies to.

    Full name: io.k8s.api.rbac.v1beta1.PolicyRule

    Attributes:
    verbs: Verbs is a list of Verbs that apply to ALL the ResourceKinds and
        AttributeRestrictions contained in this rule. VerbAll represents all kinds.
    apiGroups: APIGroups is the name of the APIGroup that contains the resources. If
        multiple API groups are specified, any action requested against one of the
        enumerated resources in any API group will be allowed.
    nonResourceURLs: NonResourceURLs is a set of partial urls that a user should have
        access to. *s are allowed, but only as the full, final step in the path Since
        non-resource URLs are not namespaced, this field is only applicable for
        ClusterRoles referenced from a ClusterRoleBinding. Rules can either apply to API
        resources (such as "pods" or "secrets") or non-resource URL paths (such as
        "/api"), but not both.
    resourceNames: ResourceNames is an optional white list of names that the rule applies
        to. An empty set means that everything is allowed.
    resources: Resources is a list of resources this rule applies to. '*' represents all
        resources in the specified apiGroups. '*/foo' represents the subresource 'foo' for
        all resources in the specified apiGroups.
    """

    verbs: List[str]
    apiGroups: Optional[List[str]] = field(default_factory=list)
    nonResourceURLs: Optional[List[str]] = field(default_factory=list)
    resourceNames: Optional[List[str]] = field(default_factory=list)
    resources: Optional[List[str]] = field(default_factory=list)


@dataclass
class ClusterRole(HikaruDocumentBase):
    """
    ClusterRole is a cluster level, logical grouping of PolicyRules that can be referenced
    as a unit by a RoleBinding or ClusterRoleBinding. Deprecated in v1.17 in favor of
    rbac.authorization.k8s.io/v1 ClusterRole, and will no longer be served in v1.22.

    Full name: io.k8s.api.rbac.v1beta1.ClusterRole

    Attributes:
    aggregationRule: AggregationRule is an optional field that describes how to build the
        Rules for this ClusterRole. If AggregationRule is set, then the Rules are
        controller managed and direct changes to Rules will be stomped by the controller.
    apiVersion: APIVersion defines the versioned schema of this representation of an
        object. Servers should convert recognized schemas to the latest internal value,
        and may reject unrecognized values. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind: Kind is a string value representing the REST resource this object represents.
        Servers may infer this from the endpoint the client submits requests to. Cannot be
        updated. In CamelCase. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata: Standard object's metadata.
    rules: Rules holds all the PolicyRules for this ClusterRole
    """

    _version = 'v1beta1'
    aggregationRule: Optional[AggregationRule] = None
    apiVersion: Optional[str] = None
    kind: Optional[str] = None
    metadata: Optional[ObjectMeta] = None
    rules: Optional[List[PolicyRule]] = field(default_factory=list)


@dataclass
class ClusterRoleList(HikaruDocumentBase):
    """
    ClusterRoleList is a collection of ClusterRoles. Deprecated in v1.17 in favor of
    rbac.authorization.k8s.io/v1 ClusterRoles, and will no longer be served in v1.22.

    Full name: io.k8s.api.rbac.v1beta1.ClusterRoleList

    Attributes:
    items: Items is a list of ClusterRoles
    apiVersion: APIVersion defines the versioned schema of this representation of an
        object. Servers should convert recognized schemas to the latest internal value,
        and may reject unrecognized values. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind: Kind is a string value representing the REST resource this object represents.
        Servers may infer this from the endpoint the client submits requests to. Cannot be
        updated. In CamelCase. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata: Standard object's metadata.
    """

    _version = 'v1beta1'
    items: List[ClusterRole]
    apiVersion: Optional[str] = None
    kind: Optional[str] = None
    metadata: Optional[ListMeta] = None


@dataclass
class RoleBinding(HikaruDocumentBase):
    """
    RoleBinding references a role, but does not contain it. It can reference a Role in the
    same namespace or a ClusterRole in the global namespace. It adds who information via
    Subjects and namespace information by which namespace it exists in. RoleBindings in a
    given namespace only have effect in that namespace. Deprecated in v1.17 in favor of
    rbac.authorization.k8s.io/v1 RoleBinding, and will no longer be served in v1.22.

    Full name: io.k8s.api.rbac.v1beta1.RoleBinding

    Attributes:
    roleRef: RoleRef can reference a Role in the current namespace or a ClusterRole in the
        global namespace. If the RoleRef cannot be resolved, the Authorizer must return an
        error.
    apiVersion: APIVersion defines the versioned schema of this representation of an
        object. Servers should convert recognized schemas to the latest internal value,
        and may reject unrecognized values. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind: Kind is a string value representing the REST resource this object represents.
        Servers may infer this from the endpoint the client submits requests to. Cannot be
        updated. In CamelCase. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata: Standard object's metadata.
    subjects: Subjects holds references to the objects the role applies to.
    """

    _version = 'v1beta1'
    roleRef: RoleRef
    apiVersion: Optional[str] = None
    kind: Optional[str] = None
    metadata: Optional[ObjectMeta] = None
    subjects: Optional[List[Subject]] = field(default_factory=list)


@dataclass
class RoleBindingList(HikaruDocumentBase):
    """
    RoleBindingList is a collection of RoleBindings Deprecated in v1.17 in favor of
    rbac.authorization.k8s.io/v1 RoleBindingList, and will no longer be served in v1.22.

    Full name: io.k8s.api.rbac.v1beta1.RoleBindingList

    Attributes:
    items: Items is a list of RoleBindings
    apiVersion: APIVersion defines the versioned schema of this representation of an
        object. Servers should convert recognized schemas to the latest internal value,
        and may reject unrecognized values. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind: Kind is a string value representing the REST resource this object represents.
        Servers may infer this from the endpoint the client submits requests to. Cannot be
        updated. In CamelCase. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata: Standard object's metadata.
    """

    _version = 'v1beta1'
    items: List[RoleBinding]
    apiVersion: Optional[str] = None
    kind: Optional[str] = None
    metadata: Optional[ListMeta] = None


@dataclass
class Role(HikaruDocumentBase):
    """
    Role is a namespaced, logical grouping of PolicyRules that can be referenced as a unit
    by a RoleBinding. Deprecated in v1.17 in favor of rbac.authorization.k8s.io/v1 Role,
    and will no longer be served in v1.22.

    Full name: io.k8s.api.rbac.v1beta1.Role

    Attributes:
    apiVersion: APIVersion defines the versioned schema of this representation of an
        object. Servers should convert recognized schemas to the latest internal value,
        and may reject unrecognized values. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind: Kind is a string value representing the REST resource this object represents.
        Servers may infer this from the endpoint the client submits requests to. Cannot be
        updated. In CamelCase. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata: Standard object's metadata.
    rules: Rules holds all the PolicyRules for this Role
    """

    _version = 'v1beta1'
    apiVersion: Optional[str] = None
    kind: Optional[str] = None
    metadata: Optional[ObjectMeta] = None
    rules: Optional[List[PolicyRule]] = field(default_factory=list)


@dataclass
class RoleList(HikaruDocumentBase):
    """
    RoleList is a collection of Roles Deprecated in v1.17 in favor of
    rbac.authorization.k8s.io/v1 RoleList, and will no longer be served in v1.22.

    Full name: io.k8s.api.rbac.v1beta1.RoleList

    Attributes:
    items: Items is a list of Roles
    apiVersion: APIVersion defines the versioned schema of this representation of an
        object. Servers should convert recognized schemas to the latest internal value,
        and may reject unrecognized values. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind: Kind is a string value representing the REST resource this object represents.
        Servers may infer this from the endpoint the client submits requests to. Cannot be
        updated. In CamelCase. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata: Standard object's metadata.
    """

    _version = 'v1beta1'
    items: List[Role]
    apiVersion: Optional[str] = None
    kind: Optional[str] = None
    metadata: Optional[ListMeta] = None


@dataclass
class PriorityClass(HikaruDocumentBase):
    """
    DEPRECATED - This group version of PriorityClass is deprecated by
    scheduling.k8s.io/v1/PriorityClass. PriorityClass defines mapping from a priority
    class name to the priority integer value. The value can be any valid integer.

    Full name: io.k8s.api.scheduling.v1beta1.PriorityClass

    Attributes:
    value: The value of this priority class. This is the actual priority that pods receive
        when they have the name of this class in their pod spec.
    apiVersion: APIVersion defines the versioned schema of this representation of an
        object. Servers should convert recognized schemas to the latest internal value,
        and may reject unrecognized values. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    description: description is an arbitrary string that usually provides guidelines on
        when this priority class should be used.
    globalDefault: globalDefault specifies whether this PriorityClass should be considered
        as the default priority for pods that do not have any priority class. Only one
        PriorityClass can be marked as `globalDefault`. However, if more than one
        PriorityClasses exists with their `globalDefault` field set to true, the smallest
        value of such global default PriorityClasses will be used as the default priority.
    kind: Kind is a string value representing the REST resource this object represents.
        Servers may infer this from the endpoint the client submits requests to. Cannot be
        updated. In CamelCase. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata: Standard object's metadata. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    preemptionPolicy: PreemptionPolicy is the Policy for preempting pods with lower
        priority. One of Never, PreemptLowerPriority. Defaults to PreemptLowerPriority if
        unset. This field is beta-level, gated by the NonPreemptingPriority feature-gate.
    """

    _version = 'v1beta1'
    value: int
    apiVersion: Optional[str] = None
    description: Optional[str] = None
    globalDefault: Optional[bool] = None
    kind: Optional[str] = None
    metadata: Optional[ObjectMeta] = None
    preemptionPolicy: Optional[str] = None


@dataclass
class PriorityClassList(HikaruDocumentBase):
    """
    PriorityClassList is a collection of priority classes.

    Full name: io.k8s.api.scheduling.v1beta1.PriorityClassList

    Attributes:
    items: items is the list of PriorityClasses
    apiVersion: APIVersion defines the versioned schema of this representation of an
        object. Servers should convert recognized schemas to the latest internal value,
        and may reject unrecognized values. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind: Kind is a string value representing the REST resource this object represents.
        Servers may infer this from the endpoint the client submits requests to. Cannot be
        updated. In CamelCase. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata: Standard list metadata More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    """

    _version = 'v1beta1'
    items: List[PriorityClass]
    apiVersion: Optional[str] = None
    kind: Optional[str] = None
    metadata: Optional[ListMeta] = None


@dataclass
class TokenRequest(HikaruBase):
    """
    TokenRequest contains parameters of a service account token.

    Full name: io.k8s.api.storage.v1beta1.TokenRequest

    Attributes:
    audience: Audience is the intended audience of the token in "TokenRequestSpec". It
        will default to the audiences of kube apiserver.
    expirationSeconds: ExpirationSeconds is the duration of validity of the token in
        "TokenRequestSpec". It has the same default value of "ExpirationSeconds" in
        "TokenRequestSpec"
    """

    audience: str
    expirationSeconds: Optional[int] = None


@dataclass
class CSIDriverSpec(HikaruBase):
    """
    CSIDriverSpec is the specification of a CSIDriver.

    Full name: io.k8s.api.storage.v1beta1.CSIDriverSpec

    Attributes:
    attachRequired: attachRequired indicates this CSI volume driver requires an attach
        operation (because it implements the CSI ControllerPublishVolume() method), and
        that the Kubernetes attach detach controller should call the attach volume
        interface which checks the volumeattachment status and waits until the volume is
        attached before proceeding to mounting. The CSI external-attacher coordinates with
        CSI volume driver and updates the volumeattachment status when the attach
        operation is complete. If the CSIDriverRegistry feature gate is enabled and the
        value is specified to false, the attach operation will be skipped. Otherwise the
        attach operation will be called.
    fsGroupPolicy: Defines if the underlying volume supports changing ownership and
        permission of the volume before being mounted. Refer to the specific FSGroupPolicy
        values for additional details. This field is alpha-level, and is only honored by
        servers that enable the CSIVolumeFSGroupPolicy feature gate.
    podInfoOnMount: If set to true, podInfoOnMount indicates this CSI volume driver
        requires additional pod information (like podName, podUID, etc.) during mount
        operations. If set to false, pod information will not be passed on mount. Default
        is false. The CSI driver specifies podInfoOnMount as part of driver deployment. If
        true, Kubelet will pass pod information as VolumeContext in the CSI
        NodePublishVolume() calls. The CSI driver is responsible for parsing and
        validating the information passed in as VolumeContext. The following VolumeConext
        will be passed if podInfoOnMount is set to true. This list might grow, but the
        prefix will be used. "csi.storage.k8s.io/pod.name": pod.Name
        "csi.storage.k8s.io/pod.namespace": pod.Namespace "csi.storage.k8s.io/pod.uid":
        string(pod.UID) "csi.storage.k8s.io/ephemeral": "true" if the volume is an
        ephemeral inline volume defined by a CSIVolumeSource, otherwise "false"
        "csi.storage.k8s.io/ephemeral" is a new feature in Kubernetes 1.16. It is only
        required for drivers which support both the "Persistent" and "Ephemeral"
        VolumeLifecycleMode. Other drivers can leave pod info disabled and/or ignore this
        field. As Kubernetes 1.15 doesn't support this field, drivers can only support one
        mode when deployed on such a cluster and the deployment determines which mode that
        is, for example via a command line parameter of the driver.
    requiresRepublish: RequiresRepublish indicates the CSI driver wants
        `NodePublishVolume` being periodically called to reflect any possible change in
        the mounted volume. This field defaults to false. Note: After a successful initial
        NodePublishVolume call, subsequent calls to NodePublishVolume should only update
        the contents of the volume. New mount points will not be seen by a running
        container. This is an alpha feature and only available when the
        CSIServiceAccountToken feature is enabled.
    storageCapacity: If set to true, storageCapacity indicates that the CSI volume driver
        wants pod scheduling to consider the storage capacity that the driver deployment
        will report by creating CSIStorageCapacity objects with capacity information. The
        check can be enabled immediately when deploying a driver. In that case,
        provisioning new volumes with late binding will pause until the driver deployment
        has published some suitable CSIStorageCapacity object. Alternatively, the driver
        can be deployed with the field unset or false and it can be flipped later when
        storage capacity information has been published. This is an alpha field and only
        available when the CSIStorageCapacity feature is enabled. The default is false.
    tokenRequests: TokenRequests indicates the CSI driver needs pods' service account
        tokens it is mounting volume for to do necessary authentication. Kubelet will pass
        the tokens in VolumeContext in the CSI NodePublishVolume calls. The CSI driver
        should parse and validate the following VolumeContext:
        "csi.storage.k8s.io/serviceAccount.tokens": { "<audience>": { "token": <token>,
        "expirationTimestamp": <expiration timestamp in RFC3339>, }, ... } Note: Audience
        in each TokenRequest should be different and at most one token is empty string. To
        receive a new token after expiry, RequiresRepublish can be used to trigger
        NodePublishVolume periodically. This is an alpha feature and only available when
        the CSIServiceAccountToken feature is enabled.
    volumeLifecycleModes: VolumeLifecycleModes defines what kind of volumes this CSI
        volume driver supports. The default if the list is empty is "Persistent", which is
        the usage defined by the CSI specification and implemented in Kubernetes via the
        usual PV/PVC mechanism. The other mode is "Ephemeral". In this mode, volumes are
        defined inline inside the pod spec with CSIVolumeSource and their lifecycle is
        tied to the lifecycle of that pod. A driver has to be aware of this because it is
        only going to get a NodePublishVolume call for such a volume. For more information
        about implementing this mode, see
        https://kubernetes-csi.github.io/docs/ephemeral-local-volumes.html A driver can
        support one or more of these modes and more modes may be added in the future.
    """

    attachRequired: Optional[bool] = None
    fsGroupPolicy: Optional[str] = None
    podInfoOnMount: Optional[bool] = None
    requiresRepublish: Optional[bool] = None
    storageCapacity: Optional[bool] = None
    tokenRequests: Optional[List[TokenRequest]] = field(default_factory=list)
    volumeLifecycleModes: Optional[List[str]] = field(default_factory=list)


@dataclass
class CSIDriver(HikaruDocumentBase):
    """
    CSIDriver captures information about a Container Storage Interface (CSI) volume driver
    deployed on the cluster. CSI drivers do not need to create the CSIDriver object
    directly. Instead they may use the cluster-driver-registrar sidecar container. When
    deployed with a CSI driver it automatically creates a CSIDriver object representing
    the driver. Kubernetes attach detach controller uses this object to determine whether
    attach is required. Kubelet uses this object to determine whether pod information
    needs to be passed on mount. CSIDriver objects are non-namespaced.

    Full name: io.k8s.api.storage.v1beta1.CSIDriver

    Attributes:
    spec: Specification of the CSI Driver.
    apiVersion: APIVersion defines the versioned schema of this representation of an
        object. Servers should convert recognized schemas to the latest internal value,
        and may reject unrecognized values. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind: Kind is a string value representing the REST resource this object represents.
        Servers may infer this from the endpoint the client submits requests to. Cannot be
        updated. In CamelCase. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata: Standard object metadata. metadata.Name indicates the name of the CSI driver
        that this object refers to; it MUST be the same name returned by the CSI
        GetPluginName() call for that driver. The driver name must be 63 characters or
        less, beginning and ending with an alphanumeric character ([a-z0-9A-Z]) with
        dashes (-), dots (.), and alphanumerics between. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    """

    _version = 'v1beta1'
    spec: CSIDriverSpec
    apiVersion: Optional[str] = None
    kind: Optional[str] = None
    metadata: Optional[ObjectMeta] = None


@dataclass
class CSIDriverList(HikaruDocumentBase):
    """
    CSIDriverList is a collection of CSIDriver objects.

    Full name: io.k8s.api.storage.v1beta1.CSIDriverList

    Attributes:
    items: items is the list of CSIDriver
    apiVersion: APIVersion defines the versioned schema of this representation of an
        object. Servers should convert recognized schemas to the latest internal value,
        and may reject unrecognized values. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind: Kind is a string value representing the REST resource this object represents.
        Servers may infer this from the endpoint the client submits requests to. Cannot be
        updated. In CamelCase. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata: Standard list metadata More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    """

    _version = 'v1beta1'
    items: List[CSIDriver]
    apiVersion: Optional[str] = None
    kind: Optional[str] = None
    metadata: Optional[ListMeta] = None


@dataclass
class VolumeNodeResources(HikaruBase):
    """
    VolumeNodeResources is a set of resource limits for scheduling of volumes.

    Full name: io.k8s.api.storage.v1beta1.VolumeNodeResources

    Attributes:
    count: Maximum number of unique volumes managed by the CSI driver that can be used on
        a node. A volume that is both attached and mounted on a node is considered to be
        used once, not twice. The same rule applies for a unique volume that is shared
        among multiple pods on the same node. If this field is nil, then the supported
        number of volumes on this node is unbounded.
    """

    count: Optional[int] = None


@dataclass
class CSINodeDriver(HikaruBase):
    """
    CSINodeDriver holds information about the specification of one CSI driver installed on
    a node

    Full name: io.k8s.api.storage.v1beta1.CSINodeDriver

    Attributes:
    name: This is the name of the CSI driver that this object refers to. This MUST be the
        same name returned by the CSI GetPluginName() call for that driver.
    nodeID: nodeID of the node from the driver point of view. This field enables
        Kubernetes to communicate with storage systems that do not share the same
        nomenclature for nodes. For example, Kubernetes may refer to a given node as
        "node1", but the storage system may refer to the same node as "nodeA". When
        Kubernetes issues a command to the storage system to attach a volume to a specific
        node, it can use this field to refer to the node name using the ID that the
        storage system will understand, e.g. "nodeA" instead of "node1". This field is
        required.
    allocatable: allocatable represents the volume resources of a node that are available
        for scheduling.
    topologyKeys: topologyKeys is the list of keys supported by the driver. When a driver
        is initialized on a cluster, it provides a set of topology keys that it
        understands (e.g. "company.com/zone", "company.com/region"). When a driver is
        initialized on a node, it provides the same topology keys along with values.
        Kubelet will expose these topology keys as labels on its own node object. When
        Kubernetes does topology aware provisioning, it can use this list to determine
        which labels it should retrieve from the node object and pass back to the driver.
        It is possible for different nodes to use different topology keys. This can be
        empty if driver does not support topology.
    """

    name: str
    nodeID: str
    allocatable: Optional[VolumeNodeResources] = None
    topologyKeys: Optional[List[str]] = field(default_factory=list)


@dataclass
class CSINodeSpec(HikaruBase):
    """
    CSINodeSpec holds information about the specification of all CSI drivers installed on
    a node

    Full name: io.k8s.api.storage.v1beta1.CSINodeSpec

    Attributes:
    drivers: drivers is a list of information of all CSI Drivers existing on a node. If
        all drivers in the list are uninstalled, this can become empty.
    """

    drivers: List[CSINodeDriver]


@dataclass
class CSINode(HikaruDocumentBase):
    """
    DEPRECATED - This group version of CSINode is deprecated by storage/v1/CSINode. See
    the release notes for more information. CSINode holds information about all CSI
    drivers installed on a node. CSI drivers do not need to create the CSINode object
    directly. As long as they use the node-driver-registrar sidecar container, the kubelet
    will automatically populate the CSINode object for the CSI driver as part of kubelet
    plugin registration. CSINode has the same name as a node. If the object is missing, it
    means either there are no CSI Drivers available on the node, or the Kubelet version is
    low enough that it doesn't create this object. CSINode has an OwnerReference that
    points to the corresponding node object.

    Full name: io.k8s.api.storage.v1beta1.CSINode

    Attributes:
    spec: spec is the specification of CSINode
    apiVersion: APIVersion defines the versioned schema of this representation of an
        object. Servers should convert recognized schemas to the latest internal value,
        and may reject unrecognized values. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind: Kind is a string value representing the REST resource this object represents.
        Servers may infer this from the endpoint the client submits requests to. Cannot be
        updated. In CamelCase. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata: metadata.name must be the Kubernetes node name.
    """

    _version = 'v1beta1'
    spec: CSINodeSpec
    apiVersion: Optional[str] = None
    kind: Optional[str] = None
    metadata: Optional[ObjectMeta] = None


@dataclass
class CSINodeList(HikaruDocumentBase):
    """
    CSINodeList is a collection of CSINode objects.

    Full name: io.k8s.api.storage.v1beta1.CSINodeList

    Attributes:
    items: items is the list of CSINode
    apiVersion: APIVersion defines the versioned schema of this representation of an
        object. Servers should convert recognized schemas to the latest internal value,
        and may reject unrecognized values. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind: Kind is a string value representing the REST resource this object represents.
        Servers may infer this from the endpoint the client submits requests to. Cannot be
        updated. In CamelCase. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata: Standard list metadata More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    """

    _version = 'v1beta1'
    items: List[CSINode]
    apiVersion: Optional[str] = None
    kind: Optional[str] = None
    metadata: Optional[ListMeta] = None


@dataclass
class StorageClass(HikaruDocumentBase):
    """
    StorageClass describes the parameters for a class of storage for which
    PersistentVolumes can be dynamically provisioned. StorageClasses are non-namespaced;
    the name of the storage class according to etcd is in ObjectMeta.Name.

    Full name: io.k8s.api.storage.v1beta1.StorageClass

    Attributes:
    provisioner: Provisioner indicates the type of the provisioner.
    allowVolumeExpansion: AllowVolumeExpansion shows whether the storage class allow
        volume expand
    apiVersion: APIVersion defines the versioned schema of this representation of an
        object. Servers should convert recognized schemas to the latest internal value,
        and may reject unrecognized values. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind: Kind is a string value representing the REST resource this object represents.
        Servers may infer this from the endpoint the client submits requests to. Cannot be
        updated. In CamelCase. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata: Standard object's metadata. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    reclaimPolicy: Dynamically provisioned PersistentVolumes of this storage class are
        created with this reclaimPolicy. Defaults to Delete.
    volumeBindingMode: VolumeBindingMode indicates how PersistentVolumeClaims should be
        provisioned and bound. When unset, VolumeBindingImmediate is used. This field is
        only honored by servers that enable the VolumeScheduling feature.
    allowedTopologies: Restrict the node topologies where volumes can be dynamically
        provisioned. Each volume plugin defines its own supported topology specifications.
        An empty TopologySelectorTerm list means there is no topology restriction. This
        field is only honored by servers that enable the VolumeScheduling feature.
    mountOptions: Dynamically provisioned PersistentVolumes of this storage class are
        created with these mountOptions, e.g. ["ro", "soft"]. Not validated - mount of the
        PVs will simply fail if one is invalid.
    parameters: Parameters holds the parameters for the provisioner that should create
        volumes of this storage class.
    """

    _version = 'v1beta1'
    provisioner: str
    allowVolumeExpansion: Optional[bool] = None
    apiVersion: Optional[str] = None
    kind: Optional[str] = None
    metadata: Optional[ObjectMeta] = None
    reclaimPolicy: Optional[str] = None
    volumeBindingMode: Optional[str] = None
    allowedTopologies: Optional[List[TopologySelectorTerm]] = field(default_factory=list)
    mountOptions: Optional[List[str]] = field(default_factory=list)
    parameters: Optional[Dict[str, str]] = field(default_factory=dict)


@dataclass
class StorageClassList(HikaruDocumentBase):
    """
    StorageClassList is a collection of storage classes.

    Full name: io.k8s.api.storage.v1beta1.StorageClassList

    Attributes:
    items: Items is the list of StorageClasses
    apiVersion: APIVersion defines the versioned schema of this representation of an
        object. Servers should convert recognized schemas to the latest internal value,
        and may reject unrecognized values. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind: Kind is a string value representing the REST resource this object represents.
        Servers may infer this from the endpoint the client submits requests to. Cannot be
        updated. In CamelCase. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata: Standard list metadata More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    """

    _version = 'v1beta1'
    items: List[StorageClass]
    apiVersion: Optional[str] = None
    kind: Optional[str] = None
    metadata: Optional[ListMeta] = None


@dataclass
class VolumeAttachmentSource(HikaruBase):
    """
    VolumeAttachmentSource represents a volume that should be attached. Right now only
    PersistenVolumes can be attached via external attacher, in future we may allow also
    inline volumes in pods. Exactly one member can be set.

    Full name: io.k8s.api.storage.v1beta1.VolumeAttachmentSource

    Attributes:
    inlineVolumeSpec: inlineVolumeSpec contains all the information necessary to attach a
        persistent volume defined by a pod's inline VolumeSource. This field is populated
        only for the CSIMigration feature. It contains translated fields from a pod's
        inline VolumeSource to a PersistentVolumeSpec. This field is alpha-level and is
        only honored by servers that enabled the CSIMigration feature.
    persistentVolumeName: Name of the persistent volume to attach.
    """

    inlineVolumeSpec: Optional[PersistentVolumeSpec] = None
    persistentVolumeName: Optional[str] = None


@dataclass
class VolumeAttachmentSpec(HikaruBase):
    """
    VolumeAttachmentSpec is the specification of a VolumeAttachment request.

    Full name: io.k8s.api.storage.v1beta1.VolumeAttachmentSpec

    Attributes:
    attacher: Attacher indicates the name of the volume driver that MUST handle this
        request. This is the name returned by GetPluginName().
    nodeName: The node that the volume should be attached to.
    source: Source represents the volume that should be attached.
    """

    attacher: str
    nodeName: str
    source: VolumeAttachmentSource


@dataclass
class VolumeError(HikaruBase):
    """
    VolumeError captures an error encountered during a volume operation.

    Full name: io.k8s.api.storage.v1beta1.VolumeError

    Attributes:
    message: String detailing the error encountered during Attach or Detach operation.
        This string may be logged, so it should not contain sensitive information.
    time: Time the error was encountered.
    """

    message: Optional[str] = None
    time: Optional[Time] = None


@dataclass
class VolumeAttachmentStatus(HikaruBase):
    """
    VolumeAttachmentStatus is the status of a VolumeAttachment request.

    Full name: io.k8s.api.storage.v1beta1.VolumeAttachmentStatus

    Attributes:
    attached: Indicates the volume is successfully attached. This field must only be set
        by the entity completing the attach operation, i.e. the external-attacher.
    attachError: The last error encountered during attach operation, if any. This field
        must only be set by the entity completing the attach operation, i.e. the
        external-attacher.
    detachError: The last error encountered during detach operation, if any. This field
        must only be set by the entity completing the detach operation, i.e. the
        external-attacher.
    attachmentMetadata: Upon successful attach, this field is populated with any
        information returned by the attach operation that must be passed into subsequent
        WaitForAttach or Mount calls. This field must only be set by the entity completing
        the attach operation, i.e. the external-attacher.
    """

    attached: bool
    attachError: Optional[VolumeError] = None
    detachError: Optional[VolumeError] = None
    attachmentMetadata: Optional[Dict[str, str]] = field(default_factory=dict)


@dataclass
class VolumeAttachment(HikaruDocumentBase):
    """
    VolumeAttachment captures the intent to attach or detach the specified volume to/from
    the specified node. VolumeAttachment objects are non-namespaced.

    Full name: io.k8s.api.storage.v1beta1.VolumeAttachment

    Attributes:
    spec: Specification of the desired attach/detach volume behavior. Populated by the
        Kubernetes system.
    apiVersion: APIVersion defines the versioned schema of this representation of an
        object. Servers should convert recognized schemas to the latest internal value,
        and may reject unrecognized values. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind: Kind is a string value representing the REST resource this object represents.
        Servers may infer this from the endpoint the client submits requests to. Cannot be
        updated. In CamelCase. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata: Standard object metadata. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    status: Status of the VolumeAttachment request. Populated by the entity completing the
        attach or detach operation, i.e. the external-attacher.
    """

    _version = 'v1beta1'
    spec: VolumeAttachmentSpec
    apiVersion: Optional[str] = None
    kind: Optional[str] = None
    metadata: Optional[ObjectMeta] = None
    status: Optional[VolumeAttachmentStatus] = None


@dataclass
class VolumeAttachmentList(HikaruDocumentBase):
    """
    VolumeAttachmentList is a collection of VolumeAttachment objects.

    Full name: io.k8s.api.storage.v1beta1.VolumeAttachmentList

    Attributes:
    items: Items is the list of VolumeAttachments
    apiVersion: APIVersion defines the versioned schema of this representation of an
        object. Servers should convert recognized schemas to the latest internal value,
        and may reject unrecognized values. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind: Kind is a string value representing the REST resource this object represents.
        Servers may infer this from the endpoint the client submits requests to. Cannot be
        updated. In CamelCase. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata: Standard list metadata More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    """

    _version = 'v1beta1'
    items: List[VolumeAttachment]
    apiVersion: Optional[str] = None
    kind: Optional[str] = None
    metadata: Optional[ListMeta] = None


@dataclass
class APIServiceSpec(HikaruBase):
    """
    APIServiceSpec contains information for locating and communicating with a server. Only
    https is supported, though you are able to disable certificate verification.

    Full name: io.k8s.kube-aggregator.pkg.apis.apiregistration.v1beta1.APIServiceSpec

    Attributes:
    groupPriorityMinimum: GroupPriorityMininum is the priority this group should have at
        least. Higher priority means that the group is preferred by clients over lower
        priority ones. Note that other versions of this group might specify even higher
        GroupPriorityMininum values such that the whole group gets a higher priority. The
        primary sort is based on GroupPriorityMinimum, ordered highest number to lowest
        (20 before 10). The secondary sort is based on the alphabetical comparison of the
        name of the object. (v1.bar before v1.foo) We'd recommend something like: *.k8s.io
        (except extensions) at 18000 and PaaSes (OpenShift, Deis) are recommended to be in
        the 2000s
    versionPriority: VersionPriority controls the ordering of this API version inside of
        its group. Must be greater than zero. The primary sort is based on
        VersionPriority, ordered highest to lowest (20 before 10). Since it's inside of a
        group, the number can be small, probably in the 10s. In case of equal version
        priorities, the version string will be used to compute the order inside a group.
        If the version string is "kube-like", it will sort above non "kube-like" version
        strings, which are ordered lexicographically. "Kube-like" versions start with a
        "v", then are followed by a number (the major version), then optionally the string
        "alpha" or "beta" and another number (the minor version). These are sorted first
        by GA > beta > alpha (where GA is a version with no suffix such as beta or alpha),
        and then by comparing major version, then minor version. An example sorted list of
        versions: v10, v2, v1, v11beta2, v10beta3, v3beta1, v12alpha1, v11alpha2, foo1,
        foo10.
    caBundle: CABundle is a PEM encoded CA bundle which will be used to validate an API
        server's serving certificate. If unspecified, system trust roots on the apiserver
        are used.
    group: Group is the API group name this server hosts
    insecureSkipTLSVerify: InsecureSkipTLSVerify disables TLS certificate verification
        when communicating with this server. This is strongly discouraged. You should use
        the CABundle instead.
    service: Service is a reference to the service for this API server. It must
        communicate on port 443. If the Service is nil, that means the handling for the
        API groupversion is handled locally on this server. The call will simply delegate
        to the normal handler chain to be fulfilled.
    version: Version is the API version this server hosts. For example, "v1"
    """

    groupPriorityMinimum: int
    versionPriority: int
    caBundle: Optional[str] = None
    group: Optional[str] = None
    insecureSkipTLSVerify: Optional[bool] = None
    service: Optional[ServiceReference] = None
    version: Optional[str] = None


@dataclass
class APIServiceCondition(HikaruBase):
    """
    APIServiceCondition describes the state of an APIService at a particular point

    Full name: io.k8s.kube-aggregator.pkg.apis.apiregistration.v1beta1.APIServiceCondition

    Attributes:
    status: Status is the status of the condition. Can be True, False, Unknown.
    type: Type is the type of the condition.
    lastTransitionTime: Last time the condition transitioned from one status to another.
    message: Human-readable message indicating details about last transition.
    reason: Unique, one-word, CamelCase reason for the condition's last transition.
    """

    status: str
    type: str
    lastTransitionTime: Optional[Time] = None
    message: Optional[str] = None
    reason: Optional[str] = None


@dataclass
class APIServiceStatus(HikaruBase):
    """
    APIServiceStatus contains derived information about an API server

    Full name: io.k8s.kube-aggregator.pkg.apis.apiregistration.v1beta1.APIServiceStatus

    Attributes:
    conditions: Current service state of apiService.
    """

    conditions: Optional[List[APIServiceCondition]] = field(default_factory=list)


@dataclass
class APIService(HikaruDocumentBase):
    """
    APIService represents a server for a particular GroupVersion. Name must be
    "version.group".

    Full name: io.k8s.kube-aggregator.pkg.apis.apiregistration.v1beta1.APIService

    Attributes:
    apiVersion: APIVersion defines the versioned schema of this representation of an
        object. Servers should convert recognized schemas to the latest internal value,
        and may reject unrecognized values. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind: Kind is a string value representing the REST resource this object represents.
        Servers may infer this from the endpoint the client submits requests to. Cannot be
        updated. In CamelCase. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata:
    spec: Spec contains information for locating and communicating with a server
    status: Status contains derived information about an API server
    """

    _version = 'v1beta1'
    apiVersion: Optional[str] = None
    kind: Optional[str] = None
    metadata: Optional[ObjectMeta] = None
    spec: Optional[APIServiceSpec] = None
    status: Optional[APIServiceStatus] = None


@dataclass
class APIServiceList(HikaruDocumentBase):
    """
    APIServiceList is a list of APIService objects.

    Full name: io.k8s.kube-aggregator.pkg.apis.apiregistration.v1beta1.APIServiceList

    Attributes:
    items:
    apiVersion: APIVersion defines the versioned schema of this representation of an
        object. Servers should convert recognized schemas to the latest internal value,
        and may reject unrecognized values. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind: Kind is a string value representing the REST resource this object represents.
        Servers may infer this from the endpoint the client submits requests to. Cannot be
        updated. In CamelCase. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata:
    """

    _version = 'v1beta1'
    items: List[APIService]
    apiVersion: Optional[str] = None
    kind: Optional[str] = None
    metadata: Optional[ListMeta] = None


globs = dict(globals())
__all__ = [c.__name__ for c in globs.values()
           if type(c) == type]
del globs
