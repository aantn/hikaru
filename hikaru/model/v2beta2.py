
"""
DO NOT EDIT THIS FILE!

This module is automatically generated using the hikaru.build program that turns
a Kubernetes Swagger spec into the code for the hikaru.model module.
"""


from hikaru.meta import HikaruBase
from typing import Optional, List, Dict
from dataclasses import dataclass, field
from .unversioned import *
from .v1 import *


@dataclass
class HPAScalingPolicy(HikaruBase):
    """
    HPAScalingPolicy is a single policy which must hold true for a specified past
    interval.

    Full name: io.k8s.api.autoscaling.v2beta2.HPAScalingPolicy

    Attributes:
    periodSeconds: PeriodSeconds specifies the window of time for which the policy should
        hold true. PeriodSeconds must be greater than zero and less than or equal to 1800
        (30 min).
    type: Type is used to specify the scaling policy.
    value: Value contains the amount of change which is permitted by the policy. It must
        be greater than zero
    """

    periodSeconds: int
    type: str
    value: int


@dataclass
class HPAScalingRules(HikaruBase):
    """
    HPAScalingRules configures the scaling behavior for one direction. These Rules are
    applied after calculating DesiredReplicas from metrics for the HPA. They can limit the
    scaling velocity by specifying scaling policies. They can prevent flapping by
    specifying the stabilization window, so that the number of replicas is not set
    instantly, instead, the safest value from the stabilization window is chosen.

    Full name: io.k8s.api.autoscaling.v2beta2.HPAScalingRules

    Attributes:
    selectPolicy: selectPolicy is used to specify which policy should be used. If not set,
        the default value MaxPolicySelect is used.
    stabilizationWindowSeconds: StabilizationWindowSeconds is the number of seconds for
        which past recommendations should be considered while scaling up or scaling down.
        StabilizationWindowSeconds must be greater than or equal to zero and less than or
        equal to 3600 (one hour). If not set, use the default values: - For scale up: 0
        (i.e. no stabilization is done). - For scale down: 300 (i.e. the stabilization
        window is 300 seconds long).
    policies: policies is a list of potential scaling polices which can be used during
        scaling. At least one policy must be specified, otherwise the HPAScalingRules will
        be discarded as invalid
    """

    selectPolicy: Optional[str] = None
    stabilizationWindowSeconds: Optional[int] = None
    policies: Optional[List[HPAScalingPolicy]] = field(default_factory=list)


@dataclass
class HorizontalPodAutoscalerBehavior(HikaruBase):
    """
    HorizontalPodAutoscalerBehavior configures the scaling behavior of the target in both
    Up and Down directions (scaleUp and scaleDown fields respectively).

    Full name: io.k8s.api.autoscaling.v2beta2.HorizontalPodAutoscalerBehavior

    Attributes:
    scaleDown: scaleDown is scaling policy for scaling Down. If not set, the default value
        is to allow to scale down to minReplicas pods, with a 300 second stabilization
        window (i.e., the highest recommendation for the last 300sec is used).
    scaleUp: scaleUp is scaling policy for scaling Up. If not set, the default value is
        the higher of: * increase no more than 4 pods per 60 seconds * double the number
        of pods per 60 seconds No stabilization is used.
    """

    scaleDown: Optional[HPAScalingRules] = None
    scaleUp: Optional[HPAScalingRules] = None


@dataclass
class MetricTarget(HikaruBase):
    """
    MetricTarget defines the target value, average value, or average utilization of a
    specific metric

    Full name: io.k8s.api.autoscaling.v2beta2.MetricTarget

    Attributes:
    type: type represents whether the metric type is Utilization, Value, or AverageValue
    averageUtilization: averageUtilization is the target value of the average of the
        resource metric across all relevant pods, represented as a percentage of the
        requested value of the resource for the pods. Currently only valid for Resource
        metric source type
    averageValue: averageValue is the target value of the average of the metric across all
        relevant pods (as a quantity)
    value: value is the target value of the metric (as a quantity).
    """

    type: str
    averageUtilization: Optional[int] = None
    averageValue: Optional[Quantity] = None
    value: Optional[Quantity] = None


@dataclass
class ContainerResourceMetricSource(HikaruBase):
    """
    ContainerResourceMetricSource indicates how to scale on a resource metric known to
    Kubernetes, as specified in requests and limits, describing each pod in the current
    scale target (e.g. CPU or memory). The values will be averaged together before being
    compared to the target. Such metrics are built in to Kubernetes, and have special
    scaling options on top of those available to normal per-pod metrics using the "pods"
    source. Only one "target" type should be set.

    Full name: io.k8s.api.autoscaling.v2beta2.ContainerResourceMetricSource

    Attributes:
    container: container is the name of the container in the pods of the scaling target
    name: name is the name of the resource in question.
    target: target specifies the target value for the given metric
    """

    container: str
    name: str
    target: MetricTarget


@dataclass
class MetricIdentifier(HikaruBase):
    """
    MetricIdentifier defines the name and optionally selector for a metric

    Full name: io.k8s.api.autoscaling.v2beta2.MetricIdentifier

    Attributes:
    name: name is the name of the given metric
    selector: selector is the string-encoded form of a standard kubernetes label selector
        for the given metric When set, it is passed as an additional parameter to the
        metrics server for more specific metrics scoping. When unset, just the metricName
        will be used to gather metrics.
    """

    name: str
    selector: Optional[LabelSelector] = None


@dataclass
class ExternalMetricSource(HikaruBase):
    """
    ExternalMetricSource indicates how to scale on a metric not associated with any
    Kubernetes object (for example length of queue in cloud messaging service, or QPS from
    loadbalancer running outside of cluster).

    Full name: io.k8s.api.autoscaling.v2beta2.ExternalMetricSource

    Attributes:
    metric: metric identifies the target metric by name and selector
    target: target specifies the target value for the given metric
    """

    metric: MetricIdentifier
    target: MetricTarget


@dataclass
class CrossVersionObjectReference(HikaruBase):
    """
    CrossVersionObjectReference contains enough information to let you identify the
    referred resource.

    Full name: io.k8s.api.autoscaling.v2beta2.CrossVersionObjectReference

    Attributes:
    kind: Kind of the referent; More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
    name: Name of the referent; More info:
        http://kubernetes.io/docs/user-guide/identifiers#names
    apiVersion: API version of the referent
    """

    kind: str
    name: str
    apiVersion: Optional[str] = None


@dataclass
class ObjectMetricSource(HikaruBase):
    """
    ObjectMetricSource indicates how to scale on a metric describing a kubernetes object
    (for example, hits-per-second on an Ingress object).

    Full name: io.k8s.api.autoscaling.v2beta2.ObjectMetricSource

    Attributes:
    describedObject:
    metric: metric identifies the target metric by name and selector
    target: target specifies the target value for the given metric
    """

    describedObject: CrossVersionObjectReference
    metric: MetricIdentifier
    target: MetricTarget


@dataclass
class PodsMetricSource(HikaruBase):
    """
    PodsMetricSource indicates how to scale on a metric describing each pod in the current
    scale target (for example, transactions-processed-per-second). The values will be
    averaged together before being compared to the target value.

    Full name: io.k8s.api.autoscaling.v2beta2.PodsMetricSource

    Attributes:
    metric: metric identifies the target metric by name and selector
    target: target specifies the target value for the given metric
    """

    metric: MetricIdentifier
    target: MetricTarget


@dataclass
class ResourceMetricSource(HikaruBase):
    """
    ResourceMetricSource indicates how to scale on a resource metric known to Kubernetes,
    as specified in requests and limits, describing each pod in the current scale target
    (e.g. CPU or memory). The values will be averaged together before being compared to
    the target. Such metrics are built in to Kubernetes, and have special scaling options
    on top of those available to normal per-pod metrics using the "pods" source. Only one
    "target" type should be set.

    Full name: io.k8s.api.autoscaling.v2beta2.ResourceMetricSource

    Attributes:
    name: name is the name of the resource in question.
    target: target specifies the target value for the given metric
    """

    name: str
    target: MetricTarget


@dataclass
class MetricSpec(HikaruBase):
    """
    MetricSpec specifies how to scale based on a single metric (only `type` and one other
    matching field should be set at once).

    Full name: io.k8s.api.autoscaling.v2beta2.MetricSpec

    Attributes:
    type: type is the type of metric source. It should be one of "ContainerResource",
        "External", "Object", "Pods" or "Resource", each mapping to a matching field in
        the object. Note: "ContainerResource" type is available on when the feature-gate
        HPAContainerMetrics is enabled
    containerResource: container resource refers to a resource metric (such as those
        specified in requests and limits) known to Kubernetes describing a single
        container in each pod of the current scale target (e.g. CPU or memory). Such
        metrics are built in to Kubernetes, and have special scaling options on top of
        those available to normal per-pod metrics using the "pods" source. This is an
        alpha feature and can be enabled by the HPAContainerMetrics feature flag.
    external: external refers to a global metric that is not associated with any
        Kubernetes object. It allows autoscaling based on information coming from
        components running outside of cluster (for example length of queue in cloud
        messaging service, or QPS from loadbalancer running outside of cluster).
    object: object refers to a metric describing a single kubernetes object (for example,
        hits-per-second on an Ingress object).
    pods: pods refers to a metric describing each pod in the current scale target (for
        example, transactions-processed-per-second). The values will be averaged together
        before being compared to the target value.
    resource: resource refers to a resource metric (such as those specified in requests
        and limits) known to Kubernetes describing each pod in the current scale target
        (e.g. CPU or memory). Such metrics are built in to Kubernetes, and have special
        scaling options on top of those available to normal per-pod metrics using the
        "pods" source.
    """

    type: str
    containerResource: Optional[ContainerResourceMetricSource] = None
    external: Optional[ExternalMetricSource] = None
    object: Optional[ObjectMetricSource] = None
    pods: Optional[PodsMetricSource] = None
    resource: Optional[ResourceMetricSource] = None


@dataclass
class HorizontalPodAutoscalerSpec(HikaruBase):
    """
    HorizontalPodAutoscalerSpec describes the desired functionality of the
    HorizontalPodAutoscaler.

    Full name: io.k8s.api.autoscaling.v2beta2.HorizontalPodAutoscalerSpec

    Attributes:
    maxReplicas: maxReplicas is the upper limit for the number of replicas to which the
        autoscaler can scale up. It cannot be less that minReplicas.
    scaleTargetRef: scaleTargetRef points to the target resource to scale, and is used to
        the pods for which metrics should be collected, as well as to actually change the
        replica count.
    behavior: behavior configures the scaling behavior of the target in both Up and Down
        directions (scaleUp and scaleDown fields respectively). If not set, the default
        HPAScalingRules for scale up and scale down are used.
    minReplicas: minReplicas is the lower limit for the number of replicas to which the
        autoscaler can scale down. It defaults to 1 pod. minReplicas is allowed to be 0 if
        the alpha feature gate HPAScaleToZero is enabled and at least one Object or
        External metric is configured. Scaling is active as long as at least one metric
        value is available.
    metrics: metrics contains the specifications for which to use to calculate the desired
        replica count (the maximum replica count across all metrics will be used). The
        desired replica count is calculated multiplying the ratio between the target value
        and the current value by the current number of pods. Ergo, metrics used must
        decrease as the pod count is increased, and vice-versa. See the individual metric
        source types for more information about how each type of metric must respond. If
        not set, the default metric will be set to 80% average CPU utilization.
    """

    maxReplicas: int
    scaleTargetRef: CrossVersionObjectReference
    behavior: Optional[HorizontalPodAutoscalerBehavior] = None
    minReplicas: Optional[int] = None
    metrics: Optional[List[MetricSpec]] = field(default_factory=list)


@dataclass
class HorizontalPodAutoscalerCondition(HikaruBase):
    """
    HorizontalPodAutoscalerCondition describes the state of a HorizontalPodAutoscaler at a
    certain point.

    Full name: io.k8s.api.autoscaling.v2beta2.HorizontalPodAutoscalerCondition

    Attributes:
    status: status is the status of the condition (True, False, Unknown)
    type: type describes the current condition
    lastTransitionTime: lastTransitionTime is the last time the condition transitioned
        from one status to another
    message: message is a human-readable explanation containing details about the
        transition
    reason: reason is the reason for the condition's last transition.
    """

    status: str
    type: str
    lastTransitionTime: Optional[Time] = None
    message: Optional[str] = None
    reason: Optional[str] = None


@dataclass
class MetricValueStatus(HikaruBase):
    """
    MetricValueStatus holds the current value for a metric

    Full name: io.k8s.api.autoscaling.v2beta2.MetricValueStatus

    Attributes:
    averageUtilization: currentAverageUtilization is the current value of the average of
        the resource metric across all relevant pods, represented as a percentage of the
        requested value of the resource for the pods.
    averageValue: averageValue is the current value of the average of the metric across
        all relevant pods (as a quantity)
    value: value is the current value of the metric (as a quantity).
    """

    averageUtilization: Optional[int] = None
    averageValue: Optional[Quantity] = None
    value: Optional[Quantity] = None


@dataclass
class ContainerResourceMetricStatus(HikaruBase):
    """
    ContainerResourceMetricStatus indicates the current value of a resource metric known
    to Kubernetes, as specified in requests and limits, describing a single container in
    each pod in the current scale target (e.g. CPU or memory). Such metrics are built in
    to Kubernetes, and have special scaling options on top of those available to normal
    per-pod metrics using the "pods" source.

    Full name: io.k8s.api.autoscaling.v2beta2.ContainerResourceMetricStatus

    Attributes:
    container: Container is the name of the container in the pods of the scaling target
    current: current contains the current value for the given metric
    name: Name is the name of the resource in question.
    """

    container: str
    current: MetricValueStatus
    name: str


@dataclass
class ExternalMetricStatus(HikaruBase):
    """
    ExternalMetricStatus indicates the current value of a global metric not associated
    with any Kubernetes object.

    Full name: io.k8s.api.autoscaling.v2beta2.ExternalMetricStatus

    Attributes:
    current: current contains the current value for the given metric
    metric: metric identifies the target metric by name and selector
    """

    current: MetricValueStatus
    metric: MetricIdentifier


@dataclass
class ObjectMetricStatus(HikaruBase):
    """
    ObjectMetricStatus indicates the current value of a metric describing a kubernetes
    object (for example, hits-per-second on an Ingress object).

    Full name: io.k8s.api.autoscaling.v2beta2.ObjectMetricStatus

    Attributes:
    current: current contains the current value for the given metric
    describedObject:
    metric: metric identifies the target metric by name and selector
    """

    current: MetricValueStatus
    describedObject: CrossVersionObjectReference
    metric: MetricIdentifier


@dataclass
class PodsMetricStatus(HikaruBase):
    """
    PodsMetricStatus indicates the current value of a metric describing each pod in the
    current scale target (for example, transactions-processed-per-second).

    Full name: io.k8s.api.autoscaling.v2beta2.PodsMetricStatus

    Attributes:
    current: current contains the current value for the given metric
    metric: metric identifies the target metric by name and selector
    """

    current: MetricValueStatus
    metric: MetricIdentifier


@dataclass
class ResourceMetricStatus(HikaruBase):
    """
    ResourceMetricStatus indicates the current value of a resource metric known to
    Kubernetes, as specified in requests and limits, describing each pod in the current
    scale target (e.g. CPU or memory). Such metrics are built in to Kubernetes, and have
    special scaling options on top of those available to normal per-pod metrics using the
    "pods" source.

    Full name: io.k8s.api.autoscaling.v2beta2.ResourceMetricStatus

    Attributes:
    current: current contains the current value for the given metric
    name: Name is the name of the resource in question.
    """

    current: MetricValueStatus
    name: str


@dataclass
class MetricStatus(HikaruBase):
    """
    MetricStatus describes the last-read state of a single metric.

    Full name: io.k8s.api.autoscaling.v2beta2.MetricStatus

    Attributes:
    type: type is the type of metric source. It will be one of "ContainerResource",
        "External", "Object", "Pods" or "Resource", each corresponds to a matching field
        in the object. Note: "ContainerResource" type is available on when the
        feature-gate HPAContainerMetrics is enabled
    containerResource: container resource refers to a resource metric (such as those
        specified in requests and limits) known to Kubernetes describing a single
        container in each pod in the current scale target (e.g. CPU or memory). Such
        metrics are built in to Kubernetes, and have special scaling options on top of
        those available to normal per-pod metrics using the "pods" source.
    external: external refers to a global metric that is not associated with any
        Kubernetes object. It allows autoscaling based on information coming from
        components running outside of cluster (for example length of queue in cloud
        messaging service, or QPS from loadbalancer running outside of cluster).
    object: object refers to a metric describing a single kubernetes object (for example,
        hits-per-second on an Ingress object).
    pods: pods refers to a metric describing each pod in the current scale target (for
        example, transactions-processed-per-second). The values will be averaged together
        before being compared to the target value.
    resource: resource refers to a resource metric (such as those specified in requests
        and limits) known to Kubernetes describing each pod in the current scale target
        (e.g. CPU or memory). Such metrics are built in to Kubernetes, and have special
        scaling options on top of those available to normal per-pod metrics using the
        "pods" source.
    """

    type: str
    containerResource: Optional[ContainerResourceMetricStatus] = None
    external: Optional[ExternalMetricStatus] = None
    object: Optional[ObjectMetricStatus] = None
    pods: Optional[PodsMetricStatus] = None
    resource: Optional[ResourceMetricStatus] = None


@dataclass
class HorizontalPodAutoscalerStatus(HikaruBase):
    """
    HorizontalPodAutoscalerStatus describes the current status of a horizontal pod
    autoscaler.

    Full name: io.k8s.api.autoscaling.v2beta2.HorizontalPodAutoscalerStatus

    Attributes:
    conditions: conditions is the set of conditions required for this autoscaler to scale
        its target, and indicates whether or not those conditions are met.
    currentReplicas: currentReplicas is current number of replicas of pods managed by this
        autoscaler, as last seen by the autoscaler.
    desiredReplicas: desiredReplicas is the desired number of replicas of pods managed by
        this autoscaler, as last calculated by the autoscaler.
    lastScaleTime: lastScaleTime is the last time the HorizontalPodAutoscaler scaled the
        number of pods, used by the autoscaler to control how often the number of pods is
        changed.
    observedGeneration: observedGeneration is the most recent generation observed by this
        autoscaler.
    currentMetrics: currentMetrics is the last read state of the metrics used by this
        autoscaler.
    """

    conditions: List[HorizontalPodAutoscalerCondition]
    currentReplicas: int
    desiredReplicas: int
    lastScaleTime: Optional[Time] = None
    observedGeneration: Optional[int] = None
    currentMetrics: Optional[List[MetricStatus]] = field(default_factory=list)


@dataclass
class HorizontalPodAutoscaler(HikaruBase):
    """
    HorizontalPodAutoscaler is the configuration for a horizontal pod autoscaler, which
    automatically manages the replica count of any resource implementing the scale
    subresource based on the metrics specified.

    Full name: io.k8s.api.autoscaling.v2beta2.HorizontalPodAutoscaler

    Attributes:
    apiVersion: APIVersion defines the versioned schema of this representation of an
        object. Servers should convert recognized schemas to the latest internal value,
        and may reject unrecognized values. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind: Kind is a string value representing the REST resource this object represents.
        Servers may infer this from the endpoint the client submits requests to. Cannot be
        updated. In CamelCase. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata: metadata is the standard object metadata. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    spec: spec is the specification for the behaviour of the autoscaler. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status.
    status: status is the current information about the autoscaler.
    """

    apiVersion: Optional[str] = None
    kind: Optional[str] = None
    metadata: Optional[ObjectMeta] = None
    spec: Optional[HorizontalPodAutoscalerSpec] = None
    status: Optional[HorizontalPodAutoscalerStatus] = None


@dataclass
class HorizontalPodAutoscalerList(HikaruBase):
    """
    HorizontalPodAutoscalerList is a list of horizontal pod autoscaler objects.

    Full name: io.k8s.api.autoscaling.v2beta2.HorizontalPodAutoscalerList

    Attributes:
    items: items is the list of horizontal pod autoscaler objects.
    apiVersion: APIVersion defines the versioned schema of this representation of an
        object. Servers should convert recognized schemas to the latest internal value,
        and may reject unrecognized values. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind: Kind is a string value representing the REST resource this object represents.
        Servers may infer this from the endpoint the client submits requests to. Cannot be
        updated. In CamelCase. More info:
        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata: metadata is the standard list metadata.
    """

    items: List[HorizontalPodAutoscaler]
    apiVersion: Optional[str] = None
    kind: Optional[str] = None
    metadata: Optional[ListMeta] = None


globs = dict(globals())
__all__ = [c.__name__ for c in globs.values()
           if type(c) == type]
del globs
